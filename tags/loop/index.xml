<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>loop on Getsrevel</title><link>https://getsrevel.github.io/tags/loop/</link><description>Recent content in loop on Getsrevel</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 01 Nov 2021 13:10:24 +0100</lastBuildDate><atom:link href="https://getsrevel.github.io/tags/loop/index.xml" rel="self" type="application/rss+xml"/><item><title>Circle Rain</title><link>https://getsrevel.github.io/tech/p5js/circle-rain/</link><pubDate>Mon, 01 Nov 2021 13:10:24 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/circle-rain/</guid><description>Eksemplet tegner en mængde cirkler på skærmen, der falder mod bunder af skærmen som en slags regn. Der defineres en funktion der kan ændre cirklernes egenskaber: position og hastighed. Der benyttes arrays til at kan holde styr de mange cirklers individuelle egenskaber.
const ballCount = 100 let diameters = new Array(ballCount); let xPositions = new Array(ballCount); let yPositions = new Array(ballCount); let ySpeeds = new Array(ballCount); function setup() { createCanvas(windowWidth, windowHeight); reset(50) } function draw() { background(220); for (let i = 0; i &amp;lt; ballCount; i++) { circle(xPositions[i], yPositions[i], diameters[i]) yPositions[i] += ySpeeds[i]; } } function reset(maxSize) { for (let i = 0; i &amp;lt; ballCount; i++) { diameters[i] = random(0, maxSize); ySpeeds[i] = random(0.</description></item><item><title>Nested Loops</title><link>https://getsrevel.github.io/tech/p5js/nested-loops/</link><pubDate>Sat, 05 Dec 2020 16:37:10 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/nested-loops/</guid><description>Dette er et eksempel på hvordan man bruge indlejrede løkker (løkker inden i andre løkker).
function setup() { createCanvas(windowWidth, windowHeight); } function draw(){ background(0); const gridSize = 35; const focusX = mouseX const focusY = mouseY for (let x = gridSize; x &amp;lt;= width - gridSize; x += gridSize) { for (let y = gridSize; y &amp;lt;= height - gridSize; y += gridSize) { stroke(255, random(40, 100)); strokeWeight(3) point(x, y); stroke(255, 20); strokeWeight(1) line(x, y, focusX, focusY); } } } Demo Prøv det kørende eksempel</description></item><item><title>Map Range</title><link>https://getsrevel.github.io/tech/p5js/map-range/</link><pubDate>Thu, 05 Nov 2020 17:07:16 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/map-range/</guid><description>Dette rutediagram viser hvordan en løkke fungerer.
flowchart TD start((S)) --> init[INITIALIZE] init --> cond{CONDITION?} cond -->|true| body[LOOP_BODY] body --> step[POST_STEP] step --> cond cond ---->|false| end_loop((E)) classDef termination fill:#fff,stroke:#000,color:#fff,stroke-width:4px; class start,end_loop termination %%classDef myClass fill:#ddd, stroke:#000; %%class init,cond,body,step myClass For løkke Her er for-løkken vist med pseudokode.
for(INITIALIZE;CONDITION;POST_STEP){ LOOP_BODY } Her er et konkret eksempel i javascript, der printer tal fra 0 til 9.
for(let i = 0; i &amp;lt; 10; i++){ console.</description></item></channel></rss>