[
{
	"uri": "https://getsrevel.github.io/tech/unity/unity-basics/",
	"title": "Unity Basics",
	"tags": [],
	"description": "",
	"content": "  Unity Install unity  How to make a Video Game in Unity Denne samling af videoer giver en introduktion til at komme igang med at lave et computerspil i Unity.\n Getting Started Basics (Episode 1) Programming (Episode 2) Movement (Episode 3) Camera follow (Episode 4) Collision (Episode 5) Gameplay (Episode 6) Score \u0026amp; ui (Episode 7) Game over (Episode 8) Winning levels (Episode 9) Finishing up (Episode 10)  How to MAKE YOUR GAME LOOK GOOD! - Brakeys   "
},
{
	"uri": "https://getsrevel.github.io/tech/react/react-intro/",
	"title": "React Intro",
	"tags": [],
	"description": "",
	"content": "Dette eksempel viser hvordan man kan starte med at arbejde med React.\nFor at gøre indlæringskurven knap så stejl, benyttes Create React App til at oprette projektstrukturen, så man ikke selv skal sætte det hele op fra bunden.\nForudsætninger For at kunne komme i gang kræves en fungerende installation af node.js.\nStart med at kontrollere din version af node og npm, hvilket kan gøres med disse kommandoer.\nnode --version npm --version På min maskine giver de følgende output.\n$ node --version v11.15.0 $ npm --version 6.7.0 I dette eksempel er benyttet node version v11.15.0 og npm version 6.7.0\nOpret projekt strukturen Sørg for at din terminal er i den mappe hvor du ønsker at oprette dit projekt. Dernæst kan du oprette et projekt med denne kommando.\nnpm init react-app my-app Kræver npm version 6.x.x eller højere.\nEfter scriptet er afsluttte med success, burde du så kunne skifte bibliotek til det oprettede projekt.\ncd my-app Derefter kan projektet køres med kommandoen.\nnpm start Dette kører din react app i udviklings-mode, hvilket bla. vil sige at der kører en server på maskine, så du kan se din app ved at åbne http://localhost:3000 i en browser.\nNår du åbner siden burde du se noget i stil med det der er vist på figuren.\n  Screenshot af den kørende react app.   React Components Prøv nu at lave din egen react komponent.\nFor at undgå at blande en masse forskellige komponenter sammen i laves den nye komponent i en separat fil. Opret filen src/components/Clock.js og indsæt følgende.\nimport React from \u0026#34;react\u0026#34;; function Clock() { return \u0026lt;div\u0026gt;Klokken er: TODO\u0026lt;/div\u0026gt;; } export default Clock; Nu kan Clock komponenten benyttes i andre dele af react app\u0026rsquo;en. Åben filen src/App.js og erstat indholdet med dette.\nimport React from \u0026#34;react\u0026#34;; import \u0026#34;./App.css\u0026#34;; import Clock from \u0026#34;./components/Clock\u0026#34;;  function App() { return ( \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;Clock /\u0026gt;  \u0026lt;/div\u0026gt; ); } export default App; Bemærk hvordan Clock komponenten importeres og indsættes i renderingen af App komponenten.\nStyling Vi har ikke brug for de css styles, der blev oprettet sammen med eksempel koden. Men lidt plads omkring indholdet er ok.\nErstat derfor indholdet af src/App.css med dette.\n.App { padding: 1em; } State Hook Det virker utilfredsstillende at bruge så meget energi på at lave et ur der ikke viser klokken.\nDet kan løses med lidt javascript. Man kan tilknytte state til enhver react komponent, så i dette tilfælde vil vi gøre det med tiden for uret ved at tilføje disse ændringer til src/components/Clock.js.\nimport React, {useState} from \u0026#34;react\u0026#34;;  function Clock() { const [time, setTime] = useState(new Date().toLocaleTimeString());  return \u0026lt;div\u0026gt;Klokken er: {time}\u0026lt;/div\u0026gt;; } export default Clock; Nu vises klokken, men desværre skal man genindlæse siden for at få uret til at gå.\nEffect Hook For at få uret til at gå kan vi benytte en useEffect hook, der kaldes ved bestemte hændelser i komponentens livs-cyclus (life-cycle-events).\nVi er intereseret i at opdatere uret hvert sekund. Hvilket kan opnås ved at ændre i Clock komponenten igen, så filen src/components/Clock.js ender med at se sådan ud.\nimport React, { useState, useEffect } from \u0026#34;react\u0026#34;;  function Clock() { const [time, setTime] = useState(new Date().toLocaleTimeString()); const updateTime = () =\u0026gt; { setTime(new Date().toLocaleTimeString()); }; useEffect(() =\u0026gt; { setInterval(updateTime, 1000); });  return \u0026lt;div\u0026gt;Klokken er: {time}\u0026lt;/div\u0026gt;; } export default Clock; Nu skulle uret gerne opdatere tiden en gang i sekundet.\nMateriale  React React - Main concepts Get Started - Create React App Create a New React App Use Effect Use State  "
},
{
	"uri": "https://getsrevel.github.io/project/",
	"title": "Project",
	"tags": [],
	"description": "",
	"content": "Projekter En samling ideer til opgaver og software projekter.\n"
},
{
	"uri": "https://getsrevel.github.io/tech/react/component-props/",
	"title": "Components + Data",
	"tags": [],
	"description": "",
	"content": "Her er et eksempel på hvordan man kan bruge properties på react komponenter til at vise udvalgte informationer, f.eks. fra en database eller et API.\nEksemplet bygger videre på den app der blev oprettet i React intro.\nInput data For at have noget data at vise, oprettes følgende datastruktur oprettet i filen src/lib/fake_highscores.js.\n// Fake data - could come from a database or similar const data = { userIdOne: { username: \u0026#34;jens\u0026#34;, firstName: \u0026#34;Jens\u0026#34;, lastName: \u0026#34;Hansen\u0026#34;, scores: [ { date: \u0026#34;2020-03-16T10:30:45\u0026#34;, score: 7 }, { date: \u0026#34;2020-03-16T12:30:45\u0026#34;, score: 15 }, { date: \u0026#34;2020-03-16T12:32:45\u0026#34;, score: 10 }, ] }, userIdTwo: { username: \u0026#34;jj\u0026#34;, firstName: \u0026#34;Jørgen\u0026#34;, lastName: \u0026#34;Jyde\u0026#34;, scores: [ { date: \u0026#34;2020-03-16T11:30:42\u0026#34;, score: 120 }, { date: \u0026#34;2020-03-16T12:35:31\u0026#34;, score: 12 }, { date: \u0026#34;2020-03-16T12:37:20\u0026#34;, score: 23 }, { date: \u0026#34;2020-03-17T09:07:34\u0026#34;, score: 17 }, { date: \u0026#34;2020-03-17T09:31:10\u0026#34;, score: 25 }, ] }, userIdThree: { username: \u0026#34;john\u0026#34;, firstName: \u0026#34;John\u0026#34;, lastName: \u0026#34;Doe\u0026#34;, scores: [ { date: \u0026#34;2020-03-16T10:57:45\u0026#34;, score: 11 }, { date: \u0026#34;2020-03-16T11:05:45\u0026#34;, score: 8 }, { date: \u0026#34;2020-03-16T11:21:12\u0026#34;, score: 13 }, ] } }; export default data;  I en rigtig app kan vi forestille os at data er gemt i en database, i og ikke blot gemt i en statisk fil.\nPræsentation i browser For at kunne vise highscore data i browseren laves en par nye komponenter i filen src/components/Highscore.js, så den har dette indhold.\nimport React from \u0026#34;react\u0026#34;; import data from \u0026#39;../lib/fake_highscores\u0026#39;; function Highscore() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Highscores\u0026lt;/h1\u0026gt; { Object.values(data).map(item =\u0026gt; ( \u0026lt;User key={item.username} user={item} /\u0026gt; ))  } \u0026lt;/div\u0026gt; ); } const User = props =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt; {props.user.firstName} {props.user.lastName} \u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Username: {props.user.username}\u0026lt;/p\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Time\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Score\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; {props.user.scores.map((item, i) =\u0026gt; ( \u0026lt;tr key={i}\u0026gt; \u0026lt;td\u0026gt;{item.date}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{item.score}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; ))} \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; ); }; export default Highscore; Bemærk hvordan der i Highscore komponenten itereres over data objektets værdier, og oprettes en react komponenter af typen User for hver entry.\nDerefter indsættes Highscore komponenten i vores App komponent, så src/App.js nu ser således ud:\nimport React from \u0026#39;react\u0026#39;; import \u0026#39;./App.css\u0026#39;; import Clock from \u0026#39;./components/Clock\u0026#39; import Highscore from \u0026#39;./components/Highscore\u0026#39;;  function App() { return ( \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;Clock /\u0026gt; \u0026lt;Highscore /\u0026gt;  \u0026lt;/div\u0026gt; ); } export default App; Styling af tabeller For at få html tabellerner med highscores til at se en smule pænere ud kan vi tilføje lidt css, så filen src/App.css nu ser således ud.\n.App { padding: 1em; } table { border-collapse: collapse; width: 30em; } th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; } tr:hover { background-color: #f5f5f5; } Materiale  React React - Main concepts Components and Props Lists and Keys Object values() Array map() Styling tables  "
},
{
	"uri": "https://getsrevel.github.io/tech/node/intro/",
	"title": "Intro",
	"tags": [],
	"description": "",
	"content": "Her er nogle links til at komme i gang med node.js.\n Node.js Getting started guide Node guides npm - Node Package Manager Express web framework for node.js  Node gør det muligt at lave programmer der kan køres fra kommandolinien. Her er et simpelt eksempel.\nlet name; name = \u0026#34;Allan\u0026#34;; let greeting = \u0026#34;Hej \u0026#34;; for (let i = 0; i \u0026lt; 5; i++) { let separator = \u0026#39;\u0026#39;; if(i \u0026lt; 3) { separator = \u0026#39;, \u0026#39;; } else if( i \u0026lt; 4){ separator = \u0026#39; og \u0026#39;; } greeting += name + separator; } console.log(greeting); let a = 5; let b = 3; let result = a * b; console.log(a + \u0026#34; gange \u0026#34; + b + \u0026#34; giver \u0026#34; + result); if (result \u0026gt; 5) { console.log(\u0026#34;Det var et stort tal\u0026#34;); } else { console.log(\u0026#34;Ok tak\u0026#34;); } console.log(\u0026#34;Program afslutter\u0026#34;); // this is a comment /* This is a multiline comment */  Hvis du gemmer koden i filen node-demo.js, kan du eksekvere programmet med denne kommando.\nnode node-demo.js Programmet burde så give følgende output i terminalen.\nHej Allan, Allan, Allan, Allan og Allan 5 gange 3 giver 15 Det var et stort tal Program afslutter "
},
{
	"uri": "https://getsrevel.github.io/tech/react/react-with-firebase/",
	"title": "React + Firebase",
	"tags": [],
	"description": "",
	"content": "Dette eksempel viser hvordan man kan integrere Firebase Firestore i en react app. Det tager udgangspunkt i samme simple eksempel, som blev brugt i hotdog demoen. Dog vil vi her nøjes med at læse data fra Firestore.\nEksemplet bygger videre på den app der blev oprettet i React intro, og udvidet i Components + Data.\nInstallation af Firebase For at kunne benytte funktionaliteter fra firebase i vores react app, er det nødvendigt at installere firebase SDK. Dette kan klares med følgende kommando, som henter pakken fra npm og tilføjer den til package.json, så vi har styr på projektets afhængigheder.\nnpm install firebase --save Konfiguration af Firebase Til dette eksempel er det ikke nødvendigt at oprette en ny firebase app, da den bruge samme Firestore database som denne demonstrationen fra tidligere. Det er dog stadig nødvendigt at konfigurere firebase SDK til at kommunikere med den ønskede backend.\nFor at kunne benytte firebase på en nem måde i flere forskellige komponenter laves opsætning af og initialisering af firebase SDK i filen src/lib/Firebase.js, som så kan importeres af de komponenter der skal bruge firebase.\nimport firebase from \u0026#34;firebase/app\u0026#34;; import \u0026#34;firebase/firestore\u0026#34;; // Your web app\u0026#39;s Firebase configuration const firebaseConfig = { apiKey: \u0026#34;YOUR_API_KEY\u0026#34;, authDomain: \u0026#34;YOUR_FIREBASE_APP_NAME.firebaseapp.com\u0026#34;, databaseURL: \u0026#34;https://YOUR_FIREBASE_APP_NAME.firebaseio.com\u0026#34;, projectId: \u0026#34;YOUR_FIREBASE_APP_NAME\u0026#34;, storageBucket: \u0026#34;YOUR_FIREBASE_APP_NAME.appspot.com\u0026#34;, messagingSenderId: \u0026#34;YOUR_SENDER_ID\u0026#34;, appId: \u0026#34;YOUR_APP_ID\u0026#34;, measurementId: \u0026#34;YOUR_MEASUREMENT_ID\u0026#34; }; // Initialize Firebase firebase.initializeApp(firebaseConfig); export default firebase; De konkrete settings, der skal bruges i dit projekt, finder du i firebase konsollen ved at gå ind i den app du vil bruge som backend. Åben derefter \u0026ldquo;Settings\u0026rdquo; og \u0026ldquo;General\u0026rdquo;. Måske skal der oprettes et web endpoint, hvis du ikke allerede har gjort det. For yderligere forklaringer kan denne intro sikkert bruges.\nLæs fra Firestore Nu er fundament på plads, så det er tid til at lave en react komponent, der henter data fra Firestore. Det gøres i filen src/components/Hotdog.js, og koden er som vist herunder.\nimport React, { useEffect, useState } from \u0026#34;react\u0026#34;; // import the firebase configuration settings import firebase from \u0026#34;../lib/Firebase\u0026#34;; // initialize firestore const firestore = firebase.firestore(); const docRef = firestore.doc(\u0026#34;samples/sandwichData\u0026#34;); function Hotdog() { const thingToDoWhithDocumentData = doc =\u0026gt; { if (doc \u0026amp;\u0026amp; doc.exists) { const myData = doc.data(); setHotdogStatus(myData.hotdogStatus); } }; const getRealtimeUpdates = () =\u0026gt; { docRef.onSnapshot(thingToDoWhithDocumentData); }; const [hotdogStatus, setHotdogStatus] = useState(\u0026#34;\u0026#34;); useEffect(() =\u0026gt; { // subscribe to realtime updates when component loads or updates  getRealtimeUpdates(); }); return ( \u0026lt;div className=\u0026#34;hotdog-status\u0026#34;\u0026gt; \u0026lt;b\u0026gt;Breaking News\u0026lt;/b\u0026gt; \u0026lt;h1\u0026gt;Hotdog status: \u0026lt;span\u0026gt;{hotdogStatus}\u0026lt;/span\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; ); } export default Hotdog; Derefter mangler vi blot at indsætte Hotdog i App komponenten, så src/App.js nu ser således ud:\nimport React from \u0026#39;react\u0026#39;; import \u0026#39;./App.css\u0026#39;; import Clock from \u0026#39;./components/Clock\u0026#39; import Highscore from \u0026#39;./components/Highscore\u0026#39;; import Hotdog from \u0026#39;./components/Hotdog\u0026#39;;  function App() { return ( \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;Clock /\u0026gt; \u0026lt;Hotdog /\u0026gt;  \u0026lt;Highscore /\u0026gt; \u0026lt;/div\u0026gt; ); } export default App; Vi tilføjer en smule css i src/App.css for at fremhæve den vigtige information om hotdogs.\n.App { padding: 1em; } table { border-collapse: collapse; width: 30em; } th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; } tr:hover { background-color: #f5f5f5; } .hotdog-status { display: inline-block; margin-top: 1em; padding: 1em; background-color: yellow; border-radius: .5em; -webkit-box-shadow: 8px 13px 16px 0px rgba(0, 0, 0, 0.85); -moz-box-shadow: 8px 13px 16px 0px rgba(0, 0, 0, 0.85); box-shadow: 8px 13px 16px 0px rgba(0, 0, 0, 0.85); } App Demo med Hotdog Status Den kørende app burde nu ligne noget i stil med det der er vist på figuren herunder.\n  Screenshot af den kørende react app.   Materiale  Add Firebase to your JavaScript project  "
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/intro/",
	"title": "Intro",
	"tags": [],
	"description": "",
	"content": "P5js introduktion  p5js p5 code editor browserbaseret editor der ikke kræver installation. p5 reference er dokumentation af de mange funktioner i p5. Variabler i javascript bliver grundigt forklaret og bruger et metafor med en kasse, der måske kan hjælpe lidt på forståelsen. Variable scope forklaret ved et eksempel.  Tegn på skærmen Denne video forklarer de grundlæggende principper i computergrafik.\n  Tegneprimitiver  Dokumentation af alle tegneprimitiver i p5.  Her nogle få udvalgte, der formentlig kan bruges til at løse opgaven.\n rect() line() ellipse() arc()  Her er nogle eksempler på hvordan de kan bruges i koden: en linie, et rektangel, en ellipse, et buestykke.\nline(x1, y1, x2, y2); rect(x, y, w, h); arc(x, y, w, h, start, stop);  Brug af farver Når du skal tegne kan du vælge egenskaber for din \u0026ldquo;pensel\u0026rdquo;. Dette gøres på inden du \u0026ldquo;maler\u0026rdquo;, på samme måde som med en rigtig pensel.\n stroke() vælger stregens farve. strokeWeight() vælger stregens tykkelse. fill() vælger fyldfarven. Denne har kun betydning for lukkede figurer som f.eks. firkanter og cirkler.  Du kan bruge color() til at oprette en farve, og gemme værdien i en variabel, så den nemt kan genbruges forskellige steder i programmet. Her er et eksempel:\nlet myColor = color(250, 142, 0) fill(myColor); circle(100, 150, 42);   Color Picker (google) kan bruges til at vælge en farve og se hvilke argumenter du skal give til color() funktionen. Color Picker - w3schools er en del af en længere forklaring om farver på hjemmesider og computergrafik.  "
},
{
	"uri": "https://getsrevel.github.io/tech/html/",
	"title": "Html",
	"tags": [],
	"description": "",
	"content": "HTML er et opmærkningssprog, der bruges til at kommunikere strukturen af indholdet i et dokument til en browser.\nHer er et eksempel på en html struktur.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Titlen på dokumentet\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; Indhold på siden \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; HTML elementer Når du skriver dit indhold benyttes en række forskellige tags, til at angive hvordan de forskellige dele (HTML elementer) af dokumentet skal fortolkes.\nGrundlæggende er html elementer opbygget således.\n\u0026lt;TAG_NAVN ATTRIBUT_NAVN=\u0026#34;ATTRIBUT_VÆRDI\u0026#34;\u0026gt;INDHOLD_AF_HTML_ELEMENT\u0026lt;/TAG_NAVN\u0026gt; Et html element består alså af disse elementer\n et start tag \u0026lt;TAG_NAVN\u0026gt; et slut tag der matcher start tag men med en skråstreg: \u0026lt;/TAG_NAVN\u0026gt; en eller flere attributter, bestående af et navn og en værdi.  Her er et par eksempler på HTML tags.\n\u0026lt;h1\u0026gt;Overskrift\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Dette er et afsnit med noget tekst.\u0026lt;/p\u0026gt; Indlejrede elementer Nogle html elementer er beregnet til at indeholde andre html elementer, et eksempel er når man laver en opremsning med en liste.\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;punkt 1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;punkt 2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;punkt 3\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; Typisk ender et dokument med at bestå af en række HTML elemementer, hver med et eller flere indlejrede dokumenter indeni.\nIkke afsluttede tags Det er ikke alle HTML elementer, hvor det semantisk giver mening at de har indhold. Derfor kan de også bestå af et tag der slutter sig selv. Et eksempel er hr (Horizontal rule)\n\u0026lt;hr /\u0026gt; Et andet eksempel er når der indsættes et billede. Her angives en URL til hvor billedets kilde kan findes som en attribut.\n\u0026lt;img src=\u0026#34;path/to/image/file.jpg\u0026#34; title=\u0026#34;En beskrivende title\u0026#34; alt=\u0026#34;Beskrivelse af billedet i fald det ikke kan vises\u0026#34; /\u0026gt; Alle de mange tags og hvordan de bruges kan du læse mere om i denne HTML Tutorial.\nDemo dokument Her er et lidt mere fyldigt eksempel.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Titlen på dokumentet\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Eksempel på HTML dokument\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Dette er et afsnit med noget tekst. Bemærk at jeg har sat et billede ind herunder\u0026lt;/p\u0026gt; \u0026lt;img src=\u0026#34;IMG_9747.jpg\u0026#34; alt=\u0026#34;kameleon i skovbunden\u0026#34; title=\u0026#34;Hovedet skiftede fra rødt til grønt mens jeg fandt kameraet frem\u0026#34; /\u0026gt; \u0026lt;hr /\u0026gt; \u0026lt;p\u0026gt;Her følger en liste med et par HTML elementer.\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;punkt 1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;punkt 2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;punkt 3\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;p\u0026gt;Man kan nemt ændre det til en ordnet liste.\u0026lt;/p\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;punkt 1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;punkt 2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;punkt 3\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; På denne side kan du se resultatet i din browser.\nMateriale HTML introduktion  HTML Tutorial Headings Paragraphs Lists Links Images figure figcaption  Video kursus (På dansk)  HTML Kursus  Quiz  HTML quiz  "
},
{
	"uri": "https://getsrevel.github.io/project/html-basics/",
	"title": "HTML Basics",
	"tags": [],
	"description": "",
	"content": "For at kunne løse opgaven har du sikkert brug for en kort introduktion til HTML.\nOpgave: Mig og min kageopskrift Lav et website i html der præsenterer dig selv og din yndlings kage:\n Der skal være 2 sider.  En beskrivelse af dig selv der navngives \u0026ldquo;profil.html\u0026rdquo;. En anden side med en mad opskrift \u0026ldquo;opskrift.html\u0026rdquo;.   Begge sider skal have en titel. Der skal være links så man kan navigere mellem de to sider.  På profil siden\n Brug forskellige niveauer af overskrifter. Lav mindst et afsnit med brødtekst (f.eks. En kort beskrivelse af dig selv). Indsæt et billede af dig selv.  Giv det en figurtekst med dit navn.    På siden med opskriften\n Lav overskrifter. Indsæt et billede af kagen. Lav en unummereret punktopstilling med ingredienser. Lav en nummeret punktopstilling med fremgangsmåden. Lav en henvisning (link) til kilden (hvor du fandt opskriften). Lav et link til \u0026ldquo;toppen\u0026rdquo; lokalt link på siden.  Opgave: Styling med CSS Arbejd med styling af HTML elementer vha CSS i eksternt stylesheet\n Brug html struktur fra opgaven med kageopskriften (index.html) Lav styling af siden ved hjælp af CSS i en ekstern fil (style.css)  Materiale  Introduktion til HTML Introduktion til CSS CSS grid layout  "
},
{
	"uri": "https://getsrevel.github.io/tech/css/",
	"title": "Css",
	"tags": [],
	"description": "",
	"content": "HTML bruges til at opbygge den semantiske struktur af et dokument. Dette har ikke nogen direkte kobling til det visuelle udtryk.\nNår vi skal styre udseendet på en webside bruges i stedet Cascading Style Sheets (CSS).\nCSS introduktion CSS er opbygget af en række regler, der angiver hvordan et eller flere HTML elementer skal vises.\nSELECTOR_ONE, SELECTOR_TWO { PROPERTY_ONE : VALUE_ONE; PROERTY_TWO : VALUE_TWO; } En regel består altså af\n En SELECTOR der udvælger de elementer, der er omfattet af reglen. Hvis der er flere selectors, adskilles listen med kommaer , En eller flere PROPERTIES (egenskaber) med en tilhørende værdi Listen af egenskaber er indkapslet som en blok i et sæt krøllede paranteser { ... } En egenskab og den tilhørende værdi er adskilt med et Kolon : Listen af egenskabs-/værdipar er adskilt af semikolon ;  Her er et konkret eksempel, der styrer fontstørrelsen og farven for overskrifter på niveau 2 (h2 elementer):\nh2 { font-size: 24px; color: blue; } Samspil med HTML Der er 3 måder at insætte css i en html struktur.\n Definition i ekstern fil Definition i internt i html strukturen Inline i html elementerne som værdi i attribut  Der er mange forskellige måder at lave en selector, der udvælger bestemte html elementer. De mest almindelige er\n Direkte vha. navn på elementet Ved brug af en klasse Ved brug af et ID  Kodeeksempel De forskellige måder at bruge styles og udvælge elementer er illustreret i dette eksempel.\nFormålet med eksemplet er ikke at lave en webside, der er visuelt pæn, men blot at illustrere et udvalg af hvordan styles og selectors kan bruges.\nHer er html strukturen i demo.html. Bemærk hvordan det eksterne stylesheet er inkluderet, definition af style internt i dokument, samt brug af inline style.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;external-style.css\u0026#34; \u0026gt;  \u0026lt;title\u0026gt;CSS på 3 måder\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; h3 { font-style: italic; }  \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h2\u0026gt;Ekstern Definition\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Udseendet af denne sektion er defineret i en ekstern css fil.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Selector er lavet vha. af elementets navn.\u0026lt;/p\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;main\u0026gt; \u0026lt;h1\u0026gt;Tre måder at bruge CSS i HTML\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Ekstern CSS Fil.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Intern CSS i dokument.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Inline CSS definition i style attribut.\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;h3\u0026gt;Intern definition\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;Som eksempel er der lavet en \u0026lt;strong\u0026gt;intern definition\u0026lt;/strong\u0026gt;, der ændrer skriften til kursiv for \u0026lt;code\u0026gt;h3\u0026lt;/code\u0026gt; elementer.\u0026lt;/p\u0026gt; \u0026lt;h2\u0026gt;Selectors\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Der er flere måde at udvælge elementer vha. selectors. De mest almindelige er:\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Direkte ved hjælp af navn på elementet.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Ved brug af en klasse.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Ved brug af et ID.\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h3\u0026gt;Element\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;Man kan bruge html elementer direkte som selector, så vil alle elementer der matches bruge samme stil.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Dette er lavet som eksempel i dette dokument, med \u0026lt;code\u0026gt;div\u0026lt;/code\u0026gt; elementer Der bliver vist som indrammede kasser.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;my-custom-class\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Klasse\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;Man kan bruge selectors til at vælge bestemte html elementer vha. deres navn. Dette er lavet som eksempel i dette dokument, med \u0026lt;code\u0026gt;div\u0026lt;/code\u0026gt; elementer Der bliver vist som indrammede kasser.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Man kan bruge html elementer direkte som selector, så vil alle elementer der matches bruge samme stil.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;my-custom-id\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Selector med ID\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;Man kan vælge at tildele et ID som en attribut til et element, og bruge det til styling.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;For denne blok er stilen lavet med et ID\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;em\u0026gt;Bemærk:\u0026lt;/em\u0026gt; at et id skal være unikt indefor et dokument.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;my-custom-class\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Klasser fortsat\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;Man kan bruge Samme klasse flere steder i sit dokument.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;footer\u0026gt; \u0026lt;h2\u0026gt;Demonstration af css\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Her er et eksempel på en \u0026lt;span style=\u0026#34;font-weight: bold; color: orange;\u0026#34;\u0026gt;inline style\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;  \u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Her er css filen strukturen i external-style.css\n/* Man kan indsætte kommentarer i CSS på denne måde */ /* Kommentarer kan sprede sig over flere linjer */ header { display: inline-flexbox; justify-content: flex-end; margin: 1em 1em; padding: 1em; background-color: yellow; border-radius: .5em; -webkit-box-shadow: 8px 13px 16px 0px rgba(0, 0, 0, 0.85); -moz-box-shadow: 8px 13px 16px 0px rgba(0, 0, 0, 0.85); box-shadow: 8px 13px 16px 0px rgba(0, 0, 0, 0.85); } body { margin: 0; } footer { background-color: gray; padding: .2em 3em; margin: 0; } h3 { color: brown; font-style: italic; } main { margin: 0 2em; } div { background-color: lightgrey; margin-bottom: 1em; padding: .1em 1em; border: 2px solid gray; } .my-custom-class { color: rgb(0, 92, 0); background-color: rgb(136, 207, 136); border-color: green; } #my-custom-id { background-color: lightpink; border-color: darkred; margin-left: 2em; margin-right: 2em; border-radius: .5em; border-width: 5px; } Demo Prøv det kørende eksempel.\nMateriale  CSS Tutorial CSS Syntax and Selectors Three Ways to Insert CSS Same Page Different Stylesheets CSS Box Model  Eksempler  zebra stripes on a table Fancy table  Quiz  CSS quiz  Css zen garden Eksempler på forskellige styles brugt på den samme html struktur.\n Eks. 215 Eks. 217 Eks. 216 Eks. 211 Eks. 212  "
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/canvas/",
	"title": "Canvas",
	"tags": [],
	"description": "",
	"content": "Dette eksempel viser hvordan man opretter et lærred og tegner figurer på skærmen. Der benyttes variabler og musemarkørens position til at styre hvor på skærmen der tegnes.\nfunction setup() { createCanvas(windowWidth, windowHeight); } function draw() { background(220); fill(255); // variable declaration  let x; // variable assignment  x = mouseX; // declaration and assignment in one line  let y = mouseY; circle(x, y, 150); // assign a new value to x  x = 200; ellipse(x, y, 80, 40); fill(255, 0, 0); circle(width, height, 120); let cx = width / 2; let cy = height / 2; circle(cx, cy, 50); }  Demo Prøv det kørende eksempel\nMateriale  setup() createCanvas() draw() background() fill() mouseX mouseY circle() ellipse()  "
},
{
	"uri": "https://getsrevel.github.io/",
	"title": "Getsrevel",
	"tags": [],
	"description": "",
	"content": "Getsrevel Velkommen til mit website der primært er løse noter om programmering og andet \u0026ldquo;work in progress\u0026rdquo;.\n"
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/map-range/demo/",
	"title": "Map range demo",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/map-range/",
	"title": "Map Range",
	"tags": [],
	"description": "",
	"content": "Dette eksempel viser hvordan man kan benytte funktionen map(), til at lave lineær interpolation.\nfunction setup() { createCanvas(windowWidth, windowHeight); fill(133, 18, 9); stroke(209, 52, 40) strokeWeight(3) } function draw() { background(70); // Define tilt based on mouse horizontal position  const yRange = height / 4 const deltaY = map(mouseX, 0, width, -yRange, yRange, true)  // Define control points  const ax = 50 const ay = height / 2 - deltaY const bx = width - ax const by = height / 2 + deltaY // Draw large cirles at control poins  const diameter = 50 circle(ax, ay, diameter) circle(bx, by, diameter) // Define number of circles based on mouse vertical position  let n = map(mouseY, 0, height, 30, 2, true) n = ceil(n) // Draw circles using a loop  for (let i = 0; i \u0026lt;= n; i++) { const x = map(i, 0, n, ax, bx) const y = map(i, 0, n, ay, by)  circle(x, y, diameter / 2) } }  Demo Prøv det kørende eksempel\nMateriale  Loops: while and for - Javascript tutorial for - MDN docs setup() createCanvas() draw() fill() stroke() strokeWeight() background() map() line() circle()  "
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/logical-operators/demo/",
	"title": "Logical operators demo",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/logical-operators/",
	"title": "Logical Operators",
	"tags": [],
	"description": "",
	"content": "Dette eksempel viser hvordan man kan benytte de forskellige logiske operatorer: OR, AND, NOT, XOR.\nOR (||) let result = a || b     a b result     FALSE ❌ FALSE ❌ FALSE ❌   FALSE ❌ TRUE ✔️ TRUE ✔️   TRUE ✔️ FALSE ❌ TRUE ✔️   TRUE ✔️ TRUE ✔️ TRUE ✔️    AND (\u0026amp;\u0026amp;) let result = a \u0026amp;\u0026amp; b     a b result     FALSE ❌ FALSE ❌ FALSE ❌   FALSE ❌ TRUE ✔️ FALSE ❌   TRUE ✔️ FALSE ❌ FALSE ❌   TRUE ✔️ TRUE ✔️ TRUE ✔️    NOT (!) let result = !a     a result     FALSE ❌ TRUE ✔️   TRUE ✔️ FALSE ❌    XOR Der findes ikke en selvstændig operator, der laver XOR i javascript. Denne kan opbygges af de andre logiske operationer.\nlet result = a \u0026amp;\u0026amp; b! || !a \u0026amp;\u0026amp; b     a b result     FALSE ❌ FALSE ❌ FALSE ❌   FALSE ❌ TRUE ✔️ TRUE ✔️   TRUE ✔️ FALSE ❌ TRUE ✔️   TRUE ✔️ TRUE ✔️ FALSE ❌    Visualisering med kode function setup() { createCanvas(windowWidth, windowHeight); rectMode(CENTER); } function draw() { background(220) const size = windowHeight/8 let w = size let h = size const x = mouseX const y = mouseY const xLimit = width / 2 const yLimit = height / 2 // Boolean expression  const xIsSmall = x \u0026lt; xLimit const yIsSmall = y \u0026lt; yLimit // NOT operator  const xIsLarge = !xIsSmall const yIsLarge = !yIsSmall // defaults  let c = color(220) let lineWidth = 2 // BRANCH on condition  if (xIsSmall) { w = w / 2; } if (yIsSmall) { h = h / 2 } // OR operator  if (xIsSmall || yIsSmall) { c = color(\u0026#34;red\u0026#34;); } // AND operator  if (xIsLarge \u0026amp;\u0026amp; yIsLarge) { lineWidth = lineWidth * 3; } // XOR  const showAsRectangle = xIsLarge \u0026amp;\u0026amp; !yIsLarge || !xIsLarge \u0026amp;\u0026amp; yIsLarge; // Draw moving shape  fill(c); strokeWeight(lineWidth); if (showAsRectangle) { rect(x, y, w, h) } else { ellipse(x, y, w, h); } // Draw limits  line(xLimit, 0, xLimit, height) line(0, yLimit, width, yLimit) }  Demo Prøv det kørende eksempel\nMateriale  Logical operators - Javascript tutorial Conditional branching: if, \u0026lsquo;?' - Javascript tutorial XOR gate setup() createCanvas() draw() background() fill() mouseX mouseY rect() rectMode() ellipse()  "
},
{
	"uri": "https://getsrevel.github.io/tech/css/flexbox-layout/demo/",
	"title": "Flexbox Layout demo",
	"tags": [],
	"description": "",
	"content": "\r\r\rPage Title\r\r\rlogo\rMain Title\r\r\rpkt L1\rpkt L2\rpkt L3\rpkt L4\r\r\rpkt R1\rpkt R2\r\r\r1\r2\r3\r4\r5\r6\r7\r8\r9\r\r1\r2\r3\r\r\r\r\r"
},
{
	"uri": "https://getsrevel.github.io/tech/node/socket-io-demo/demo/",
	"title": "Demo",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://getsrevel.github.io/tech/css/flexbox-layout/",
	"title": "Flexbox Layout",
	"tags": [],
	"description": "",
	"content": " Dette eksempel viser hvordan man kan bruge flexbox layout til at lave et layout på en webside.\nDet består af et enkelt html dokument og en tilhørende css fil.\nHer er den html struktur der er brugt.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Page Title\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; media=\u0026#34;screen\u0026#34; href=\u0026#34;style.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;top\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;logo\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;Main Title\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;menu\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;pkt L1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;pkt L2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;pkt L3\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;pkt L4\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;pkt R1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;pkt R2\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;middle\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;3\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;4\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;5\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;6\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;7\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;8\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;9\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bottom-wrapper\u0026#34;\u0026gt; \u0026lt;footer class=\u0026#34;bottom\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;3\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; CSS filen ser således ud.\n.box { background-color: #f1f1f1; min-width: 100px; margin: 10px; padding: 10px; text-align: center; font-size: 30px; } div { margin: 0; padding: 0; } body { margin: 0; padding: 0; min-height: 100vh; display: flex; flex-direction: column; background-color: burlywood; } .top { display: flex; background-color: green; } .menu { display: flex; flex-direction: row; justify-content: space-between; background-color: brown; } .menu ul { display: flex; flex-direction: row; list-style: none; background-color: aqua; padding: 0; } .menu\u0026gt;ul:last-child { display: flex; align-items: flex-end; list-style: none; background-color: purple; } .menu li { text-align: center; padding: 5px; margin: 3px; border: 2px solid black; background-color: olive; } .menu li:hover { background-color: chartreuse; } .middle { display: flex; flex-wrap: wrap; } .bottom-wrapper { margin-top: auto; } .bottom { display: flex; flex: 1; flex-direction: row; justify-content: space-around; background-color: black; } Demo Prøv det kørende eksempel.\nMateriale  CSS Tutorial Same Page Different Stylesheets  CSS Flexbox  A guide to flexbox  Eksempler  zebra stripes on a table Fancy table  Spil  Flexbox froggy  "
},
{
	"uri": "https://getsrevel.github.io/tech/css/css-3-methods/",
	"title": "Css 3 Methods demo",
	"tags": [],
	"description": "",
	"content": "\r\rCSS på 3 måder\r\rh3 {\rfont-style: italic;\r}\r\r\r\r\rEkstern Definition\rUdseendet af denne sektion er defineret i en ekstern css fil.\nSelector er lavet vha. af elementets navn.\n\r\rTre måder at bruge CSS i HTML\r\rEkstern CSS Fil.\rIntern CSS i dokument.\rInline CSS definition i style attribut.\r\rIntern definition\rSom eksempel er der lavet en intern definition, der ændrer skriften til kursiv for h3 elementer.\nSelectors\rDer er flere måde at udvælge elementer vha. selectors. De mest almindelige er:\n\rDirekte ved hjælp af navn på elementet.\rVed brug af en klasse.\rVed brug af et ID.\r\r\rElement\rMan kan bruge html elementer direkte som selector, så vil alle elementer der matches bruge samme stil.\nDette er lavet som eksempel i dette dokument, med div elementer Der bliver vist som indrammede kasser.\n\rKlasse\rMan kan bruge selectors til at vælge bestemte html elementer vha. deres navn. Dette er lavet som eksempel i dette dokument, med div elementer Der bliver vist som indrammede kasser.\nMan kan bruge html elementer direkte som selector, så vil alle elementer der matches bruge samme stil.\n\rSelector med ID\rMan kan vælge at tildele et ID som en attribut til et element, og bruge det til styling.\nFor denne blok er stilen lavet med et ID\nBemærk: at et id skal være unikt indefor et dokument.\n\rKlasser fortsat\rMan kan bruge Samme klasse flere steder i sit dokument.\n\r\r\rDemonstration af css\rHer er et eksempel på en inline style\n\r\r "
},
{
	"uri": "https://getsrevel.github.io/tech/css/grid-layout/",
	"title": "Grid Layout",
	"tags": [],
	"description": "",
	"content": "Dette eksempel viser hvordan man kan bruge css grid til at lave et responsive layout på en webside.\nDet består af et enkelt html dokument og en tilhørende css fil.\nHer er den html struktur der er brugt.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;CSS grid layout\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;style.css\u0026#34; \u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;grid-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;item1\u0026#34;\u0026gt;\u0026lt;h2\u0026gt; Header \u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Prøv at ændre i bredden på vinduet og læg mærke til hvad der sker med layoutet.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item2\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Menu\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Menu item 1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Menu item 2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Menu item 3\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Menu item 4\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Menu item 5\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur, adipisicing elit.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item3\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Main\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;breaking\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Under udarbejdelse\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. Aperiam tenetur, quidem reiciendis itaque beatae dolores consequuntur eos fugiat iste consequatur rem molestias, exercitationem veniam nisi iure minima fuga illum ea.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Quod voluptates accusantium rerum a cum, quidem modi velit voluptatum magnam corrupti repudiandae minus, eveniet ipsum sunt soluta labore aliquam possimus. Natus tempora itaque eos aliquid earum quae asperiores blanditiis!\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Itaque velit molestias provident amet magni voluptas, voluptatibus maxime esse. Quaerat id molestias odio dolore animi nemo, suscipit modi magnam quasi temporibus omnis sint natus ducimus dignissimos labore fugit voluptatem!\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Similique vitae architecto sequi error soluta nobis iste quos voluptatem expedita repudiandae numquam fugit fugiat, debitis omnis incidunt ipsam possimus sint magni quas cumque aspernatur! Voluptatem saepe sed quis corporis.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item4\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Right\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Quia, repellat. Ducimus accusamus temporibus cum perspiciatis, incidunt illo saepe error ex ad reiciendis at magni, deleniti velit in voluptatibus iusto eos.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Voluptatum, dicta quis iste cumque magni harum quaerat cupiditate adipisci culpa libero quae accusantium praesentium excepturi quod eum obcaecati dolorum iusto aperiam est. Soluta, enim? Culpa autem temporibus rem eaque.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Possimus animi minima aliquam molestiae laboriosam sit aliquid tenetur ut consectetur deserunt architecto, perspiciatis facere earum magnam totam minus quisquam incidunt placeat optio quidem! Minima, repellendus. Natus dolorum optio ducimus.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Expedita aliquid, quam iusto voluptas totam possimus laboriosam earum fugiat ducimus, esse soluta rerum, non iure. Ex nemo animi molestias aliquid aperiam placeat ducimus qui numquam provident nostrum, magnam ipsa.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item5\u0026#34;\u0026gt;\u0026lt;h2\u0026gt;Footer\u0026lt;/h2\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; CSS filen ser således ud.\n.item1 { grid-area: header; } .item2 { grid-area: menu; } .item3 { grid-area: main; } .item4 { grid-area: right; } .item5 { grid-area: footer; } .grid-container { display: grid; grid-template-areas: \u0026#39;header header header header header header\u0026#39; \u0026#39;menu main main main right right\u0026#39; \u0026#39;menu footer footer footer right right\u0026#39;; grid-gap: 10px; background-color: #2196F3; padding: 10px; } @media only screen and (max-width: 70em) { .grid-container { background-color: rgb(10, 192, 10); grid-template-areas: \u0026#39;header header \u0026#39; \u0026#39;main main \u0026#39; \u0026#39;menu right\u0026#39; \u0026#39;footer footer\u0026#39;; } } @media only screen and (max-width: 50em) { .grid-container { background-color: rgb(226, 45, 32); grid-template-areas: \u0026#39;header\u0026#39; \u0026#39;main\u0026#39; \u0026#39;menu\u0026#39; \u0026#39;right\u0026#39; \u0026#39;footer\u0026#39;; } } .grid-container \u0026gt; div { background-color: rgba(218, 226, 231, 0.822); padding: 1em 1em; font-size: 30px; } .breaking { text-align: center; margin-top: 1em; padding: 1em; background-color: yellow; border-radius: .5em; -webkit-box-shadow: 8px 13px 16px 0px rgba(0, 0, 0, 0.85); -moz-box-shadow: 8px 13px 16px 0px rgba(0, 0, 0, 0.85); box-shadow: 8px 13px 16px 0px rgba(0, 0, 0, 0.85); } Demo Prøv det kørende eksempel.\nMateriale  CSS Tutorial Same Page Different Stylesheets CSS Grid Layout Module  Spil  CSS Grid Garden  "
},
{
	"uri": "https://getsrevel.github.io/tech/css/grid-layout/grid-demo/",
	"title": "Grid Layout demo",
	"tags": [],
	"description": "",
	"content": "\r\rCSS grid layout\r\r\r\rHeader\r\rPrøv at ændre i bredden på vinduet og læg mærke til hvad der sker med layoutet.\n\rMenu\r\rMenu item 1\rMenu item 2\rMenu item 3\rMenu item 4\rMenu item 5\r\rLorem ipsum dolor sit amet consectetur, adipisicing elit.\n\rMain\rUnder udarbejdelse\r\rLorem ipsum dolor, sit amet consectetur adipisicing elit. Aperiam tenetur, quidem reiciendis itaque beatae dolores consequuntur eos fugiat iste consequatur rem molestias, exercitationem veniam nisi iure minima fuga illum ea.\nQuod voluptates accusantium rerum a cum, quidem modi velit voluptatum magnam corrupti repudiandae minus, eveniet ipsum sunt soluta labore aliquam possimus. Natus tempora itaque eos aliquid earum quae asperiores blanditiis!\nItaque velit molestias provident amet magni voluptas, voluptatibus maxime esse. Quaerat id molestias odio dolore animi nemo, suscipit modi magnam quasi temporibus omnis sint natus ducimus dignissimos labore fugit voluptatem!\nSimilique vitae architecto sequi error soluta nobis iste quos voluptatem expedita repudiandae numquam fugit fugiat, debitis omnis incidunt ipsam possimus sint magni quas cumque aspernatur! Voluptatem saepe sed quis corporis.\n Right\rLorem ipsum dolor sit amet consectetur adipisicing elit. Quia, repellat. Ducimus accusamus temporibus cum perspiciatis, incidunt illo saepe error ex ad reiciendis at magni, deleniti velit in voluptatibus iusto eos.\nVoluptatum, dicta quis iste cumque magni harum quaerat cupiditate adipisci culpa libero quae accusantium praesentium excepturi quod eum obcaecati dolorum iusto aperiam est. Soluta, enim? Culpa autem temporibus rem eaque.\nPossimus animi minima aliquam molestiae laboriosam sit aliquid tenetur ut consectetur deserunt architecto, perspiciatis facere earum magnam totam minus quisquam incidunt placeat optio quidem! Minima, repellendus. Natus dolorum optio ducimus.\nExpedita aliquid, quam iusto voluptas totam possimus laboriosam earum fugiat ducimus, esse soluta rerum, non iure. Ex nemo animi molestias aliquid aperiam placeat ducimus qui numquam provident nostrum, magnam ipsa.\n\rFooter\r\r\r\r"
},
{
	"uri": "https://getsrevel.github.io/tech/arduino/button-trigger/",
	"title": "Button Trigger",
	"tags": [],
	"description": "",
	"content": "Dette eksempel viser hvordan man kan måle tiden mellem to hændelser.\n Pin 2: starter timer når forbindelsen til GND afbrydes. Pin 3: stopper tidtagningen når forbindelsen til GND sluttes.  Den indbyggede LED er tændt, mens tidtagningen er i gang.\nconst int startPin = 2; const int gatePin = 3; const int ledPin = 13; int isStarted = false; int hasTriggeredGate = false; unsigned long startTime = 0; unsigned long gateTime = 0; void setup() { pinMode(ledPin, OUTPUT); pinMode(startPin, INPUT_PULLUP); pinMode(gatePin, INPUT_PULLUP); Serial.begin(9600); Serial.println(\u0026#34;Ready...\u0026#34;); } void loop() { int startState = digitalRead(startPin); // Turn on LED while measurement is running  int measRunning = isStarted \u0026amp;\u0026amp; !hasTriggeredGate; digitalWrite(ledPin, measRunning); // Handle start trigger  if (HIGH == startState \u0026amp;\u0026amp; !isStarted) { startTime = millis(); isStarted = true; Serial.print(\u0026#34;Start time 1: \u0026#34;); Serial.println(startTime); } // Handle gate trigger  int gateState = digitalRead(gatePin); if (LOW == gateState \u0026amp;\u0026amp; !hasTriggeredGate) { gateTime = millis(); hasTriggeredGate = true; Serial.print(\u0026#34;Gate time: \u0026#34;); Serial.println(gateTime); Serial.print(\u0026#34;Time diff: \u0026#34;); unsigned long timeDiff = gateTime - startTime; Serial.println(timeDiff); } } "
},
{
	"uri": "https://getsrevel.github.io/tech/arduino/neopixel/",
	"title": "Neopixel",
	"tags": [],
	"description": "",
	"content": "Dette eksempel laver et \u0026ldquo;løbelys\u0026rdquo; med blå farver.\nHardware setup   Arduino og LED array hardware   LED modulerne er forbunde i en kæde, så data signalets output er forbundet til input på næste LED modul. Alle modulerne forsynes med 5V fra arduino. Der er monteret en kondensator for at udjævne spændingen. Datasignalet tages fra pin 6 på Arduino.\nArduino \u0026amp; NeoPixel For at kunne styre arrayet af NeoPixel LED\u0026rsquo;er kan du benytte softwarebiblioteket Adafruit Neopixel.\nDet kan tilføjes til din Arduino IDE installation ved at bruge udvidelsesværkttøjet (Værktøjer \u0026ndash;\u0026gt; Manage libraries\u0026hellip;), som vist på dette skærmbillede.\n  Søg efter neopixel i Arduino Library manager   Der følger en del eksempelkode med i til Neopixel biblioteket til Arduino. Denne guide beskriver hvordan man bruger eksempler i Arduino.\nPrøv f.eks. det der hedder simple, i Adafruit Neopixel biblioteket. Husk at ændre antallet af LED\u0026rsquo;er i koden, så det passer til hardwaren. Bemærk også, at du skal bruge samme output pin i koden, som du har forbundet med ledninger.\nKode eksempel Her er en sketch, der laver et \u0026ldquo;løbelys\u0026rdquo; med blå farver.\n#include \u0026lt;Adafruit_NeoPixel.h\u0026gt; // Which pin on the Arduino is connected to the NeoPixels? #define PIN 6 // On Trinket or Gemma, suggest changing this to 1  // How many NeoPixels are attached to the Arduino? #define NUMPIXELS 10  Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800); // Time (in milliseconds) to pause between pixels #define DELAYVAL 500  void setup() { // INITIALIZE NeoPixel strip object (REQUIRED)  pixels.begin(); } void loop() { pixels.clear(); // Set all pixel colors to \u0026#39;off\u0026#39;  // The first NeoPixel in a strand is #0, second is 1, all the way up  // to the count of pixels minus one.  for(int i=0; i\u0026lt;NUMPIXELS; i++) { // For each pixel...  // pixels.Color() takes RGB values, from 0,0,0 up to 255,255,255  pixels.setPixelColor(i, pixels.Color(0, 20, 150)); // Send the updated pixel colors to the hardware.  pixels.show(); // Pause before next pass through loop  delay(DELAYVAL); } } Materiale  Arduino Arduino IDE Arduino programming reference Installing arduino libraries Eksempler fra Arduino biblioteker Adafruit NeoPixel Adafruit NeoPixel Überguide  "
},
{
	"uri": "https://getsrevel.github.io/tech/unity/",
	"title": "Unity",
	"tags": [],
	"description": "",
	"content": "Unity Noter og eksempler med Unity.\n"
},
{
	"uri": "https://getsrevel.github.io/project/code-lock/",
	"title": "Code Lock",
	"tags": [],
	"description": "",
	"content": "Dette projekt går ud på at lave en kodelås til en automatisk bom ved at programmere Lego Mindstorms.\nHardware setup Start med at bygge en konstruktion af din automatiske bom med kodelæser. Du skal også bruge et antal farver, der kan scannes når du tester programmet.\n  Forbindelser til EV3 brikken    Modul Port     Stor motor C   color sensor 2   trykknap 4    Opgave Lav en kodelås der styrer en automatisk bom.\n Man skal kunne låse den op ved hjælp af indlæsning af farver i en bestemt sekvens. Indlæsningen af hver farve bekræftes med et tryk på den tilsluttede knap. Man skal kunne ændre på farverne og længden af sekvensen uden at lave en større modifikation af programmet (Hint: Benyt f.eks et array).  Forslag til kodestruktur Denne struktur kan bruges som skabelon til at løse opgaven.\nlet code: number[] = [] let isCorrect = false function openGate() { // TODO Scan code and determine if it matches correct } sensors.color2.setMode(ColorSensorMode.Color) motors.largeC.setBrake(true) code = [ColorSensorColor.Red, ColorSensorColor.Green, ColorSensorColor.Blue, ColorSensorColor.Brown] forever(function () { // Indicate program is running  brick.showImage(images.eyesBlackEye) isCorrect = true // TODO Scan code and determine if it matches correct sequence  if (isCorrect) { openGate() } else { // TODO indicate wrong code  } })  "
},
{
	"uri": "https://getsrevel.github.io/tech/node/readline-stdin/",
	"title": "Readline on Stdin",
	"tags": [],
	"description": "",
	"content": "Dette eksempel viser en måde at tage imod input fra kommandolinien.\nOpret filen readline-demo.js med følgende indhold.\nconst readline = require(\u0026#39;readline\u0026#39;); const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); const getLine = (function () { const getLineGen = (async function* () { for await (const line of rl) { yield line; } })(); return async () =\u0026gt; ((await getLineGen.next()).value); })(); const main = async () =\u0026gt; { console.log(\u0026#39;Type value for a\u0026#39;); let a = Number(await getLine()); console.log(`Got a: ${a}`); console.log(\u0026#39;Type value for b\u0026#39;); let b = Number(await getLine()); console.log(`Got b: ${b}`); console.log(\u0026#39;Result of a+b\u0026#39;); console.log(a + b); process.exit(0); }; main();  Nu kan du køre eksemplet med denne kommando:\nnode readline-demo.js Når eksemplet kører bliver der bedt om først en værdi for variablen a, dernæst for variablen b.\nHvis eksemplet køres og værdierne 42 og 31 indtastes, giver programmet dette output.\nreadline-stdin$ node .\\readline-demo.js Type value for a 42 Got a: 42 Type value for b 31 Got b: 31 Result of a+b 73 readline-stdin$ Input via pipe Hvis du er på windows og bruger powershell kan du også give input til stdin direkte på kommandolinien.\necho \u0026#34;42`n31\u0026#34; | node readline-demo.js Bemærk powershell har en række escape sekvenser der bruges til at insætte special tegn, `n bruges at indsætte et linieskift i en streng.\nBruger du mac eller linux kan du opnå samme resultat med denne kommando.\nprintf \u0026#34;42\\n31\\n\u0026#34; | node readline-demo.js Materiale  Readline node.js documentation. Async/await function* generator function in javascript. Echo newline to powershell console  "
},
{
	"uri": "https://getsrevel.github.io/tech/arduino/hex-string/",
	"title": "Hex String",
	"tags": [],
	"description": "",
	"content": "Dette eksempel illustrerer hvordan man kan arbejde med strenge, og konvertere de enkelte bytes i en streng til hex tal med foranstillede nuller.\nchar my_str[] = {72, 101, 106, 44, 32, 10, 86, 101, 114, 100, 101, 110, 33, 0}; char outputBuffer[3]; // Helper function for converting byte value to 2-digit hex string void byte2HexStr(byte val, char* outputBuffer){ const char HEX_DIGITS[16] = \u0026#34;0123456789ABCDEF\u0026#34;; byte upper_nibble_index = (val \u0026amp; 0xf0) \u0026gt;\u0026gt; 4; byte lower_nibble_index = val \u0026amp; 0xf; outputBuffer[0] = HEX_DIGITS[upper_nibble_index]; outputBuffer[1] = HEX_DIGITS[lower_nibble_index]; outputBuffer[2] = \u0026#39;\\0\u0026#39;; } void setup() { Serial.begin(115200); // Output some example strings  Serial.println(\u0026#34;Content:\u0026#34;); Serial.println(my_str); Serial.println(); Serial.println(\u0026#34;Content, decimal values of bytes:\u0026#34;); for(int i = 0; i \u0026lt; sizeof(my_str); i++) { Serial.print(my_str[i], DEC); Serial.print(\u0026#34; \u0026#34;); } Serial.println(\u0026#39;\\n\u0026#39;); Serial.println(\u0026#34;Content, hex values of bytes:\u0026#34;); for(int i = 0; i \u0026lt; sizeof(my_str); i++) { Serial.print(my_str[i], HEX); Serial.print(\u0026#34; \u0026#34;); } Serial.println(\u0026#39;\\n\u0026#39;); Serial.println(\u0026#34;Content, hex values zero-padded bytes:\u0026#34;); for(int i = 0; i \u0026lt; sizeof(my_str); i++) { byte2HexStr(my_str[i], outputBuffer); Serial.print(outputBuffer); Serial.print(\u0026#34; \u0026#34;); } Serial.println(\u0026#39;\\n\u0026#39;); Serial.println(\u0026#34;Content, append to string object:\u0026#34;); String myStrObject = \u0026#34;\u0026#34;; for(int i = 0; i \u0026lt; sizeof(my_str); i++) { myStrObject += String(my_str[i], HEX); } Serial.println(myStrObject); Serial.println(); Serial.println(\u0026#34;Content, append to string object using byte2HexStr helper:\u0026#34;); myStrObject = \u0026#34;\u0026#34;; for(int i = 0; i \u0026lt; sizeof(my_str); i++) { byte2HexStr(my_str[i], outputBuffer); myStrObject += outputBuffer; } Serial.println(myStrObject); Serial.println(); Serial.println(\u0026#34;Content, append to string object with separator:\u0026#34;); myStrObject = \u0026#34;\u0026#34;; for(int i = 0; i \u0026lt; sizeof(my_str); i++) { myStrObject += String(my_str[i], HEX); // add separator except for the last element  if(i \u0026lt; (sizeof(my_str) - 1)){ myStrObject += \u0026#34;:\u0026#34;; } } Serial.println(myStrObject); Serial.println(); Serial.println(\u0026#34;Content, append to string object using byte2HexStr helper with separator:\u0026#34;); myStrObject = \u0026#34;\u0026#34;; for(int i = 0; i \u0026lt; sizeof(my_str); i++) { byte2HexStr(my_str[i], outputBuffer); myStrObject += outputBuffer; // add separator except for the last element  if(i \u0026lt; (sizeof(my_str) - 1)){ myStrObject += \u0026#34;:\u0026#34;; } } Serial.println(myStrObject); Serial.println(); } void loop() { } Når eksemplet køres på en arduino generes dette output på seriel porten.\nBemærk at baudrate er sat til 115200.\nContent: Hej, Verden! Content, decimal values of bytes: 72 101 106 44 32 10 86 101 114 100 101 110 33 0 Content, hex values of bytes: 48 65 6A 2C 20 A 56 65 72 64 65 6E 21 0 Content, hex values zero-padded bytes: 48 65 6A 2C 20 0A 56 65 72 64 65 6E 21 00 Content, append to string object: 48656a2c20a56657264656e210 Content, append to string object using byte2HexStr helper: 48656A2C200A56657264656E2100 Content, append to string object with separator: 48:65:6a:2c:20:a:56:65:72:64:65:6e:21:0 Content, append to string object using byte2HexStr helper with separator: 48:65:6A:2C:20:0A:56:65:72:64:65:6E:21:00 Materiale  string String object StringAppendOperator  "
},
{
	"uri": "https://getsrevel.github.io/tech/arduino/json-command-receiver/",
	"title": "Json Command Receiver",
	"tags": [],
	"description": "",
	"content": "Dette eksempel viser hvordan man kan bruge JSON data formatet til at udveksle information med en arduino og sende kommandoer via seriel porten.\nVed at sende en passende kommando kan man ændre på hastighed og duty cycle for en blinkende LED.\nFor nemt at kunne arbejde med JSON i Arduino koden benyttes biblioteket Arduino JSON. Derfor er det nødvendigt at installere dette på udviklingsmaskinen, inden denne sketch kan kompileres, det klares via. Arduino Library Manager, se hvordan du installerer det her.\n#include \u0026lt;ArduinoJson.h\u0026gt; // Allocate the JSON document // // Inside the brackets, 200 is the capacity of the memory pool in bytes. // Don\u0026#39;t forget to change this value to match your JSON document. // Use arduinojson.org/v6/assistant to compute the capacity. // StaticJsonDocument\u0026lt;200\u0026gt; doc;  // StaticJsonDocument\u0026lt;N\u0026gt; allocates memory on the stack, it can be // replaced by DynamicJsonDocument which allocates in the heap. // DynamicJsonDocument doc(200); int periodMs = 2000; int dutyPct = 50; void setup() { // initialize digital pin LED_BUILTIN as an output.  pinMode(LED_BUILTIN, OUTPUT); Serial.begin(115200); // wait for serial port to connect. Needed for native USB  while (!Serial) { continue; } Serial.println(\u0026#34;Ready for commands\u0026#34;); } void loop() { myLedControl(); parseCommands(); } // Example of test input json /* {\u0026#34;ts\u0026#34;: 1000, \u0026#34;duty\u0026#34;: 10 } */ void parseCommands() { // reply only when you receive data:  if (Serial.available() \u0026gt; 0) { // Deserialize the JSON document  DeserializationError error = deserializeJson(doc, Serial); Serial.println(\u0026#34;Received:\u0026#34;); serializeJson(doc, Serial); Serial.println(); // Test if parsing succeeds.  if (error) { Serial.print(F(\u0026#34;deserializeJson() failed: \u0026#34;)); Serial.println(error.c_str()); return; } if (doc[\u0026#34;ts\u0026#34;]) { unsigned int ts = doc[\u0026#34;ts\u0026#34;]; Serial.print(\u0026#34;got ts: \u0026#34;); Serial.println(ts); periodMs = ts; } if (doc[\u0026#34;duty\u0026#34;]) { int duty = doc[\u0026#34;duty\u0026#34;]; Serial.print(\u0026#34;got duty: \u0026#34;); Serial.println(duty); duty = constrain(duty, 0, 100); Serial.print(\u0026#34;constrained duty to [0, 100], using: \u0026#34;); Serial.println(duty); dutyPct = duty; } } } // toggle the builtin LED state void myLedControl() { //map(value, fromLow, fromHigh, toLow, toHigh)  int highDelayMs = map(dutyPct, 0, 100, 0, periodMs); int lowDelayMs = periodMs - highDelayMs; digitalWrite(LED_BUILTIN, HIGH); delay(highDelayMs); digitalWrite(LED_BUILTIN, LOW); delay(lowDelayMs); } NB! Serielporten er sat til at køre 115200 Baud.\nPrøv at sende nogle kommandoer vha. serial monitor, og læg mærke til hvordan blinkrate og duty cycle ændres for den inbyggede LED på Arduino.\n{\u0026#34;ts\u0026#34;: 1000, \u0026#34;duty\u0026#34;: 10 } {\u0026#34;ts\u0026#34;: 500, \u0026#34;duty\u0026#34;: 80 } Når eksemplet køres på en Arduino og de to ovenstående kommandoer sendes en ad gangen, kommer der dette output fra Arduino på seriel porten.\nReady for commands Received: {\u0026#34;ts\u0026#34;:1000,\u0026#34;duty\u0026#34;:10} got ts: 1000 got duty: 10 constrained duty to [0, 100], using: 10 Received: {\u0026#34;ts\u0026#34;:500,\u0026#34;duty\u0026#34;:80} got ts: 500 got duty: 80 constrained duty to [0, 100], using: 80 Materiale  Arduino. Arduino JSON Arduino JSON installation JSON Serial.begin() Serial.print() Serial.println() Serial.available() constrain() map() delay() pinMode() digitalWrite()  "
},
{
	"uri": "https://getsrevel.github.io/tech/arduino/task-loop-functions/",
	"title": "Task Loop using Function Pointers",
	"tags": [],
	"description": "",
	"content": "Dette eksempel illustrerer, hvordan man kan bruge function pointers til at køre forskellige opgaver med hvert sit interval, uden at de blokerer for hinanden i længere tid end det tager at eksekvere en enkelt opgave.\ntypedef struct MyTask { void (*handler)(); int intervalMs; int taskId; unsigned long lastRunMs; } MyTask; // Forward declaration of the task runner functions void task_main(); void task_A(); void task_B(); void task_C(); MyTask tasks[] = { {.handler=task_main}, {task_A,300}, {task_B,500}, {task_C,3000} }; const int arrSize = sizeof(tasks)/sizeof(MyTask); void setup() { // initialize serial communication at 115200 bits per second:  Serial.begin(115200); Serial.print(\u0026#34;Task count: \u0026#34;); Serial.println(arrSize); for(int i=0 ; i\u0026lt;arrSize; i++){ if(tasks[i].intervalMs \u0026lt;= 0){ tasks[i].intervalMs = (i+1)*100; } String msg = \u0026#34;\u0026#34;; msg = \u0026#34;task id: \u0026#34;; msg += i; msg += \u0026#34;, interval \u0026#34;; msg += tasks[i].intervalMs; Serial.println(msg); } Serial.println(\u0026#34;Setup DONE\u0026#34;); } // example of non-blocking asyncronous wait loop using function pointers void loop() { for(int i=0 ; i\u0026lt;arrSize; i++){ runInterval(\u0026amp;tasks[i]); } } void runInterval(struct MyTask *t){ unsigned long tickMs = millis(); unsigned long diffMs = tickMs - t-\u0026gt;lastRunMs; // Handle first run  if(0 == t-\u0026gt;lastRunMs){ t-\u0026gt;lastRunMs = tickMs; } bool shouldRun = (t-\u0026gt;intervalMs \u0026lt; diffMs); if(!shouldRun){ return; } // Store last run  t-\u0026gt;lastRunMs = tickMs; // Perform the process by calling the handler function  (t-\u0026gt;handler)(); } // Create some tasks to run in the example void task_main(){ static int runCount = 0; Serial.print(\u0026#34;.\u0026#34;); if(0 == runCount % 30){ Serial.println(); Serial.print(runCount); Serial.print(\u0026#34; : \u0026#34;); } runCount++; } void task_A(){ Serial.print(\u0026#34;A\u0026#34;); } void task_B(){ Serial.print(\u0026#34;B\u0026#34;); } void task_C(){ Serial.print(\u0026#34;C\u0026#34;); } Når eksemplet køres på en arduino generes dette output på seriel porten.\nBemærk at baudrate er sat til 115200.\nTask count: 4 task id: 0, interval 100 task id: 1, interval 300 task id: 2, interval 500 task id: 3, interval 3000 Setup DONE . 0 : .A..B.A...A.B..A...BA...A..B.A...A.B..A...CBA.. 30 : .A..B.A...A.B..A...BA...A..B.A...A.B..A...CBA.. 60 : .A..B.A...A.B..A...BA...A..B.A...A.B..A...CBA.. 90 : .A..B.A...A.B..A...BA...A..B.A...A.B..A..C.BA.. 120 : .A.B..A...AB...A..B.A...A.B..A..A.B..A...CBA... Materiale  How to use typedef struct tagName Designated initializers  "
},
{
	"uri": "https://getsrevel.github.io/tech/react/react-fake-weather/",
	"title": "React + Firestore Fake Weather",
	"tags": [],
	"description": "",
	"content": "Dette eksempel bygger videre på react eksemplet med firestore, og demonstrationen af hvordan man kan uploade data med node.js.\nStatisk data visning Først laves en fil med samme struktur som forventes at være i firestore databasen, når upload scriptet har kørt nogle gange. Data strukturen laves i filen src/lib/fake_weather.js, med dette indhold.\nimport firebase from \u0026#34;../lib/Firebase\u0026#34;; const Timestamp = firebase.firestore.Timestamp; // helper for generating firestore timestamps const t = timeString =\u0026gt; Timestamp.fromDate(new Date(timeString)); // Fake data - could come from a database or similar const data = [ { lastUpdate: t(\u0026#39;2020-03-13T11:30:42\u0026#39;), key: \u0026#34;dataIdOne\u0026#34;, windMeasurements: [ { time: t(\u0026#39;2020-03-13T10:20:42\u0026#39;), windSpeed: 12, windDir: 277 }, { time: t(\u0026#39;2020-03-13T11:30:42\u0026#39;), windSpeed: 7, windDir: 270 }, ] }, { lastUpdate: t(\u0026#34;2020-03-14T09:31:10\u0026#34;), key: \u0026#34;dataIdTwo\u0026#34;, windMeasurements: [ { time: t(\u0026#34;2020-03-14T09:07:34\u0026#34;), windSpeed: 17, windDir: 179 }, { time: t(\u0026#34;2020-03-14T09:31:10\u0026#34;), windSpeed: 25, windDir: 183 }, { time: t(\u0026#34;2020-03-14T11:30:42\u0026#34;), windSpeed: 12, windDir: 180 }, { time: t(\u0026#34;2020-03-14T12:37:20\u0026#34;), windSpeed: 23, windDir: 171 }, ] }, ]; export default data; Derefter laves en ny react komponent i src/components/Weather.js, som viser indholdet i browseren.\nimport React, { useEffect, useState } from \u0026#34;react\u0026#34;; import fakeWeatherData from \u0026#39;../lib/fake_weather\u0026#39;;  function Weather() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Fake Weather data (from file)\u0026lt;/h1\u0026gt; \u0026lt;MeasurementList weatherData={fakeWeatherData} /\u0026gt;  \u0026lt;/div\u0026gt; ); } const MeasurementList = props =\u0026gt; { return ( \u0026lt;div\u0026gt; { props.weatherData.map(it =\u0026gt; ( \u0026lt;MeasurementDay key={it.key} item={it} /\u0026gt; )) }  \u0026lt;/div\u0026gt; ) } const MeasurementDay = props =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Fake wind data, Updated: {props.item.lastUpdate.toDate().toLocaleString()}\u0026lt;/h2\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Time\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Wind speed\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Wind direction\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; { props.item.windMeasurements.map((it, i) =\u0026gt; ( \u0026lt;tr key={i}\u0026gt; \u0026lt;td\u0026gt;{it.time.toDate().toISOString()}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{it.windSpeed}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{it.windDir}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; )) }  \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; ); }; export default Weather; Bemærk hvordan vi først importeret datastrukturen fra filen src/lib/fake_weather.js, sender den ind i MeasurementList komponenten og itererer over indholdet af data i MeasurementList og MeasurementBody komponenterner.\nWeather komponenten indsættes i src/App.js, således:\nimport React from \u0026#39;react\u0026#39;; import \u0026#39;./App.css\u0026#39;; import Clock from \u0026#39;./components/Clock\u0026#39; import Highscore from \u0026#39;./components/Highscore\u0026#39;; import Hotdog from \u0026#39;./components/Hotdog\u0026#39;; import Weather from \u0026#39;./components/Weather\u0026#39;;  function App() { return ( \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;Clock /\u0026gt; \u0026lt;Hotdog /\u0026gt; \u0026lt;Weather /\u0026gt;  \u0026lt;Highscore /\u0026gt; \u0026lt;/div\u0026gt; ); } export default App; Firestore itegration For at hente data ud fra firestore skal der tilføjes mere kode i Weather komponenten.\nimport React, { useEffect, useState } from \u0026#34;react\u0026#34;; import fakeWeatherData from \u0026#39;../lib/fake_weather\u0026#39;; // import the firebase configuration settings import firebase from \u0026#34;../lib/Firebase\u0026#34;; // initialize firestore const firestore = firebase.firestore();  function Weather() { const handleData = snapshot =\u0026gt; { if (snapshot.empty) { console.log(\u0026#34;No matching documents\u0026#34;); return; } let weatherDataArray = []; snapshot.forEach(doc =\u0026gt; { let myData = doc.data(); myData[\u0026#34;key\u0026#34;] = doc.id; weatherDataArray.push(myData); }) setWeatherData(weatherDataArray); }; const subscribeToRealtimeUpdates = () =\u0026gt; { const query = firestore.collection(\u0026#34;weather\u0026#34;) .orderBy(\u0026#39;lastUpdate\u0026#39;, \u0026#39;desc\u0026#39;) .limit(3); query.onSnapshot(handleData); }; useEffect( () =\u0026gt; { subscribeToRealtimeUpdates(); }, // provide empty array to avoid infinite loop  [] ); const [weatherData, setWeatherData] = useState([]);  return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Fake Weather data from firebase\u0026lt;/h1\u0026gt; \u0026lt;MeasurementList weatherData={weatherData} /\u0026gt;  \u0026lt;h1\u0026gt;Fake Weather data (from file)\u0026lt;/h1\u0026gt; \u0026lt;MeasurementList weatherData={fakeWeatherData} /\u0026gt; \u0026lt;/div\u0026gt; ); } const MeasurementList = props =\u0026gt; { return ( \u0026lt;div\u0026gt; { props.weatherData.map(it =\u0026gt; ( \u0026lt;MeasurementDay key={it.key} item={it} /\u0026gt; )) } \u0026lt;/div\u0026gt; ) } const MeasurementDay = props =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Fake wind data, Updated: {props.item.lastUpdate.toDate().toLocaleString()}\u0026lt;/h2\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Time\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Wind speed\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Wind direction\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; { props.item.windMeasurements.map((it, i) =\u0026gt; ( \u0026lt;tr key={i}\u0026gt; \u0026lt;td\u0026gt;{it.time.toDate().toISOString()}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{it.windSpeed}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{it.windDir}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; )) } \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; ); }; export default Weather; Først importeres firebase konfigurationen, og firebase initialiseres.\nDerefter bruges oprettes forbindelse til firebase og der abbonneres på databaseopdateringer.\nEndelig tilføjes en enstra MeasurementList komponent, så indholdet vises på skærmen.\nHvis appen startes, vi der nu automatisk opdateres med nye målinger i tabellerne, når de tilføjes til firestore databasen med upload scriptet.\nApp Demo Denne demo viser resultatet af anstrengelserne og skulle gerne minde om det du kan se på figuren herunder.\nNår du åbner siden burde du se noget i stil med det der er vist på figuren herunder.\nBemærk: For at kunne tilføje data til databasen, kræver det at du selv laver det på din egen maskine.\n  Screenshot af den kørende react app.   Materiale  Firestore upload eksempel firebase.firestore.Timestamp firebase.firestore.Query.orderBy() javascript Date object - MDN Documentation  "
},
{
	"uri": "https://getsrevel.github.io/tech/node/serial-json/",
	"title": "Serial Json",
	"tags": [],
	"description": "",
	"content": "Dette eksempel viser hvordan man kan læse fra en serielport vha. node.js. For at kunne køre eksemplet på en meningsfuld måde, kræver det at der er tilsluttet en enhed til serielporten på computeren. Ydermere skal denne enhed sende beskeder afsted i json format, og porten skal være sat op med passende instillinger.\nJeg har tidligere lavet et eksempel, der kan sende json beskeder som output på serielporten på en Arduino, og det er disse data der forventes at være input til dette eksempel.\nFørst skal der laves et projekt så node kan finde ud af at køre programmet, og har en package.json fil til at holde styr på projektet og afhængigheder af biblioteksmoduler.\nStart med at lave en mappe, som kan indeholde dit projekt. Kald den f.eks. serial-json. I denne mappe skal du køre følgende kommando, for at oprette projekt filen package.json.\nnpm init -y Dernæst har du mulighed for at installere disse afhængigheder.\nnpm install serialport --save { \u0026#34;name\u0026#34;: \u0026#34;serial-json-read\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;serialport\u0026#34;: \u0026#34;^8.0.7\u0026#34;  } } Bemærk de to pakker der er listet under afhængigheder.\nDerefter skal du oprette filen serial-json-read.js med følgende indhold.\nconst SerialPort = require(\u0026#34;serialport\u0026#34;); const Readline = require(\u0026#34;@serialport/parser-readline\u0026#34;); // Change the serial port to fit your serup // on linux the device could look like this: \u0026#34;/dev/tty-usbserial1\u0026#34; const serialPortName = \u0026#34;COM6\u0026#34;; const portOptions = { baudRate: 115200 }; const port = new SerialPort(serialPortName, portOptions); // Open errors will be emitted as an error event port.on(\u0026#39;error\u0026#39;, function(err) { console.log(\u0026#39;Error: \u0026#39;, err.message) }); const parser = port.pipe(new Readline({ delimiter: \u0026#34;\\r\\n\u0026#34; })); parser.on(\u0026#34;data\u0026#34;, doSomethingWithData); // Callback function for processing the received data function doSomethingWithData(data) { console.log(\u0026#34;--- Line received on serial port ------------\u0026#34;); console.log(\u0026#39;Raw data: \u0026#39;, data); // parse json data  const obj = JSON.parse(data); // print object  console.log(\u0026#34;Parsed object:\u0026#34;); console.log(obj); console.log(\u0026#34;Contents of object property:\u0026#34;); console.log(obj.tagId); console.log(\u0026#34;--- data processing done -------------------\u0026#34;); }  NB! Du skal ændre navnet på serielporten, så det passer med den port din Arduino er tilsluttet til.\nNu kan du køre eksemplet med denne kommando:\nnode serial-json-read.js For at få noget meningsfuldt ud af at køre eksemplet skal der, som nævnt ovenfor, være en Arduino tilkoblet til en serielporten på computeren, og denne Arduino skal sende beskeder i det forventede json format. Når dette ellers er opfyldt vil man se noget lignende dette output i terminalen.\n$ node .\\serial-json-read.js --- Line received on serial port ------------ Raw data: {\u0026#34;waitTime\u0026#34;:2307,\u0026#34;tagIdIndex\u0026#34;:4,\u0026#34;tagId\u0026#34;:\u0026#34;E2 00 00 1B 63 15 02 48 15 90 DB 2C\u0026#34;} Parsed object: { waitTime: 2307, tagIdIndex: 4, tagId: \u0026#39;E2 00 00 1B 63 15 02 48 15 90 DB 2C\u0026#39; } Contents of object property: E2 00 00 1B 63 15 02 48 15 90 DB 2C --- data processing done ------------------- --- Line received on serial port ------------ Raw data: {\u0026#34;waitTime\u0026#34;:3073,\u0026#34;tagIdIndex\u0026#34;:3,\u0026#34;tagId\u0026#34;:\u0026#34;E2 00 00 1B 63 15 02 48 17 20 DA F4\u0026#34;} Parsed object: { waitTime: 3073, tagIdIndex: 3, tagId: \u0026#39;E2 00 00 1B 63 15 02 48 17 20 DA F4\u0026#39; } Contents of object property: E2 00 00 1B 63 15 02 48 17 20 DA F4 --- data processing done ------------------- --- Line received on serial port ------------ Raw data: {\u0026#34;waitTime\u0026#34;:6930,\u0026#34;tagIdIndex\u0026#34;:2,\u0026#34;tagId\u0026#34;:\u0026#34;E2 00 00 1B 63 15 02 48 17 00 DA F8\u0026#34;} Parsed object: { waitTime: 6930, tagIdIndex: 2, tagId: \u0026#39;E2 00 00 1B 63 15 02 48 17 00 DA F8\u0026#39; } Contents of object property: E2 00 00 1B 63 15 02 48 17 00 DA F8 --- data processing done ------------------- Materiale  JSON Beacon eksemplet til Arduino Node Serialport Node Serialport Documentation JSON.parse()  "
},
{
	"uri": "https://getsrevel.github.io/tech/arduino/json-beacon/",
	"title": "Json Beacon",
	"tags": [],
	"description": "",
	"content": "Dette eksempel illustrerer hvordan man kan generere json output på seriel porten, og er tænkt som en en stub der kan bruges til at arbejde med seriel input på en en anden computer, f.eks. vha. node.js.\n#include \u0026lt;ArduinoJson.h\u0026gt; const int WAIT_MS_MIN = 500; const int WAIT_MS_MAX = 8000; const unsigned char TAG_COUNT = 5; char* tagIds[TAG_COUNT] = { \u0026#34;4B 61 73 70 65 72 36 37 38 39 3A 3B\u0026#34;, \u0026#34;E2 00 00 1B 63 15 02 48 16 00 DB 24\u0026#34;, \u0026#34;E2 00 00 1B 63 15 02 48 17 00 DA F8\u0026#34;, \u0026#34;E2 00 00 1B 63 15 02 48 17 20 DA F4\u0026#34;, \u0026#34;E2 00 00 1B 63 15 02 48 15 90 DB 2C\u0026#34;, }; int pinOne = 2; int pinTwo = 3; void setup() { Serial.begin(115200); pinMode(pinOne, INPUT_PULLUP); pinMode(pinTwo, INPUT_PULLUP); } void loop() { int waitTime = random(WAIT_MS_MIN, WAIT_MS_MAX); int tagIdIndex = random(0, TAG_COUNT); bool isRandom = true; if(!digitalRead(pinOne)){ tagIdIndex = 0; isRandom = false; waitTime = 300; } if(!digitalRead(pinTwo)){ tagIdIndex = 1; isRandom = false; waitTime = 150; } DynamicJsonDocument doc(1024); // Insert some debugging information  doc[\u0026#34;isRandom\u0026#34;] = isRandom; doc[\u0026#34;waitTime\u0026#34;] = waitTime; doc[\u0026#34;tagIdIndex\u0026#34;] = tagIdIndex; // Insert the selected tag ID  doc[\u0026#34;tagId\u0026#34;] = tagIds[tagIdIndex]; serializeJson(doc, Serial); Serial.println(); delay(waitTime); } Der vælges en tilfældig værdi i tagIds arrayet, som så serialiseres som json sammen med oplysning om index og delay tiden, og udskrives på serielporten med tilfældige tidsintervaller.\nDet er også mulighed for at vælge 2 bestemte tags ved at trække input pin 2 eller 3 lav, ved fysisk at forbinde til GND.\nNB! Serielporten er sat til at køre 115200 Baud.\nFor nemt at kunne arbejde med JSON i Arduino koden benyttes biblioteket Arduino JSON. Derfor er det nødvendigt at installere dette på udviklingsmaskinen, inden denne sketch kan kompileres, det klares via. Arduino Library Manager, se hvordan du installerer det her.\nEksempel på output Output på serielporten kommer til at se ca. sådan ud. Bemærk at det er kopieret fra Serial Monitor i Arduino IDE, og timestamps er slået til, derfor er der et tidsstempel på alle linier i output. Tidstempler, delay intervaller og rækkefølgen af tagId\u0026rsquo;er vil være forskellig for hver kørsel, da de bliver genereret tilfældigt.\n21:00:56.034 -\u0026gt; {\u0026#34;waitTime\u0026#34;:2492,\u0026#34;tagIdIndex\u0026#34;:2,\u0026#34;tagId\u0026#34;B 63 15 02 48 17 00 DA F8\u0026#34;} 21:00:56.034 -\u0026gt; {\u0026#34;waitTime\u0026#34;:2307,\u0026#34;tagIdIndex\u0026#34;:4,\u0026#34;tagId\u0026#34;:\u0026#34;E2 00 00 1B 63 15 02 48 15 90 DB 2C\u0026#34;} 21:00:58.350 -\u0026gt; {\u0026#34;waitTime\u0026#34;:3073,\u0026#34;tagIdIndex\u0026#34;:3,\u0026#34;tagId\u0026#34;:\u0026#34;E2 00 00 1B 63 15 02 48 17 20 DA F4\u0026#34;} 21:01:01.410 -\u0026gt; {\u0026#34;waitTime\u0026#34;:6930,\u0026#34;tagIdIndex\u0026#34;:2,\u0026#34;tagId\u0026#34;:\u0026#34;E2 00 00 1B 63 15 02 48 17 00 DA F8\u0026#34;} 21:01:08.346 -\u0026gt; {\u0026#34;waitTime\u0026#34;:3044,\u0026#34;tagIdIndex\u0026#34;:3,\u0026#34;tagId\u0026#34;:\u0026#34;E2 00 00 1B 63 15 02 48 17 20 DA F4\u0026#34;} 21:01:11.414 -\u0026gt; {\u0026#34;waitTime\u0026#34;:5923,\u0026#34;tagIdIndex\u0026#34;:4,\u0026#34;tagId\u0026#34;:\u0026#34;E2 00 00 1B 63 15 02 48 15 90 DB 2C\u0026#34;} 21:01:17.328 -\u0026gt; {\u0026#34;waitTime\u0026#34;:4940,\u0026#34;tagIdIndex\u0026#34;:0,\u0026#34;tagId\u0026#34;:\u0026#34;4B 61 73 70 65 72 36 37 38 39 3A 3B\u0026#34;} 21:01:22.256 -\u0026gt; {\u0026#34;waitTime\u0026#34;:2492,\u0026#34;tagIdIndex\u0026#34;:2,\u0026#34;tagId\u0026#34;:\u0026#34;E2 00 00 1B 63 15 02 48 17 00 DA F8\u0026#34;} 21:01:24.769 -\u0026gt; {\u0026#34;waitTime\u0026#34;:5987,\u0026#34;tagIdIndex\u0026#34;:3,\u0026#34;tagId\u0026#34;:\u0026#34;E2 00 00 1B 63 15 02 48 17 20 DA F4\u0026#34;} Materiale  Arduino. Arduino JSON Arduino JSON installation Serial.begin() random() delay() pinMode() digitalRead()  "
},
{
	"uri": "https://getsrevel.github.io/tech/arduino/",
	"title": "Arduino",
	"tags": [],
	"description": "",
	"content": "Arduino Eksempler med Arduino.\n"
},
{
	"uri": "https://getsrevel.github.io/tech/c-sharp/c-sharp-intro/",
	"title": "C# Intro",
	"tags": [],
	"description": "",
	"content": "Setup For at kunne arbejde med C# kildekoden har vi brug for en god editor. Envidere får er der brug for en kompiler, så vi kan oversætte kildeteksten til et program der kan eksekveres på maskinen.\nCode editor Der er flere muligheder at vælge mellem når man skal arbejde med C# kode. For ikke at bruge en masse tid på at lære et nyt miljø at kende, vælger vi at bruge Visual Studio Code, da den kan bruges både på Windows og Mac, og det er den samme editor vi har brugt til at arbjede med javascript.\nEfter du har installeret Visual Studio Code vil det være en fordel at installere en udvidelse, der gør det nemmere at arbejde med C# filer, kopilering, og debugging af disse.\nFor at installere udvidelsen vælges plugin i menuen, og søg efter C#, på listen skulle du gerne kunne finde dette C# plugin fra microsoft.\nCompiler C# adskiller sig fra javascript bl.a. ved, at det er nødvendigt at oversætte kildeteksten til et eksekverbart program, inden det kan afvikles på computeren. Derfor har vi brug for en kompiler.\nDerfor skal vi hente og installere .NET Core.\nEfter installationen er færdig kan du åbne en terminal f.eks. Powershell og verificere din version af .NET Core med kommandoen dotnet --version. På min maskine giver den dette output.\n$ dotnet --version 3.1.200 Hvilket vil sige at jeg har version 3.1.200 installeret.\nOpret projekt Den nemmeste måde at starte et nyt .NET Core projekt er vha. terminalen. Start med at åbne en terminal i den mappe du ønsker at arbejde i.\nFor at oprette et nyt projekt skal du åbne en terminal og køre kommandoen.\ndotnet new console -o my-console-app Dette laver en ny console app med navnet my-console-app, og opretter det en undermappe med samme navn.\nAfvikling fra kommando linjen For at sikre at det virker efter hensigten, starter vi med at oversætte og køre programmet fra kommando linjen.\nSkift til det netop oprettede projekt med kommandoen:\ncd my-console-app Du står nu i mappen med projektet, og kan nu oversætte (compile) og køre (run) det med kommandoen dotnet run. På min maskine giver det dette output.\nmy-console-app $ dotnet run Hello World! Hvis du kan få et lignede resultat er det lykkedes at kompilere og oversætte programmet.\nArbejd med C# i VS code Nu er det vist tid til at rette lidt i koden, åben derfor mappen med projektet i VS code.\nÅben filen Program.cs i projektet. Indholdet burde se således ud:\nusing System; namespace hmm_demo { class Program { static void Main(string[] args) { Console.WriteLine(\u0026#34;Hello World!\u0026#34;);  } } }  Prøv nu at rette den fremhævede linje, så den skriver Hej Programmering! i stedet for Hello World!. Husk at gemme filen.\nC# extension For at gøre det nemmere at arbejde med C# i VS Code skal vi have installeret en program udvidelse. Søg efter c# i extensions i VS code og tryk på install.\n  Screenshot af VS code hvor der er søgt efter C# udvidelsen.   Kompilering / Debug Med den nye extension er det muligt at oversætte, køre og fejlsøge i C# programmer vha. knapper i VS Code.\nFor at køre programmet skal du vælge run -\u0026gt; debug i menuen, eller trykke på f5.\nMåske kommer der en boks frem der beder dig vælge det udviklingsmiljø du vil bruge. Her skal du vælge .NET Core. Dette genererer instillinger i mappen .vscode, som bruges af C# udvidelsen når koden skal oversættes og køres.\nNår programmet kører får jeg på min maskine dette output:\n------------------------------------------------------------------- You may only use the Microsoft .NET Core Debugger (vsdbg) with Visual Studio Code, Visual Studio or Visual Studio for Mac software to help you develop and test your applications. ------------------------------------------------------------------- Loaded \u0026#39;C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\3.1.2\\System.Private.CoreLib.dll\u0026#39;. Skipped loading symbols. Module is optimized and the debugger option \u0026#39;Just My Code\u0026#39; is enabled. Loaded \u0026#39;C:\\code\\c-sharp\\hmm\\my-console-app\\bin\\Debug\\netcoreapp3.1\\my-console-app.dll\u0026#39;. Symbols loaded. Loaded \u0026#39;C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\3.1.2\\System.Runtime.dll\u0026#39;. Skipped loading symbols. Module is optimized and the debugger option \u0026#39;Just My Code\u0026#39; is enabled. Loaded \u0026#39;C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\3.1.2\\System.Console.dll\u0026#39;. Skipped loading symbols. Module is optimized and the debugger option \u0026#39;Just My Code\u0026#39; is enabled. Loaded \u0026#39;C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\3.1.2\\System.Threading.dll\u0026#39;. Skipped loading symbols. Module is optimized and the debugger option \u0026#39;Just My Code\u0026#39; is enabled. Loaded \u0026#39;C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\3.1.2\\System.Runtime.Extensions.dll\u0026#39;. Skipped loading symbols. Module is optimized and the debugger option \u0026#39;Just My Code\u0026#39; is enabled. Loaded \u0026#39;C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\3.1.2\\System.Text.Encoding.Extensions.dll\u0026#39;. Skipped loading symbols. Module is optimized and the debugger option \u0026#39;Just My Code\u0026#39; is enabled. Hej Programmering! The program \u0026#39;[243920] my-console-app.dll\u0026#39; has exited with code 0 (0x0). Det meste er beskeder fra compiler og runtime miljøet, men der kommer også det forventede output fra koden jeg selv har skrevet, på den fremhævede linje.\nHåndtering af stdin / stdout Afhængig af typen af det program du laver, kan det være hensigtsmæssigt at ændre måden det eksekveres i fra VS Code på.\nDer er 3 muligheder, som vælges ved at ændre i instillingerne i .vscode/launch.json. Prøv at ændre i parameteren console til en af disse værdier, og vælg den der passer bedst til dit brugsscenarie.\n \u0026quot;console\u0026quot;: \u0026quot;internalConsole\u0026quot; \u0026quot;console\u0026quot;: \u0026quot;integratedTerminal\u0026quot; \u0026quot;console\u0026quot;: \u0026quot;externalTerminal\u0026quot;  Hvis jeg vælger indstillingen externalTerminal, vises output fra mit program fra tidligere på denne måde på min windows 10 maskine.\n  Screenshot af terminal output.   Gitignore Når .NET Core projektet bygges, bliver der genereret en række objektfiler og binære biblioteker osv. af kompileren. Disse er nødvendige for at programmet kan afvikles, men hvis de andre der arbejder selv har en kompiler installeret, kan disse nemt gendannes. Derfor kan det være nyttigt at undlade at tilføje genererede filer til versionsstyringssystemet.\nHvis man f.eks. benytter git kan man lave en liste af filer og mapper der skal ignoreres af git. Dette kan klares ved at oprette en fil med navnet .gitignore, i roden af projektet.\n# files and folders to be ignored by git # ignore build artifacts bin/ obj/ Med dette indhold bliver indholdet af mapperne bin og obj ignoreret af git.\nMan kan nemt justere i hvilke filer og mapper der skal ignoreres ved at ændre i .gitignore filen. Se også dokumentationen af gitignore.\nMateriale  Visual Studio Code .NET Core Get started with VS Code using C# and .NET Core on Windows Git ignore Ignoring Files chapter of the Pro Git book.  "
},
{
	"uri": "https://getsrevel.github.io/tech/c-sharp/",
	"title": "C#",
	"tags": [],
	"description": "",
	"content": "C# Noter og eksempler med C#.\n"
},
{
	"uri": "https://getsrevel.github.io/tech/react/react-intro/my-app-npm/",
	"title": "My App Npm",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://getsrevel.github.io/tech/react/",
	"title": "React",
	"tags": [],
	"description": "",
	"content": "React Eksempler med React.\n"
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/ball-bounce/",
	"title": "Ball Bounce",
	"tags": [],
	"description": "",
	"content": "I dette eksempel demonstreres hvordan man kan benytte forgreninger og boolske udtryk til at ændre bevægelsesretningen på en cirkel, så det minder om en bold, der hopper når den rammer siderne.\n// Lav en variabel og kald den x // giv x værdien 200 let x = 200; // opret flere variabler let xSpeed = 5; let y = 200; let ySpeed = 3; let c; let cFill; // Definer en funktion der kan ændre fyld og stregfarve function changeColor() { c = color(random(255), random(255), random(255)); cFill = color(random(255), random(255), random(255)); strokeWeight(10); stroke(c); fill(cFill); } function setup() { createCanvas(windowWidth, windowHeight); const speedScale = 128 xSpeed = windowWidth / speedScale ySpeed = windowHeight / speedScale changeColor(); } function draw() { background(c); rect(0, 0, width, height); // opret variablen d og tildel værdien 120  let d = 120; // tegn en cirkel med centrum i (x, y) og diameter d  circle(x, y, d); // hvis x er større end bredden af lærredet  // så sæt xSpeed til -xSpeed  if (x \u0026gt; width - d / 2) { changeColor(); xSpeed = -xSpeed; } if (x \u0026lt; 0 + d / 2) { changeColor(); xSpeed = -xSpeed; } if (y \u0026gt; height - d / 2 || y \u0026lt; 0 + d / 2) { changeColor(); ySpeed = -ySpeed; } x = x + xSpeed; y = y + ySpeed; }  Demo Prøv det kørende eksempel\nMateriale  setup() draw() background() fill() stroke() strokeWeight() color() random() circle() function if-else Conditional operators: if, \u0026lsquo;?' logical operators  "
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/ball-bounce/demo/",
	"title": "Ball Bounce demo",
	"tags": [],
	"description": "",
	"content": "\r"
},
{
	"uri": "https://getsrevel.github.io/tech/chartjs/",
	"title": "Chart.js",
	"tags": [],
	"description": "",
	"content": "Hvis man gerne vil have tegnet en graf over noget data der er opsamlet, f.eks. fra en sensor, kan det være nyttigt at benytte et bibliotek af funktioner, som kan klare tegnearbejdet, så man ikke selv skal programmere det hele fra bunden.\nChart.js er et eksempel på sådan et bibliotek, der kan bruges til at få en graf frem på en hjemmeside.\nEksempel I dette eksempel vises hvordan man kan indsætte en graf med to datasæt.\n\u0026lt;canvas id=\u0026#34;myChart\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/chart.js@2.8.0\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;chart-demo.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Først skal der laves et canvas element, som kan indeholde grafen. Dernæst skal chart.js bibilioteket loades, hvilket kan gøres på flere måder som beskrevet i denne guide.\nDerefter skal grafen laves hvilket gøres ved hjælp af javascript.\nI dette eksempel er opsætning af grafen lavet i filen chart-demo.js, som så er hentet ind i html siden som vist ovenfor.\nHerunder ses indholdet af filen chart-demo.js\nvar ctx = document.getElementById(\u0026#34;myChart\u0026#34;).getContext(\u0026#34;2d\u0026#34;); const xValues = [ \u0026#34;January\u0026#34;, \u0026#34;February\u0026#34;, \u0026#34;March\u0026#34;, \u0026#34;April\u0026#34;, \u0026#34;May\u0026#34;, \u0026#34;June\u0026#34;, \u0026#34;July\u0026#34; ]; // generate some random values to plot const yValues = []; for (let i = 0; i \u0026lt; xValues.length; i++) { yValues.push(Math.random() * 50); } var chart = new Chart(ctx, { // The type of chart we want to create  type: \u0026#34;line\u0026#34;, // The data for our dataset  data: { labels: xValues, datasets: [ { label: \u0026#34;Random dataset\u0026#34;, borderColor: \u0026#34;rgb(255, 99, 132)\u0026#34;, data: yValues, fill: false }, { label: \u0026#34;Fixed dataset\u0026#34;, borderColor: \u0026#34;rgb(132, 99, 255)\u0026#34;, data: [20, 5, 5, 2, 24, 13, 25], fill: false } ] }, });  Bemærk at den ene serie består af faste værdier, og den anden er en række tilfældigt generede tal.\nDemo Her ses resultatet af anstrengelserne. Hvis du geninlæser siden gennereres der ny tilfældige værdier for den ene serie.\n\n  Materiale  Chart.js Getting Started - Chart.js Line chart - Chart.js  "
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/random-color/",
	"title": "Random Color",
	"tags": [],
	"description": "",
	"content": "Dette eksempel tegner cirkler med tilfældigt valgt fyldfarve. Når venstre museknap er trykket ned skiftes til fyldfarver i tilfældige gråtoner.\nI eksemplet viser hvordan man kan bruge en betingelse (museknappen er trykket ned), og en en forgrening (if-sætning) til at få programmet til at ændre opførsel.\nfunction setup() { createCanvas(windowWidth, windowHeight); } function draw() { if (mouseIsPressed) { fill(random(255)); } else { fill(random(255), random(255),random(255)); } circle(mouseX, mouseY, 80); }  Demo Prøv det kørende eksempel\nMateriale  setup() createCanvas() windowWidth windowHeight draw() mouseIsPressed random() fill() ellipse()  "
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/random-color/demo/",
	"title": "Random Color demo",
	"tags": [],
	"description": "",
	"content": "\r"
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/times-table/",
	"title": "Times Table",
	"tags": [],
	"description": "",
	"content": "Dette eksempel er baseret på ideer fra denne video.\nlet r; let factor = 0; let total = 0; function setup() { createCanvas(windowWidth, windowHeight); const maxSize = min(width, height); r = maxSize / 2 - 16; } function getVector(index, total) { const angle = map(index % total, 0, total, 0, TWO_PI); const v = p5.Vector.fromAngle(angle + PI); v.mult(r); return v; } let xoff = 0; function updateColor() { xoff = xoff + 0.01; let r = noise(xoff) * 255; let g = noise(xoff + 200) * 255; let b = noise(xoff + 400) * 255; stroke(r, g, b); } function draw() { background(0); let autoRun = true; if (autoRun) { total = 100; factor += 0.01; } else { total = map(mouseY, 0, height, 0, 200); factor = map(mouseX, 0, width, 0, 20); } translate(width / 2, height / 2); textSize(32); text(\u0026#34;total \u0026#34; + nf(total, 0, 2), -width / 2 + 10, height / 2 - 70); text(\u0026#34;factor \u0026#34; + nf(factor, 0, 3), -width / 2 + 10, height / 2 - 30); noFill(); strokeWeight(2); updateColor(); ellipse(0, 0, r * 2); strokeWeight(1); for (let i = 0; i \u0026lt; total; i++) { const a = getVector(i, total); const b = getVector(i * factor, total); line(a.x, a.y, b.x, b.y); } }  Demo Prøv det kørende eksempel\nMateriale  translate() rotate() noFill() text() textSize() nfc() nf() mouseX mouseY map() noise() mult() fromAngle()  Times Tables, Mandelbrot and the Heart of Mathematics   "
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/times-table/demo/",
	"title": "Times Table demo",
	"tags": [],
	"description": "",
	"content": "\r"
},
{
	"uri": "https://getsrevel.github.io/tech/firebase/firestore-client/",
	"title": "Firestore Client",
	"tags": [],
	"description": "",
	"content": "I dette eksempel forbindes der til Firestore fra en browser ved hjælp af javascript.\nVideoen viser en gennemgang af de fundamentale principper i Cloud Firestore.\nGetting Started With Cloud Firestore on the Web - Firecasts   Demo Hvis du følger videoen burde du ende op med et kørendene eksempel, der ser nogenlunde sådan ud.\n\rHot dog status\rSave\r\r\r\r\r\r\r\rKoden du ender op kommer til at ligne dette.\r\r\r// Your web app\u0026#39;s Firebase configuration var firebaseConfig = { apiKey: \u0026#34;AIzaSyAof7A2wpEylAFHsKWvqeJU8VkYN7G1VMI\u0026#34;, authDomain: \u0026#34;coldhawaiiweather.firebaseapp.com\u0026#34;, databaseURL: \u0026#34;https://coldhawaiiweather.firebaseio.com\u0026#34;, projectId: \u0026#34;coldhawaiiweather\u0026#34;, storageBucket: \u0026#34;coldhawaiiweather.appspot.com\u0026#34;, messagingSenderId: \u0026#34;645018619046\u0026#34;, appId: \u0026#34;1:645018619046:web:2ae11bff4009e1e965f867\u0026#34;, measurementId: \u0026#34;G-61E1DX0Z3Q\u0026#34; }; // Initialize Firebase firebase.initializeApp(firebaseConfig); firebase.analytics(); const firestore = firebase.firestore(); const docRef = firestore.doc(\u0026#34;samples/sandwichData\u0026#34;); const outputHeader = document.querySelector(\u0026#34;#hotdogOutPut\u0026#34;); const inputTextField = document.querySelector(\u0026#34;#latestHotdogStatus\u0026#34;); const saveButton = document.querySelector(\u0026#34;#saveButton\u0026#34;); saveButton.addEventListener(\u0026#34;click\u0026#34;, e =\u0026gt; { const textToSave = inputTextField.value; console.log(\u0026#34;save clicked \u0026#34; + textToSave); docRef .set({ hotdogStatus: textToSave }) .then(() =\u0026gt; { console.log(\u0026#34;saved!\u0026#34;); }) .catch(error =\u0026gt; { console.log(\u0026#34;got an error: \u0026#34;, error); }); }); thingToDoWhithDocumentData = doc =\u0026gt; { if (doc \u0026amp;\u0026amp; doc.exists) { const myData = doc.data(); console.log(\u0026#34;Got snapshot doc: \u0026#34;, doc); outputHeader.innerText = \u0026#34;Hot dog Status: \u0026#34; + myData.hotdogStatus; } }; getRealtimeUpdates = () =\u0026gt; { docRef.onSnapshot( { includeMetadataChanges: true }, thingToDoWhithDocumentData ); }; getRealtimeUpdates(); \r\r Du kan også se demonstrationen på en separat side.\nMateriale  Cloud Firestore dokumentation. Getting Started With Cloud Firestore on the Web - Firecasts  Firecasts firebase intro   "
},
{
	"uri": "https://getsrevel.github.io/tech/firebase/firestore-client/demo/",
	"title": "Firestore web client demo",
	"tags": [],
	"description": "",
	"content": "Hot dog status\rSave\r\r\r\r\r"
},
{
	"uri": "https://getsrevel.github.io/tech/firebase/",
	"title": "Firebase",
	"tags": [],
	"description": "",
	"content": "Firebase Eksempler med Firebase.\n"
},
{
	"uri": "https://getsrevel.github.io/tech/firebase/firestore-upload/",
	"title": "Firestore Node Upload",
	"tags": [],
	"description": "",
	"content": "I dette eksempel forbindes der til Firestore via Node.js. Dvs. koden der skal afvikles på serveren kan skrives i javascript, og vi kan derfor bruge viden om syntaks fra arbejdet med p5js.\nOpsætning af Node projekt For at kunne arbejde med firestore fra node.js, skal der laves en pakke / projekt at arbejde i. Dette kan gøres ved at oprette en mappe til projektet og køre denne kommando for at generere en package.json fil.\nnpm init Man bliver så bedt om at svare på en række spørgsmål, og ender med en struktur der ser nogenlunde sådan ud:\n{ \u0026#34;name\u0026#34;: \u0026#34;firestore-demo\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; } For at kunne benytte Firebase SDK skal vi have dette installeret, hvilket kan klares med kommandoen.\nnpm install firebase-admin --save Vi får også brug for at arbejde med formatering af dato og tidspunkter, så derfor vælger vi at bruge biblioteket Moment.js for at lette arbejdet med disse. Moment.js kan installeres med denne kommando.\nnpm install moment --save Nu burde Firebase SDK og Moment.js være installeret og tilføjet som afhængigheder og package.json ser nu nogenlunde således ud.\n{ \u0026#34;name\u0026#34;: \u0026#34;firestore-demo\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;@google-cloud/firestore\u0026#34;: \u0026#34;^3.4.1\u0026#34;, \u0026#34;firebase-admin\u0026#34;: \u0026#34;^8.9.1\u0026#34;, \u0026#34;moment\u0026#34;: \u0026#34;^2.24.0\u0026#34;  } } Som det ses er der nu tilføjet afhængigheder til Firebase og moment pakkerne. De nærmere detaljer kan findes i denne guide.\nDette er et eksempel på en hvordan man kan lave et lille program, der indsætter en stump data i firestore.\nFirestore upload eksempel // Add the Firebase Admin SDK to Your Server const firebase = require(\u0026#34;firebase-admin\u0026#34;); // Get the helper classes FieldValue = firebase.firestore.FieldValue; Timestamp = firebase.firestore.Timestamp; const moment = require(\u0026#34;moment\u0026#34;); // Import crecential for the service account const serviceAccount = require(\u0026#34;./serviceAccountKey.json\u0026#34;); // Initialize the default app const app = firebase.initializeApp({ credential: firebase.credential.cert(serviceAccount), databaseURL: \u0026#34;https://coldhawaiiweather.firebaseio.com\u0026#34; }); const db = firebase.firestore(); // Helper - Generates random integer values function getRandomInt(max, min) { const diff = max - min; return Math.floor(Math.random() * Math.floor(diff) + min); } async function storeData() { // Set time of update  const updateTime = Timestamp.now(); // Generate some fake weather data  const windData = { time: updateTime, windSpeed: getRandomInt(15, 3), windDir: getRandomInt(0, 359), }; // Document ID should be todays date  const today = moment(updateTime.toDate()); const docPath = `weather/${today.format(\u0026#34;YYYY-MM-DD\u0026#34;)}`; const docRef = db.doc(docPath); const data = { lastUpdate: updateTime, windMeasurements: FieldValue.arrayUnion(windData), }; const options = { merge: true } await docRef.set(data, options); } storeData();  Der skal bruges en såkaldt Service Account, for at kunne forbindes fra node til firebase. Guiden forklarer, hvad du skal gøre for at oprette en service account til dit firebase projekt. Disse oplysninger er private, så vær opmærksom på ikke at holde dem for dig selv. For eksemplet virker skal oplysningerne om din Service Account oprettes i file serviceAccountKey.json.\nHåndtering af private nøgler For at undgå at sprede disse oplysninger er det en god ide at tilføje denne fil til listen over filer der skal ignoreres af git. Dvs. at din .gitignore fil kunne se således ud.\n# ignore packages downloaded from npm node_modules/ # avoid storing firebase login credentials serviceAccountKey.json Hvis javascript eksemplet gemmes i en fil med navnet firebase-upload-demo.js, kan programmet køres med kommandoen\nnode firebase-upload-demo.js Materiale  Clouc Firestore dokumentation. Add the Firebase Admin SDK to Your Server guide til at komme i gang med firebase på en server. Cloud Firestore quickstart guide til at komme i gang med firestore. gitignore dokumentation. Moment.js firestore.TimeStamp firestore.FieldValue firestore.SetOptions  "
},
{
	"uri": "https://getsrevel.github.io/tech/regex/",
	"title": "Regex",
	"tags": [],
	"description": "",
	"content": "Her er en stump tekst som kunne være et eksempel på noget input, hvor vi gerne vil finde alle telefonnumre.\nHere is my number 123-456-7893. Should you not be able to reach me there you can contact me at work (223)456-4305, or call my wife at 234.343.4521. Opgaven med at finde telefonnumre kan i dette tilfælde løses ved at at bruge denne regular expression eller regex.\n[\\(]\\*\\d{3}[)-\\.]\\d{3}[\\.-]\\d{4} Her er eksempel på hvordan det kan benyttes i javascript.\nconst re = /\\(?\\d{3}[)-\\.]\\d{3}[\\.-]\\d{4}/g; const txt = `Here is my number 123-456-7893. Should you not be able to reach me there you can contact me at work (223)456-4305, or call my wife at 234.343.4521.`; const phoneNumbers = txt.match(re); console.log(phoneNumbers);  Materiale  Regular expressions chapter - The Modern JavaScript Tutorial MDN\u0026rsquo;s Regular Expressions Reference MDN\u0026rsquo;s String.replace() Coding train video series on Regular expressions  2.1: Introduction to Regular Expressions - Programming with Text   2.2: Regular Expressions: Meta-characters - Programming with Text   2.3: Regular Expressions: Character Classes - Programming with Text   2.4: Regular Expressions: Capturing Groups - Programming with Text   2.5: Regular Expressions: Back References - Programming with Text   "
},
{
	"uri": "https://getsrevel.github.io/tech/node/socket-io-demo/",
	"title": "Socket IO",
	"tags": [],
	"description": "",
	"content": "Dette eksempel viser hvordan man kan lave en webserver, der kan køre et eksempel hvor clienter på forskellige maskiner kan kommunikere via en web-socket.\nDet er baseret på en videotutorial af Daniel Shiffman fra The Coding Train.\nSocket io video tutorial 12.1: Introduction to Node - WebSockets and p5.js Tutorial  Introduktion til web sockets. Installation af node \u0026ldquo;hello world\u0026rdquo; demo    12.2: Using Express with Node - WebSockets and p5.js Tutorial  Hosting af statiske klient filer på node server med Express.    12.3: Connecting Client to Server with Socket.io - WebSockets and p5.js Tutorial  Tilføjelse af Socket.io til klient og server Vis klientens ID når de forbinder sig    12.4: Shared Drawing Canvas - WebSockets and p5.js Tutorial  Afsendelse af hændelser (events) fra klienter Broadcast af events fra server Tegning på skærmen i de modtagende klienter    Materiale  Node npm - Node Package Manager Socket.io Socket.io - Get started Express p5.js p5js getting started p5js reference  Kode eksempel Det kan være nødvendigt med et par små justeringer ift. koden i videoerne.\nHer følger indholdet af mine filer\nIndholdet i package.json.\n{ \u0026#34;name\u0026#34;: \u0026#34;socket-io-demo\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Socket io demo with p5js\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;server.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;Getsrevel\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;express\u0026#34;: \u0026#34;^4.17.1\u0026#34;, \u0026#34;socket.io\u0026#34;: \u0026#34;^2.3.0\u0026#34; } }  Bemærk at socket-io klienten hentes fra den lokale server i filen public/index.html, som beskrevet i socket.io - Get started.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Socket io demo\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;/socket.io/socket.io.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;  \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/p5.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/addons/p5.dom.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/addons/p5.sound.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;sketch.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; body { padding: 20px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Socket demo\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \r\rserver.js\r\r\rconst express = require(\u0026#39;express\u0026#39;); const app = express(); const port = process.env.PORT || 3000; // Set up the server // process.env.PORT is related to deploying on heroku const server = app.listen(port); app.use(express.static(\u0026#39;public\u0026#39;)); console.log(`Server is running on http://localhost:${port}`); const socket = require(\u0026#39;socket.io\u0026#39;); const io = socket(server); io.sockets.on(\u0026#39;connection\u0026#39;, newConnection); function newConnection(socket) { console.log(`New connection ${socket.id}`); socket.on(\u0026#39;mouse\u0026#39;, mouseMsg); function mouseMsg(data) { socket.broadcast.emit(\u0026#39;mouse\u0026#39;, data); // NB! send to all listeners (including source of incomming event)  // io.emit(\u0026#39;some event, theDataToSend)  console.log(data); } }  \r \r\rpublic/sketch.js\r\r\rconst socket = io(); function setup() { createCanvas(400, 400); background(0); // Set up listener for incomming socket events  socket.on(\u0026#39;mouse\u0026#39;, newDrawing); } const lineWidth = 10; function newDrawing(data) { // Draw some white circles with different colors  colorMode(RGB, 255); fill(255, 0, 100); noStroke(); ellipse(data.x, data.y, lineWidth, lineWidth); } function mouseDragged() { let currentNumX = mouseX; let lowerBound = 0; let upperBoundX = width; //100;  let normalizedX = norm(currentNumX, lowerBound, upperBoundX); let currentNumY = mouseY; let upperBoundY = height; //100;  let normalizedY = norm(currentNumY, lowerBound, upperBoundY); colorMode(HSB, 255); let c = color(normalizedX * 255, normalizedY * 255, 255); // Draw some white circles  fill(255); noStroke(); ellipse(mouseX, mouseY, lineWidth, lineWidth); const data = { x: mouseX, y: mouseY, }; console.log(`Sending ${data.x}${data.y}`); socket.emit(\u0026#34;mouse\u0026#34;, data); }  \r Serveren kan startes op med denne kommando. npm run start\n"
},
{
	"uri": "https://getsrevel.github.io/project/server-controlled-leds/",
	"title": "Styring af LED via web interface",
	"tags": [],
	"description": "",
	"content": "  LED array hardware   I dette projekt handler det om at styre lyset i en række multifarvede LED\u0026rsquo;er, som vist på billedet.\nTanken er at bygge videre på tre kode eksempler, så enkeltdelene kan bruges til at lave et system der kan styre lyset i LED arrayet fra en browser, f.eks. i en mobiltelefon.\nOpgaven Lav et system, der kan styre en række Neopixel LED\u0026rsquo;er fra et webinterface i en browser.\nSystemet tænkes at bestå af følgende komponenter:\n En Arduino med tilsluttet array af NeoPixel LEDs. En server lavet i node.js, der håndterer kommandoer fra brugerens browser. Et simpelt node modul der kan håndtere kommunikation med Arduino via serielporten. Brugerinterface baseret på HTML, CSS og Javascript, der via websockets sender beskeder til serveren om styring af LED lys.  Kode eksempler  Styring af neopixel LED array med arduino - Dette indeholder også beskrivelse af hardware. Klient / server kommunikation. Dette eksempel viser hvordan man kan kommunikere mellem klienter via Socket.io, ved at lave en server i node.js. Arduino JSON commands. Viser hvordan man kan håndtere udveksling af beskeder mellem computer og Arduino. Serial Port Kommunikation. Dette eksempel viser hvordan man kan sende og modtage json beskeder via seriel porten, ved hjælp af et script i node.js. Teknikken kan bruges til kommunikation mellem computer og Arduino ved hjælp af simple kommandoer.  Materiale Arduino  Arduino Arduino IDE Arduino programming reference Installing arduino libraries Eksempler fra Arduino biblioteker  Styring af LED\u0026rsquo;er  Adafruit NeoPixel Adafruit NeoPixel Überguide  Command parsing (JSON) on the Arduino  ArduinoJson  Node.js Serial port kommunikation  Node Serialport Serial port kommunikation vha. node.js  "
},
{
	"uri": "https://getsrevel.github.io/tech/node/web-scraping/",
	"title": "Web Scraping",
	"tags": [],
	"description": "",
	"content": "Dette er et eksempel på en scraper, der finder alle links på en side, og skriver deres URL ud i konsollen. Den benytter to pakker fra npm, så hele systemet ikke skal programmeres op fra grunden. Pakken axios benyttes i eksemplet til at arbejde med http requests, og cheerio bruges til at parse html strukturen, der returneres fra serveren, og uddrage de data man er interesseret i at arbejde videre med i programmet. Disse parkker skal installeres fra npm for at eksemplet kan eksekveres på din maskine.\nFørst skal der laves et projekt så node kan finde ud af at køre programmet, og har en package.json fil til at holde styr på projektet og afhængigheder af biblioteksmoduler.\nStart med at lave en mappe, som kan indeholde dit projekt. Kald den f.eks. web-scraping. I denne mappe skal du køre følgende kommando, for at oprette projekt filen package.json.\nnpm init -y Dernæst har du mulighed for at installere disse afhængigheder.\nnpm --save install axios npm --save install cheerio Du burde nu have en package.json fil, der ser nogenlunde sådan ud:\n{ \u0026#34;name\u0026#34;: \u0026#34;web-scraping\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;axios\u0026#34;: \u0026#34;^0.19.1\u0026#34;, \u0026#34;cheerio\u0026#34;: \u0026#34;^1.0.0-rc.3\u0026#34;  } } Bemærk de to pakker der er listet under afhængigheder.\nDerefter skal du oprette filen simple-scraper.js med følgende indhold.\nconst cheerio = require(\u0026#34;cheerio\u0026#34;); const axios = require(\u0026#34;axios\u0026#34;); // Swap this for the url you want to scrape const url = \u0026#34;https://en.wikipedia.org/wiki/List_of_Presidents_of_the_United_States\u0026#34;; axios .get(url) .then(response =\u0026gt; { let $ = cheerio.load(response.data); $(\u0026#34;a\u0026#34;).each(function(i, e) { let links = $(e).attr(\u0026#34;href\u0026#34;); console.log(links); }); }) .catch(function(e) { console.log(e); });  Nu kan du køre eksemplet med denne kommando:\nnode simple-scraper.js Async / await version Her er et eksempel med samme funktionalitet, men hvor der bruges async / await syntaks i stedet for promise.then().\n// import the library modules you installed from npm const cheerio = require(\u0026#34;cheerio\u0026#34;); const axios = require(\u0026#34;axios\u0026#34;); // Define the scraping algorithm async function runScraper(url) { try { const html = (await axios.get(url)).data; const $ = cheerio.load(html); $(\u0026#34;a\u0026#34;).each(function(i, e) { const url = $(e).attr(\u0026#34;href\u0026#34;); console.log(url); }); } catch (error) { console.log(\u0026#34;error: \u0026#34; + error); } } // Swap this for the url you want to scrape const url = \u0026#34;https://en.wikipedia.org/wiki/List_of_Presidents_of_the_United_States\u0026#34;; // run the scraper by calling the function runScraper(url);  Materiale NPM pakker Her er en række pakker, der kan bruges til at lave scraping af websider.\n Axios request-promise Cheerio Puppeteer Puppeteer source  Javascript emner  Promise basics Async/await The Pitfalls of Async/Await in Array Loops Why Axios Is Better Than Node-Fetch  Tutorial Denne tutorial er et eksempel på hvordan man kan hente en side med links til amerikanske præsidenter fra wikipedia, og ved at følge disse links hente de enkelte præsidenters navne og fødselsdage.\n The Ultimate Guide to Web Scraping with Node.js  Websider der anvendes i eksemplet:\n List of presidents of the United States listen af præsidenter og deres links hentes fra denne side. George Washington er et eksempel på en side der beskriver en specifik præsident.  "
},
{
	"uri": "https://getsrevel.github.io/project/weather-station/",
	"title": "Weather Station",
	"tags": [],
	"description": "",
	"content": "Opgave: Mobil vejrstation Lav et it system der gør det muligt at se data fra en vejrstatation på en nem og overskuelig måde. Løsningen skal virke på mobil, tablet og computeren.\n Opgaven løses i grupper. Der skal laves en kravspecifikation. I skal bruge et projetstyrings værktøj til at styre jeres opgaver, f.eks. Trello eller Milanote. \u0026ldquo;Oversæt\u0026rdquo; krav fra kravspecifikationen til konkrete opgaver på jeres trello board. Løsningen skal designes så den ikke belaster vejrstationen unødigt når den bruges samtidig af mange brugere, f.eks. ved at sende unødigt mange forespørgsler. Design og implementation skal dokumenteres. Brug git og github til at samarbejde om koden.  Som kilde til vejrdata kan f.eks. benyttes vejrobservationer fra Hanstholm havns vejrstation. Som datalager kan f.eks. benyttes Firebase.\nMateriale  Kravspecifikation - informatik bog Hanstholm havns vejrstation vejrobservationer hvert 10. minut. Trello kanban board til projektstyring Milanote projektstyring og idegenerering  Milanote plans \u0026amp; pricing   cron er en node.js pakke der gør det nemt at schedulere opgaver til at køre på faste tidspunkter.  Firebase  Firebase introduction docs Hotdog status - Firebase firestore tutorial Firecasts firebase intro  Uploading to firestore\n Cloud Firestore: Node.js Client Client API til firestore. Add the Firebase Admin SDK to Your Server  Hotdog status - Firebase tutorial   Firecasts firebase intro   "
},
{
	"uri": "https://getsrevel.github.io/tech/mindstorms/",
	"title": "Mindstorms",
	"tags": [],
	"description": "",
	"content": "En nem måde at komme i gang med at programmere til lego mindstorms EV3, er ved at bruge værktøjet Makecode. For at kunne benytte dette, kræves at din EV3 klods er opdateret til firmware version 1.10E eller nyere.\nProgrammering Du kan lave dit program ved hjælp af blok programmering, som du måske kender hvis du har arbejdet med Scratch, eller Applab.\n  Makecode udviklingsmiljøet i blokprogrammerings mode. Simulatoren ses i venstre side.   Udviklingsmiljøet indeholder mulighed for at simulere dit program direkte i din browser uden at overføre det til en fysisk EV3 brik. Du kan se en grafisk visning af de enheder, der forventes at være tilsluttet til din EV3, på baggrund af indholdet af din kode. Du kan også køre dit program som en simulering, og se om det opfører sig som forventet, ved at manipulere de virtuelle input i browseren. Det kan dog være vanskeligt at simulere noget, hvor der er en fysisk kobling mellem input og output, som f.eks. en linjefølger, så du får også brug for at teste med en EV3 klods.\nSom det også er tilfældet med Applab, kan du vælge at skrive dit program i javascript. Her er et eksempel på et program der starter og stopper en motor, afhængigt af om en knap er trykket ind.\nforever(function () { if (sensors.touch2.isPressed()) { motors.mediumC.run(50) } else { motors.mediumC.stop() } })  En af fordelene ved at bruge tekstbaseret kode som f.eks. javascript er, at du nemt kan klippe/klistre stumper af kode fra forskellige programmer, og sætte dem sammen til et nyt program.\nMateriale  Makecode editor til EV3. Fejlfinding af EV3 brikken. Reference dokumentation af blokke i Makecode. Javascript in Makecode  "
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/key-pressed-multi/",
	"title": "Key Press Multi",
	"tags": [],
	"description": "",
	"content": "Her er et eksempel der viser hvordan man kan håndtere input fra flere taster på en gang.\nlet cx; let cy; let state = { up: false, down: false, left: false,  right: false, boost: false }; function setup() { createCanvas(windowWidth, windowHeight); cx = width / 2; cy = height / 2; } function draw() { background(220); fill(0); noStroke(); textSize(20); text(`Move using arrow keys and space`, 10, 30); // show  if (state.boost) { fill(\u0026#34;orange\u0026#34;); stroke(\u0026#34;red\u0026#34;); } else { fill(\u0026#34;gray\u0026#34;); stroke(0); } strokeWeight(5); circle(cx, cy, 50); // update position  const step = state.boost ? 5 : 1; if (state.left) { cx -= step; }  if (state.right) { cx += step; } if (state.up) { cy -= step; } if (state.down) { cy += step; } } function keyPressed() { if (key === \u0026#34; \u0026#34;) { state.boost = true; } if (keyCode === LEFT_ARROW) { state.left = true; }  if (keyCode === RIGHT_ARROW) { state.right = true; } if (keyCode === UP_ARROW) { state.up = true; } if (keyCode === DOWN_ARROW) { state.down = true; } } function keyReleased() { if (key === \u0026#34; \u0026#34;) { state.boost = false; } if (keyCode === LEFT_ARROW) { state.left = false; }  if (keyCode === RIGHT_ARROW) { state.right = false; } if (keyCode === UP_ARROW) { state.up = false; } if (keyCode === DOWN_ARROW) { state.down = false; } }  Bemærk at både keyPressed() og keyReleased() hændelser håndteres for alle gyldige input.\nStatus for de enkelte input registreres i variablen state, som er et objekt med de nødvendige attributter.\nI eksemplet er håndteringen af venstre piletast fremhævet.\nDenne måde at håndtere input bevirker at figuren kan bevæges diagonalt, ved at trykke på to taster samtidigt. Desuden er bevægelsen uafhængig af repeat rate i keyboard indstillingerne.\n  Eksempel på timing af keyboard input fra 2 piletaster   Demo Prøv det kørende eksempel\nMateriale  keyPressed() keyReleased() keyCode Keycode.info er et et værktøj vise hvilken kode der udsendes når der trykkes på de forskellige taster på tastaturet. fill() stroke() circle() noStroke()  "
},
{
	"uri": "https://getsrevel.github.io/project/asteroid/",
	"title": "Asteroids Game",
	"tags": [],
	"description": "",
	"content": " Opgave: Lav et \u0026ldquo;Asteroids\u0026rdquo; spil  Opgaven skal laves i grupper. I skal lave en kravspecifikation I skal lave implementationen i p5js I skal bruge Trello til at styre jeres opgaver. \u0026ldquo;Oversæt\u0026rdquo; krav til jeres spil fra kravspecifikationen til opgaver på jeres trello board. Brug git og github til at samarbejde om koden.  Materiale  p5js p5 code editor browserbaseret editor der ikke kræver installation. p5 reference er dokumentation af de mange funktioner i p5. Git  Javascript emner For at kunne lave spillet bliver det formentlig nyttigt at kende til disse koncepter\n Betingelser Logiske operatorer Løkker Funktioner Objekter Arrays  Coding Challenge #46.1: Asteroids with p5.js - Part 1   Coding Challenge #46.2: Asteroids with p5.js - Part 2   3.2: Trigonometry and Polar Coordinates - The Nature of Code   Lyd effekter Her er lidt inspiration til hvordan der kan lægges lydeffekter på spillet.\n p5js Sound Tutorial 17.1: Loading and Playing - p5.js Sound Tutorial 17.5: Adding Sound Effects - p5.js Sound Tutorial  17.5: Adding Sound Effects - p5.js Sound Tutorial   "
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/key-is-pressed/",
	"title": "Keyboard",
	"tags": [],
	"description": "",
	"content": "I dette eksempel bruges keyIsPressed til at ændre fyldfarven på figuren.\nfunction setup() { let canvas = createCanvas(400, 400); canvas.parent(\u0026#34;sketch-holder\u0026#34;); } function draw() { background(100, 0, 0); fill(\u0026#34;red\u0026#34;); circle(50, 150, 50); circle(width - 50, 50, 50); if (keyIsPressed === true) { fill(0); } else { fill(255); }  rect(25, 25, 50, 50); }   canvas { display: inline; }  Demo Her kan du se en kørende version af programmet. Prøv at trykke på en vilkårlig tast på tastaturet.\n     Prøv også det kørende eksempel på en selvstændig side.\nMateriale  setup() createCanvas() parent() draw() keyIsPressed random() fill() circle()  "
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/fullscreen-toggle/",
	"title": "Fullscreen toggle",
	"tags": [],
	"description": "",
	"content": "Dette eksempel viser hvordan man kan køre en sketch, der fylder hele skærmen.\nlet cnv; function setup() { cnv = createCanvas(windowWidth, windowHeight); centerCanvas(); background(255, 0, 200); } function draw() { background(220); const cSize = 50; fill(20); circle(width / 2, height / 2, cSize); fill(255); circle(100, 100, cSize); circle(width - 100, 100, cSize); circle(100, height - 100, cSize); circle(width - 100, height - 100, cSize); fill(0, 102, 153); textSize(20); textAlign(CENTER); text(\u0026#34;Click me!\u0026#34;, width / 2, height / 2 - cSize); } function mousePressed() { if (mouseX \u0026gt; 0 \u0026amp;\u0026amp; mouseX \u0026lt; width \u0026amp;\u0026amp; mouseY \u0026gt; 0 \u0026amp;\u0026amp; mouseY \u0026lt; height) { let fs = fullscreen(); fullscreen(!fs); } } function centerCanvas() { let x = (windowWidth - width) / 2; let y = (windowHeight - height) / 2; cnv.position(x, y); } function windowResized() { resizeCanvas(windowWidth, windowHeight); centerCanvas(); }  Demo Prøv det kørende eksempel\n"
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/multitouch/",
	"title": "Multitouch",
	"tags": [],
	"description": "",
	"content": "Dette er et eksempel på hvordan man man håndtere flere samtidige berørings hændelser, f.eks. som knapper i et mobil spil, der kræver flere samtidige inputs.\nlet buttons = { left: false, right: false }; const bSize = 80; const margin = 20; let leftButton; let rightButton; function setup() { createCanvas(windowWidth, windowHeight); background(0); leftButton = createButton(\u0026#34;left\u0026#34;); leftButton.mousePressed(leftPressed); leftButton.mouseReleased(leftReleased); leftButton.touchStarted(leftPressed); leftButton.touchEnded(leftReleased); leftButton.style(\u0026#34;background-color\u0026#34;, \u0026#34;red\u0026#34;); leftButton.class(\u0026#34;noselect\u0026#34;);  leftButton.size(bSize, bSize); rightButton = createButton(\u0026#34;right\u0026#34;); rightButton.mousePressed(rightPressed); rightButton.mouseReleased(rightReleased); rightButton.touchStarted(rightPressed); rightButton.touchEnded(rightReleased); rightButton.style(\u0026#34;background-color\u0026#34;, \u0026#34;green\u0026#34;); rightButton.class(\u0026#34;noselect\u0026#34;);  rightButton.size(bSize, bSize); handleButtonPositions(); } function draw() { background(100); // left button  fill(buttons.left ? \u0026#34;red\u0026#34; : \u0026#34;pink\u0026#34;); rect(margin, margin, bSize, bSize); // right button  fill(buttons.right ? \u0026#34;green\u0026#34; : \u0026#34;teal\u0026#34;); rect(width - margin - bSize, margin, bSize, bSize); } const leftPressed = () =\u0026gt; (buttons.left = true); const leftReleased = () =\u0026gt; (buttons.left = false); const rightPressed = () =\u0026gt; (buttons.right = true); const rightReleased = () =\u0026gt; (buttons.right = false); const handleButtonPositions = () =\u0026gt; { leftButton.position(margin, height - margin - bSize); rightButton.position(width - margin - bSize, height - margin - bSize); }; function windowResized() { resizeCanvas(windowWidth, windowHeight); handleButtonPositions(); }  Bemærk at det er nødvendigt med en smule styling via CSS for at få eksemplet til at virke. Derfor er der tilføjet en klasse til button elementerne, og denne regel er tilføjet til stylesheet for siden.\n.noselect { -webkit-touch-callout: none; /* iOS Safari */ -webkit-user-select: none; /* Safari */ -khtml-user-select: none; /* Konqueror HTML */ -moz-user-select: none; /* Old versions of Firefox */ -ms-user-select: none; /* Internet Explorer/Edge */ user-select: none; /* Non-prefixed version, currently supported by Chrome, Opera and Firefox */ } Demo Prøv det kørende eksempel\n"
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/canvas/demo/",
	"title": "p5 canvas demo",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/fullscreen-toggle/demo/",
	"title": "p5 demo live",
	"tags": [],
	"description": "",
	"content": "\r"
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/key-is-pressed/demo/",
	"title": "p5 demo live",
	"tags": [],
	"description": "",
	"content": "\r"
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/tacospin/demo/",
	"title": "p5 demo live",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/key-pressed-multi/demo/",
	"title": "p5 key press multi demo",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/multitouch/demo/",
	"title": "p5 multitouch demo",
	"tags": [],
	"description": "",
	"content": "\r.noselect {\r-webkit-touch-callout: none; /* iOS Safari */\r-webkit-user-select: none; /* Safari */\r-khtml-user-select: none; /* Konqueror HTML */\r-moz-user-select: none; /* Old versions of Firefox */\r-ms-user-select: none; /* Internet Explorer/Edge */\ruser-select: none; /* Non-prefixed version, currently\rsupported by Chrome, Opera and Firefox */\r}\r\r\r"
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/sound/demo/",
	"title": "p5 sound demo",
	"tags": [],
	"description": "",
	"content": "\r"
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/tacospin/",
	"title": "Tacospin",
	"tags": [],
	"description": "",
	"content": "Dette er et eksempel på hvordan man kan loade et billede ind i p5, og ændre på skalering og rotation.\nlet img; function preload() { img = loadImage(\u0026#34;assets/taco.jpg\u0026#34;); } function setup() { createCanvas(windowWidth, windowHeight); } let angle = 0; function draw() { background(220); const speed = map(mouseX, 0, width, -1, 1, true); // show angle value  const tHeight = 40; const margin = 10; textSize(tHeight); let tposY = margin + tHeight; text(`Angle ${nfc(angle, 2)}`, margin, tposY); tposY += margin + tHeight; text(`Speed ${nfc(speed, 2)}`, margin, tposY); // draw at center of canvas  const cx = width / 2; const cy = height / 2; translate(cx, cy); // compute image scale  const scale = 0.3; const dw = img.width * scale; const dh = img.height * scale; // draw image  rotate(angle); imageMode(CENTER); image(img, 0, 0, dw, dh); angle += 0.1 * speed; }  Demo Prøv det kørende eksempel\nMateriale  translate() rotate() image() imageMode() map() mouseX mouseY nfc()  "
},
{
	"uri": "https://getsrevel.github.io/project/recursion/",
	"title": "Rekursion",
	"tags": [],
	"description": "",
	"content": "Intro Undersøg hvad rekursion betyder. Søg på recursion på google.\nTowers of Hanoi   Denne gennemgang viser hvordan man kan bruge rekursion til at løse \u0026ldquo;Towers of Hanoi\u0026rdquo; spillet.\n\r\rPython kode fra videoen.\r\r\rdef move(f,t): print(\u0026#34;Flyt: {} ==\u0026gt; {}!\u0026#34;.format(f,t)) def moveVia(f,v,t): move(f,v) move(v,t) def hanoi(n,f,h,t): if n == 0: pass else: hanoi(n-1, f, t, h) move(f,t) hanoi(n-1, h, f ,t) \r Opgave 1: Towers of hanoi i javascript Lav en implementation af løsningen på towers of hanoi i javascript ved hjælp af rekursion.\nOpgave 2: Towers of hanoi i C# Lav en implementation af løsningen på towers of hanoi i C# ved hjælp af rekursion.\nMateriale  Recursion Recursion \u0026lsquo;Super Power\u0026rsquo; (in Python) - Computerphile Recursion - wikipedia C# Intro Binary, Hanoi and Sierpinski, part 1 - 3Blue1Brown GNU History Historien bag GNU og navnet.  "
},
{
	"uri": "https://getsrevel.github.io/tech/hugo/",
	"title": "Hugo Static Site Generator",
	"tags": [],
	"description": "",
	"content": "Kom igang med Hugo  Hugo Hugo Quickstart  Tilføj indhold Indholdet skrives ved hjælp af markdown, som bliver oversat til html.\n Markdown - John Gruber Markdown Markdown syntax explained Markdown usage with grav theme Hugo shortcodes  Diagrammer med Mermaid.js Læs dokumentation af mermaid.js for mange flere detaljer.\n\rHer er et eksempel på hvordan man kan lave et flowchart.\n{{\u0026lt; mermaid \u0026gt;}} graph TD; EDIT(\u0026quot;opret/rediger/slet fil(er)\u0026quot;) --\u0026gt; STAGE(\u0026quot;udvælg ændringer\u0026quot;) STAGE --\u0026gt; COMMIT(\u0026quot;Commit i lokalt depot\u0026quot;) COMMIT --\u0026gt; DO_PUSH{Klar til offentliggørelse?} DO_PUSH --\u0026gt;|Nej| EDIT DO_PUSH --\u0026gt;|Ja| PUSH(\u0026quot;Skub ændriger til 'remote'\u0026quot;) PUSH --\u0026gt; EDIT {{\u0026lt; / mermaid \u0026gt;}} Resultatet kommer til at se således ud.\ngraph LR; EDIT(\"opret/rediger/slet fil(er)\") -- STAGE(\"udvælg ændringer\") STAGE -- COMMIT(\"Commit i lokalt depot\") COMMIT -- DO_PUSH{Klar til offentliggørelse?} DO_PUSH --|Nej| EDIT DO_PUSH --|Ja| PUSH(\"Skub ændriger til 'remote'\") PUSH -- EDIT \r"
},
{
	"uri": "https://getsrevel.github.io/tools/development-model/",
	"title": "Iterativ udvikling",
	"tags": [],
	"description": "",
	"content": "\rgraph LR; IDEA(\"Idé\") -- PLANNING((\"Planlægning\")) PLANNING -- IMPLEMENTATION((\"Udarbejdelse\")) IMPLEMENTATION -- TEST((Evaluering / Test)) TEST -- PLANNING TEST -- RELEASE(Frigivelse af færdigt system) \r"
},
{
	"uri": "https://getsrevel.github.io/tools/code-editor/",
	"title": "Code Editors and IDE&#39;s",
	"tags": [],
	"description": "",
	"content": "For at kunne arbejde med HTML, CSS, javascript og andre tekst filer har vi brug for en god editor.\nVisual Studio Code  Visual studio code (kan bruges både på Windows og Mac)  Husk at vælge alle tilvalg i additional tasks under installationen af VS Code, som vist på billedet. Det gør det nemmere at åbne hele mapper som projekter, i stedet for enkelte filer.\n  Husk at alle krydser under installationen.   Her finder du information om Visual Studio Code og en kort video intro.\n Getting started with Visual Studio Code    Jetbrains produkter Der er mulighed for at bruge en lang række udviklingsmiljøer fra JetBrains i gratis \u0026ldquo;studenter versioner\u0026rdquo;.\n https://www.jetbrains.com/student/  "
},
{
	"uri": "https://getsrevel.github.io/tech/node/",
	"title": "Node.js",
	"tags": [],
	"description": "",
	"content": "Node.js Eksempler med Node.js.\n"
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/",
	"title": "p5.js",
	"tags": [],
	"description": "",
	"content": "P5js Eksempler med p5.js.\n"
},
{
	"uri": "https://getsrevel.github.io/tech/",
	"title": "Tech",
	"tags": [],
	"description": "",
	"content": "Teknologi Eksempler med teknologier vi arbejder med i programmering.\n"
},
{
	"uri": "https://getsrevel.github.io/tools/",
	"title": "Tools",
	"tags": [],
	"description": "",
	"content": "Værktøj Her er en samling af software udviklingsværktøj.\n"
},
{
	"uri": "https://getsrevel.github.io/project/stickman/",
	"title": "Stickman",
	"tags": [],
	"description": "",
	"content": "Opgave: Lav en tændstikmand Opgaven går ud på at eksperimentere med computergrafik. Ved hjælp af p5js skal du lave et program der benytter forskellige tegne funktioner, til at generere en \u0026ldquo;tændstikmand\u0026rdquo;.\nHan skal som minimum bestå af:\n hoved mund øjne krop arme ben  Ekstra: til den \u0026ldquo;kvikke elev\u0026rdquo;; få din tændstikmand til at ændre udseende dynamisk f.eks. vha. museinput, knaptryk\n hovedets størrelse blinke med øjnene ændre farver  Vær kreativ :-)\nP5js introduktion  p5js p5 code editor browserbaseret editor der ikke kræver installation. Husk at oprette dig som bruger hvis du vil gemme dit arbejde, ellers forsvinder det når siden genindlæses. p5 reference er dokumentation af de mange funktioner i p5. Variabler i javascript bliver grundigt forklaret og bruger et metafor med en kasse, der måske kan hjælpe lidt på forståelsen. Variable scope forklaret ved et eksempel.  Tegn på skærmen Denne video forklarer de grundlæggende principper i computergrafik.\n   Dokumentation af alle tegne primitiver i p5.  Her nogle få udvalgte, der formentlig kan bruges til at løse opgaven.\n rect() line() ellipse() arc()  Her er nogle eksempler på hvordan de kan bruges i koden: en linie, et rektangel, en ellipse, et buestykke.\nline(x1, y1, x2, y2); rect(x, y, w, h); arc(x, y, w, h, start, stop); Brug af farver Når du skal tegne kan du vælge egenskaber for din \u0026ldquo;pensel\u0026rdquo;. Dette gøres på inden du \u0026ldquo;maler\u0026rdquo;, på samme måde som med en rigtig pensel.\n stroke() vælger stregens farve. strokeWeight() vælger stregens tykkelse. fill() vælger fyldfarven. Denne har kun betydning for lukkede figurer som f.eks. firkanter og cirkler.  Du kan bruge color() til at oprette en farve, og gemme værdien i en variabel, så den nemt kan genbruges forskellige steder i programmet. Her er et eksempel:\nlet myColor = color(250, 142, 0) fill(myColor); circle(100, 150, 42);  Color Picker (google) kan bruges til at vælge en farve og se hvilke argumenter du skal give til color() funktionen. Color Picker - w3schools er en del af en længere forklaring om farver på hjemmesider og computergrafik. Adobe Color farvehjul der kan bruges til at sammensætte et farvetema.  "
},
{
	"uri": "https://getsrevel.github.io/tools/git/",
	"title": "Git Intro",
	"tags": [],
	"description": "",
	"content": "Git introduktion  Git and GitHub for Poets Codingtrain tutorial. Git installation. Vælg den der passer til dit operativ system. På mac er git sikkert allerede installeret. Bruger du linux, ved du formentlig selv hvordan du installerer pakker, der passer til din distribution. How to use git in Visual Studio code Git book  About Version Control What is Git? Ignoring Files chapter Git in Visual Studio Code   GitHub guides - Hello World Hosting a p5.js sketch with GitHub Pages  Basal Arbejdsgang graph TD;\rEDIT(\"opret/rediger/slet fil(er)\") -- STAGE(\"udvælg ændringer\")\rSTAGE -- COMMIT(\"Commit i lokalt depot\")\rCOMMIT -- DO_PUSH{Klar til offentliggørelse?}\rDO_PUSH --|Nej| EDIT\rDO_PUSH --|Ja| PUSH(\"Skub ændriger til 'remote'\")\rPUSH -- EDIT\r\rDen følgende illustration viser hvordan forskellige kommandoer påvirker komponenterne i git systemet.\n  Samarbejde via github For at kunne samarbejde om den samme kodebase er det nødvendigt med en smule setup for at komme igang.\nHvis vi tager udgangspunkt i et nyt projekt kræves denne opsætning.\n opret et repository i github lave en klon på den/de computere der skal deltage. Ejeren af \u0026ldquo;repository\u0026rdquo; skal tilføje de andre bruger som samarbejdspartnere (Collaborators) Samarbejdspartnere skal acceptere invitationen (typisk via et link i en email) Efter accept af samabejdsinvitation kan de inviterede brugere skubbe kode ind i projektet.  Samarbejde via Git Her er en visualisering af opsætningen med to samarbejdende udviklere.\ngraph TB\rremote_repo(remote repo)\ryour_repo(you local repo)\rfriend_repo(friend local repo)\ryour_wd\rfriend_wd\ryour_repo -- |push| remote_repo\rremote_repo -- |pull| your_repo\rfriend_repo -- |push| remote_repo\rremote_repo -- |pull| friend_repo\rsubgraph you\ryour_wd --|commit| your_repo\rend\rsubgraph friend\rfriend_wd -- |commit| friend_repo\rend\rsubgraph github\rremote_repo\rend\r\rGithub pages Her finder du en guide til at komme igang med Github pages.\nDenne videoguide forklarer hvordan man kommer igang med at bruge github pages til at hoste sin webside.\n  Konfliktløsning Når man er flere der samarbejder om samme kode kompleks opstår der uungåeligt det at man på et tidspunkt kommer til at ændre i en fil , der allerede er blevet ændret af en anden person. Derfor er det nødvendigt at vide hvordan man løser disse konflikter i git, så man kan komme videre med arbejdet.\nKonfliktløsningsscenariet kan illustreres med et eksempel i et sekvensdiagram.\nsequenceDiagram\r%%Bob: asdfas fasfd\rNote over Alice,Bob: Succesful interaction\rBob - Bob : commit\rBob -+ github\t: push\rgithub --- Bob\t: success\rBob -+ Alice : \"Please pull the latest code\"\rAlice -+ github : pull\rgithub --- Alice\t: latest code\rAlice --- Bob : \"OK, done\"\rAlice - Alice : commit\rAlice -+ github\t: push\rgithub --- Alice\t: success\rAlice -+ Bob : \"I pushed some changes\"\rBob -+ github : pull\rgithub --- Bob\t: latest code\rBob --- Alice : \"OK, done\"\rNote over Alice,Bob: Handling merge conflicts\rBob - Bob : commit\rAlice - Alice : commit\rAlice -+ github\t: push\rgithub --- Alice\t: success\rAlice -+ Bob : \"I pushed some changes\"\rBob -+ github\t: push\rgithub --- Bob\t: error, not on latest commit\ractivate Bob\rBob -+ github : pull\rgithub --- Bob\t: latest code\rBob - Alice : \"Oh no, lots of conflicts!\"\rBob - Bob : resolve conflicts locally\rBob -+ github\t: push\rgithub --- Bob\t: success\rBob -+ Alice : \"Managed to resolve the conflicts, please review\"\rdeactivate Bob\rAlice --- Bob : \"OK, sorry!\"\rAlice -+ github : pull\rgithub --- Alice\t: latest code\rAlice --+ Bob : \"pulled the code, no issues!\"\rBob -- Alice : \"OK, great\"\r%% Bob --- Alice : \"I hope it merges cleanly\"\r\rKonfliktløsning i git er også beskrevet i denne video.\n1.9: Resolving Merge Conflicts - Git and GitHub for Poets   "
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/hsl-colors/",
	"title": "HSL Colors",
	"tags": [],
	"description": "",
	"content": "Et eksempel der viser hvordan HSL farver kan bruges i p5.\nfunction setup() { createCanvas(windowWidth, windowHeight); slider = createSlider(0, 255, 200, 1); slider.position(width/2-255, height/2-300); slider.style(\u0026#39;width\u0026#39;, `${255*2}px`); } function draw() { translate(width / 2, height / 2); const x1 = 0; const y1 = 0; const x2 = mouseX - width / 2; const y2 = mouseY - height / 2; const angle = atan2(y2, x2); // d is the length of the line  // the distance from point 1 to point 2.  const d = int(dist(x1, y1, x2, y2)); const saturation = constrain(d, 0, 255); const hueVal = map(angle, -PI, PI, 0, 255); const brightnessVal = slider.value(); const x3 = saturation * cos(angle); const y3 = saturation * sin(angle); // background(200);  colorMode(HSB, 255); const c = color(hueVal, saturation, brightnessVal); noFill(); circle(x1, y1, 255*2); fill(c); // line(x1, y1, x3, y3);  const circleDiameter = 30; stroke(0) strokeWeight(3) circle(x1, y1, circleDiameter * 2); noStroke() circle(x3, y3, circleDiameter); // Write values as text  let msg = `abs: ${d}, angle: ${nfc(angle, 2)}`; let hsvMsg = `hue: ${nfc(hueVal, 0)}, saturation: ${nfc(saturation)}, brightness: ${nfc(brightnessVal)}`; push(); translate(x1 -200, y1 - 320); noStroke(); fill(255); rect(-10,-50,400,60) fill(0); textSize(20); text(msg, 0, -5); text(hsvMsg, 0, -30); pop(); }  Demo Prøv det kørende eksempel\nMateriale  atan2() constrain() dist() colorMode() map() translate() nfc() text() textSize() push() pop() push()  "
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/hsl-colors/demo/",
	"title": "HSL Colors demo",
	"tags": [],
	"description": "",
	"content": "\r"
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/stickman-demo/demo/",
	"title": "Stickman demo",
	"tags": [],
	"description": "",
	"content": "\r\r"
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/stickman-demo/",
	"title": "Stickman Objects",
	"tags": [],
	"description": "",
	"content": "Denne demonstration er et eksempel på hvordan man kan bruge klasser og objekter til at strukturere koden. I eksemplet tegnes nogle hoppende tændstikmænd med forskellige egenskaber.\nFilen sketch.js indeholder den sædvanlige struktur for et program skrevet i p5js.\nI setup() oprettes et lærred, og der oprettes tre objekter af klassen stickman. Bemærk at de bliver initialiseret med forskellige egenskaber via deres constructor.\nI draw() kaldes metoderne render() og update() på begge de to StickMan objekter.\nDerudover er metoden mouseClicked() implementeret, og denne sørger for at kalde metoden jump på de to stickman objekter, med den effekt at de begge hopper når der klikkes med musen.\nlet man; let child; function setup() { createCanvas(windowWidth, windowHeight); const halfWidth = width/2; man = new StickMan(halfWidth +150, 70, 25, \u0026#34;blue\u0026#34;); woman = new StickMan(halfWidth - 150, 60, 15, \u0026#34;red\u0026#34;); child = new StickMan(halfWidth, 30, 45, \u0026#34;greenyellow\u0026#34;); } function draw() { background(220); textSize(20) text(\u0026#34;Klik med musen for at hoppe\u0026#34;, 30, 40) man.render(); man.update(); woman.render(); woman.update(); child.render(); child.update(); } function mouseClicked() { man.jump(); woman.jump(); child.jump(); }  Herunder ses implementationen af stickman klassen, som er lavet separat i filen stickman.js for at gøre koden mere overskuelig.\nclass StickMan { constructor(x, minHeight, jumpSpeed, color) { this.x = x; this.jumpSpeed = jumpSpeed; this.minHeight = minHeight; this.height = minHeight; this.color = color; this.y = height / 2; this.vy = 0; this.gravity = 1.5; } jump() { if (this.y == height) { this.vy = - this.jumpSpeed; } } update() { // fall down  this.y += this.vy; // increase fall speed due to gravity  this.vy += this.gravity; // stop at floor  this.y = constrain(this.y, -3000, height); // change the size  this.height = map(mouseX, 0, width, this.minHeight, this.minHeight * 6); } render() { // compute the dimensions of the body parts  const headDiameter = this.height * 0.2; const headRadius = headDiameter / 2; const bodyHeight = (this.height - headDiameter) * 0.4; const legHeight = this.height - headDiameter - bodyHeight; const legWidth = headDiameter * 0.5; const armWidth = headDiameter * 0.75; const armHeight = headDiameter * 1.8; const neckLength = headDiameter * 0.3; const headX = this.x; const headY = this.y - this.height + headRadius; // draw the stickman  push(); fill(this.color); strokeWeight(3); // head  circle(headX, headY, headDiameter); // body  line(headX, headY + headRadius, headX, headY + headRadius + bodyHeight); // arms  const shoulderY = headY + headRadius + neckLength; line(headX, shoulderY, headX - armWidth, shoulderY + armHeight); line(headX, shoulderY, headX + armWidth, shoulderY + armHeight); // legs  const legY = headY + headRadius + bodyHeight; line(headX, legY, headX - legWidth, legY + legHeight); line(headX, legY, headX + legWidth, legY + legHeight); pop(); } }  Husk at begge filer skal inkluderes i html strukturen. Hvis de ligger i samme mappe som html filen kan det gøres således:\n\u0026lt;script src=\u0026#34;stickman.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;sketch.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Demo Prøv det kørende eksempel\nMateriale  Classes Mozilla Developer Network web documentation. The \u0026lt;script\u0026gt; Tag W3schools javascript tutorial. setup() createCanvas() width height draw() background() constrain() push() pop() fill() strokeWeight() circle() ellipse() line() mouseClicked()  "
},
{
	"uri": "https://getsrevel.github.io/tech/p5js/sound/",
	"title": "Sound",
	"tags": [],
	"description": "",
	"content": "Her er et eksempel på hvordan man kan arbejde med lyd i p5.\nlet flickSound; let whistleSound; let whistleShortSound function preload() { flickSound = loadSound(\u0026#39;flick.mp3\u0026#39;); whistleSound = loadSound(\u0026#39;whistle.mp3\u0026#39;, doneLoadingWhistleSound); whistleShortSound = loadSound(\u0026#39;whistle-short.mp3\u0026#39;, () =\u0026gt; { console.log(\u0026#39;short ready\u0026#39;); }); } function setup() { createCanvas(windowWidth, windowHeight); } function doneLoadingWhistleSound(){ console.log(\u0026#34;doneLoadingWhistleSound\u0026#34;); } function draw() { background(220); fill(\u0026#34;blue\u0026#34;); circle(width / 2, height / 2, 50); textSize(20); text(\u0026#34;Tryk på: SPACE, K, L, W\u0026#34;, 50,50); text(\u0026#34;eller klik med musen\u0026#34;, 50,80); } function mouseClicked(){ console.log(\u0026#34;flick started by mouse\u0026#34;); flickSound.play(); } function keyPressed(){ if(\u0026#39; \u0026#39; == key){ console.log(\u0026#34;flick started by keyboad\u0026#34;); flickSound.play(); } if(\u0026#39;l\u0026#39; == key){ whistleSound.setLoop(true); whistleSound.play(); } if(\u0026#39;k\u0026#39; == key){ whistleSound.setLoop(false); } if(\u0026#39;w\u0026#39; == key) { console.log(\u0026#34;short whistle\u0026#34;); whistleShortSound.play(); } }  Demo Prøv det kørende eksempel.\nMateriale  p5.SoundFile dokumentation. p5js Sound Tutorial er en playliste der gennemgår en række anvendelser af lyd i p5. 17.1: Loading and Playing - p5.js Sound Tutorial 17.5: Adding Sound Effects - p5.js Sound Tutorial  17.5: Adding Sound Effects - p5.js Sound Tutorial   "
},
{
	"uri": "https://getsrevel.github.io/tech/react/react-intro/my-app-npm/readme/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "This project was bootstrapped with Create React App.\nAvailable Scripts In the project directory, you can run:\nyarn start Runs the app in the development mode.\nOpen http://localhost:3000 to view it in the browser.\nThe page will reload if you make edits.\nYou will also see any lint errors in the console.\nyarn test Launches the test runner in the interactive watch mode.\nSee the section about running tests for more information.\nyarn build Builds the app for production to the build folder.\nIt correctly bundles React in production mode and optimizes the build for the best performance.\nThe build is minified and the filenames include the hashes.\nYour app is ready to be deployed!\nSee the section about deployment for more information.\nyarn eject Note: this is a one-way operation. Once you eject, you can’t go back!\nIf you aren’t satisfied with the build tool and configuration choices, you can eject at any time. This command will remove the single build dependency from your project.\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except eject will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.\nYou don’t have to ever use eject. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.\nLearn More You can learn more in the Create React App documentation.\nTo learn React, check out the React documentation.\nCode Splitting This section has moved here: https://facebook.github.io/create-react-app/docs/code-splitting\nAnalyzing the Bundle Size This section has moved here: https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size\nMaking a Progressive Web App This section has moved here: https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app\nAdvanced Configuration This section has moved here: https://facebook.github.io/create-react-app/docs/advanced-configuration\nDeployment This section has moved here: https://facebook.github.io/create-react-app/docs/deployment\nyarn build fails to minify This section has moved here: https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify\n"
},
{
	"uri": "https://getsrevel.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://getsrevel.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]