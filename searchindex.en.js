var relearn_searchindex = [
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Unity",
    "content": "Unity Install unity How to make a Video Game in Unity Denne samling af videoer giver en introduktion til at komme igang med at lave et computerspil i Unity.\nGetting Started Basics (Episode 1) Programming (Episode 2) Movement (Episode 3) Camera follow (Episode 4) Collision (Episode 5) Gameplay (Episode 6) Score \u0026 ui (Episode 7) Game over (Episode 8) Winning levels (Episode 9) Finishing up (Episode 10) How to MAKE YOUR GAME LOOK GOOD! - Brakeys",
    "description": "Unity Install unity How to make a Video Game in Unity Denne samling af videoer giver en introduktion til at komme igang med at lave et computerspil i Unity.\nGetting Started Basics (Episode 1) Programming (Episode 2) Movement (Episode 3) Camera follow (Episode 4) Collision (Episode 5) Gameplay (Episode 6) Score \u0026 ui (Episode 7) Game over (Episode 8) Winning levels (Episode 9) Finishing up (Episode 10) How to MAKE YOUR GAME LOOK GOOD! - Brakeys",
    "tags": [],
    "title": "Unity Basics",
    "uri": "/tech/unity/unity-basics/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e C#",
    "content": "Setup For at kunne arbejde med C# kildekoden har vi brug for en god editor. Envidere får er der brug for en kompiler, så vi kan oversætte kildeteksten til et program der kan eksekveres på maskinen.\nCode editor Der er flere muligheder at vælge mellem når man skal arbejde med C# kode. For ikke at bruge en masse tid på at lære et nyt miljø at kende, vælger vi at bruge Visual Studio Code, da den kan bruges både på Windows og Mac, og det er den samme editor vi har brugt til at arbjede med javascript.\nEfter du har installeret Visual Studio Code vil det være en fordel at installere en udvidelse, der gør det nemmere at arbejde med C# filer, kopilering, og debugging af disse.\nFor at installere udvidelsen vælges plugin i menuen, og søg efter C#, på listen skulle du gerne kunne finde dette C# plugin fra microsoft.\nCompiler C# adskiller sig fra javascript bl.a. ved, at det er nødvendigt at oversætte kildeteksten til et eksekverbart program, inden det kan afvikles på computeren. Derfor har vi brug for en kompiler.\nDerfor skal vi hente og installere .NET Core.\nEfter installationen er færdig kan du åbne en terminal f.eks. Powershell og verificere din version af .NET Core med kommandoen dotnet --version. På min maskine giver den dette output.\n$ dotnet --version 5.0.401\rHvilket vil sige at jeg har version 5.0.401 installeret.\nOpret projekt Den nemmeste måde at starte et nyt .NET Core projekt er vha. terminalen. Start med at åbne en terminal i den mappe du ønsker at arbejde i.\nFor at oprette et nyt projekt skal du åbne en terminal og køre kommandoen.\ndotnet new console -o my-console-app\rDette laver en ny console app med navnet my-console-app, og opretter det en undermappe med samme navn.\nAfvikling fra kommando linjen For at sikre at det virker efter hensigten, starter vi med at oversætte og køre programmet fra kommando linjen.\nSkift til det netop oprettede projekt med kommandoen:\ncd my-console-app\rDu står nu i mappen med projektet, og kan nu oversætte (compile) og køre (run) det med kommandoen dotnet run. På min maskine giver det dette output.\nmy-console-app $ dotnet run Hello World!\rHvis du kan få et lignede resultat er det lykkedes at kompilere og oversætte programmet.\nArbejd med C# i VS code Nu er det vist tid til at rette lidt i koden, åben derfor mappen med projektet i VS code.\nÅben filen Program.cs i projektet. Indholdet burde se således ud:\nusing System; namespace hmm_demo { class Program { static void Main(string[] args) { Console.WriteLine(\"Hello World!\"); } } }\rPrøv nu at rette den fremhævede linje, så den skriver Hej Programmering! i stedet for Hello World!. Husk at gemme filen.\nC# extension For at gøre det nemmere at arbejde med C# i VS Code skal vi have installeret en program udvidelse. Søg efter c# i extensions i VS code og tryk på install.\nScreenshot af VS code hvor der er søgt efter C# udvidelsen. Kompilering / Debug Med den nye extension er det muligt at oversætte, køre og fejlsøge i C# programmer vha. knapper i VS Code.\nFor at køre programmet skal du vælge run -\u003e debug i menuen, eller trykke på f5.\nMåske kommer der en boks frem der beder dig vælge det udviklingsmiljø du vil bruge. Her skal du vælge .NET Core. Dette genererer instillinger i mappen .vscode, som bruges af C# udvidelsen når koden skal oversættes og køres.\nNår programmet kører får jeg på min maskine dette output:\n------------------------------------------------------------------- You may only use the Microsoft .NET Core Debugger (vsdbg) with Visual Studio Code, Visual Studio or Visual Studio for Mac software to help you develop and test your applications. ------------------------------------------------------------------- Loaded 'C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.0.10\\System.Private.CoreLib.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled. Loaded 'C:\\code\\c-sharp\\2021\\my-console-app\\bin\\Debug\\net5.0\\my-console-app.dll'. Symbols loaded. Loaded 'C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.0.10\\System.Runtime.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled. Loaded 'C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.0.10\\System.Console.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled. Loaded 'C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.0.10\\System.Threading.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled. Loaded 'C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.0.10\\System.Text.Encoding.Extensions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled. Hello World! The program '[14664] my-console-app.dll' has exited with code 0 (0x0).\rDet meste er beskeder fra compiler og runtime miljøet, men der kommer også det forventede output fra koden jeg selv har skrevet, på den fremhævede linje.\nHåndtering af stdin / stdout Afhængig af typen af det program du laver, kan det være hensigtsmæssigt at ændre måden det eksekveres i fra VS Code på.\nDer er 3 muligheder, som vælges ved at ændre i instillingerne i .vscode/launch.json. Prøv at ændre i parameteren console til en af disse værdier, og vælg den der passer bedst til dit brugsscenarie.\n\"console\": \"internalConsole\" \"console\": \"integratedTerminal\" \"console\": \"externalTerminal\" Hvis jeg vælger indstillingen externalTerminal, vises output fra mit program fra tidligere på denne måde på min windows 10 maskine.\nScreenshot af terminal output. Gitignore Når .NET Core projektet bygges, bliver der genereret en række objektfiler og binære biblioteker osv. af kompileren. Disse er nødvendige for at programmet kan afvikles, men hvis de andre der arbejder selv har en kompiler installeret, kan disse nemt gendannes. Derfor kan det være nyttigt at undlade at tilføje genererede filer til versionsstyringssystemet.\nHvis man f.eks. benytter git kan man lave en liste af filer og mapper der skal ignoreres af git. Dette kan klares ved at oprette en fil med navnet .gitignore, i roden af projektet.\n# files and folders to be ignored by git # ignore build artifacts bin/ obj/\rMed dette indhold bliver indholdet af mapperne bin og obj ignoreret af git.\nMan kan nemt justere i hvilke filer og mapper der skal ignoreres ved at ændre i .gitignore filen. Se også dokumentationen af gitignore.\nMateriale Visual Studio Code .NET Core Get started with VS Code using C# and .NET Core on Windows Git ignore Ignoring Files chapter of the Pro Git book. Console.WriteLine - .NET reference documentation",
    "description": "Setup For at kunne arbejde med C# kildekoden har vi brug for en god editor. Envidere får er der brug for en kompiler, så vi kan oversætte kildeteksten til et program der kan eksekveres på maskinen.\nCode editor Der er flere muligheder at vælge mellem når man skal arbejde med C# kode. For ikke at bruge en masse tid på at lære et nyt miljø at kende, vælger vi at bruge Visual Studio Code, da den kan bruges både på Windows og Mac, og det er den samme editor vi har brugt til at arbjede med javascript.",
    "tags": [],
    "title": "C# Intro",
    "uri": "/tech/c-sharp/c-sharp-intro/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e React",
    "content": "Dette eksempel viser hvordan man kan starte med at arbejde med React.\nFor at gøre indlæringskurven knap så stejl, benyttes Create React App til at oprette projektstrukturen, så man ikke selv skal sætte det hele op fra bunden.\nForudsætninger For at kunne komme i gang kræves en fungerende installation af node.js.\nStart med at kontrollere din version af node og npm, hvilket kan gøres med disse kommandoer.\nnode --version npm --version\rPå min maskine giver de følgende output.\n$ node --version v19.8.1 $ npm --version 9.6.0\rI dette eksempel er benyttet node version v11.15.0 og npm version 6.7.0\nOpret projekt strukturen Sørg for at din terminal er i den mappe hvor du ønsker at oprette dit projekt. Dernæst kan du oprette et projekt med denne kommando.\nnpx create-react-app my-app\rEfter scriptet er afsluttte med success, burde du så kunne skifte bibliotek til det oprettede projekt.\ncd my-app\rDerefter kan projektet køres med kommandoen.\nnpm start\rDette kører din react app i udviklings-mode, hvilket bla. vil sige at der kører en server på maskine, så du kan se din app ved at åbne http://localhost:3000 i en browser.\nNår du åbner siden burde du se noget i stil med det der er vist på figuren.\nScreenshot af den kørende react app. React Components Prøv nu at lave din egen react komponent.\nFor at undgå at blande en masse forskellige komponenter sammen i laves den nye komponent i en separat fil. Opret filen src/components/Clock.js og indsæt følgende.\nimport React from \"react\"; function Clock() { return \u003cdiv\u003eKlokken er: TODO\u003c/div\u003e; } export default Clock;\rNu kan Clock komponenten benyttes i andre dele af react app’en. Åben filen src/App.js og erstat indholdet med dette.\nimport React from \"react\"; import \"./App.css\"; import Clock from \"./components/Clock\"; function App() { return ( \u003cdiv className=\"App\"\u003e \u003cClock /\u003e \u003c/div\u003e ); } export default App;\rBemærk hvordan Clock komponenten importeres og indsættes i renderingen af App komponenten.\nStyling Vi har ikke brug for de css styles, der blev oprettet sammen med eksempel koden. Men lidt plads omkring indholdet er ok.\nErstat derfor indholdet af src/App.css med dette.\n.App { padding: 1em; }\rState Hook Det virker utilfredsstillende at bruge så meget energi på at lave et ur der ikke viser klokken.\nDet kan løses med lidt javascript. Man kan tilknytte state til enhver react komponent, så i dette tilfælde vil vi gøre det med tiden for uret ved at tilføje disse ændringer til src/components/Clock.js.\nimport React, {useState} from \"react\"; function Clock() { const [time, setTime] = useState(new Date().toLocaleTimeString()); return \u003cdiv\u003eKlokken er: {time}\u003c/div\u003e; } export default Clock;\rNu vises klokken, men desværre skal man genindlæse siden for at få uret til at gå.\nEffect Hook For at få uret til at gå kan vi benytte en useEffect hook, der kaldes ved bestemte hændelser i komponentens livs-cyclus (life-cycle-events).\nVi er intereseret i at opdatere uret hvert sekund. Hvilket kan opnås ved at ændre i Clock komponenten igen, så filen src/components/Clock.js ender med at se sådan ud.\nimport React, { useState, useEffect } from \"react\"; function Clock() { const [time, setTime] = useState(new Date().toLocaleTimeString()); const updateTime = () =\u003e { setTime(new Date().toLocaleTimeString()); }; useEffect(() =\u003e { setInterval(updateTime, 1000); }); return \u003cdiv\u003eKlokken er: {time}\u003c/div\u003e; } export default Clock;\rNu skulle uret gerne opdatere tiden en gang i sekundet.\nMateriale React React - Main concepts Get Started - Create React App Create a New React App Use Effect Use State",
    "description": "Dette eksempel viser hvordan man kan starte med at arbejde med React.\nFor at gøre indlæringskurven knap så stejl, benyttes Create React App til at oprette projektstrukturen, så man ikke selv skal sætte det hele op fra bunden.\nForudsætninger For at kunne komme i gang kræves en fungerende installation af node.js.\nStart med at kontrollere din version af node og npm, hvilket kan gøres med disse kommandoer.\nnode --version npm --version\rPå min maskine giver de følgende output.",
    "tags": [],
    "title": "React Intro",
    "uri": "/tech/react/react-intro/index.html"
  },
  {
    "breadcrumb": "Getsrevel",
    "content": "En samling ideer til opgaver og software projekter.\n“The true sign of intelligence is not knowledge but imagination.” – Albert Einstein",
    "description": "En samling ideer til opgaver og software projekter.\n“The true sign of intelligence is not knowledge but imagination.” – Albert Einstein",
    "tags": [],
    "title": "Projekter",
    "uri": "/project/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e React",
    "content": "Her er et eksempel på hvordan man kan bruge properties på react komponenter til at vise udvalgte informationer, f.eks. fra en database eller et API.\nEksemplet bygger videre på den app der blev oprettet i React intro.\nInput data For at have noget data at vise, oprettes følgende datastruktur oprettet i filen src/lib/fake_highscores.js.\n// Fake data - could come from a database or similar const data = { userIdOne: { username: \"jens\", firstName: \"Jens\", lastName: \"Hansen\", scores: [ { date: \"2020-03-16T10:30:45\", score: 7 }, { date: \"2020-03-16T12:30:45\", score: 15 }, { date: \"2020-03-16T12:32:45\", score: 10 }, ] }, userIdTwo: { username: \"jj\", firstName: \"Jørgen\", lastName: \"Jyde\", scores: [ { date: \"2020-03-16T11:30:42\", score: 120 }, { date: \"2020-03-16T12:35:31\", score: 12 }, { date: \"2020-03-16T12:37:20\", score: 23 }, { date: \"2020-03-17T09:07:34\", score: 17 }, { date: \"2020-03-17T09:31:10\", score: 25 }, ] }, userIdThree: { username: \"john\", firstName: \"John\", lastName: \"Doe\", scores: [ { date: \"2020-03-16T10:57:45\", score: 11 }, { date: \"2020-03-16T11:05:45\", score: 8 }, { date: \"2020-03-16T11:21:12\", score: 13 }, ] } }; export default data;\rI en rigtig app kan vi forestille os at data er gemt i en database, i og ikke blot gemt i en statisk fil.\nPræsentation i browser For at kunne vise highscore data i browseren laves en par nye komponenter i filen src/components/Highscore.js, så den har dette indhold.\nimport React from \"react\"; import data from '../lib/fake_highscores'; function Highscore() { return ( \u003cdiv\u003e \u003ch1\u003eHighscores\u003c/h1\u003e { Object.values(data).map(item =\u003e ( \u003cUser key={item.username} user={item} /\u003e )) } \u003c/div\u003e ); } const User = props =\u003e { return ( \u003cdiv\u003e \u003ch2\u003e {props.user.firstName} {props.user.lastName} \u003c/h2\u003e \u003cp\u003eUsername: {props.user.username}\u003c/p\u003e \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eTime\u003c/th\u003e \u003cth\u003eScore\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e {props.user.scores.map((item, i) =\u003e ( \u003ctr key={i}\u003e \u003ctd\u003e{item.date}\u003c/td\u003e \u003ctd\u003e{item.score}\u003c/td\u003e \u003c/tr\u003e ))} \u003c/tbody\u003e \u003c/table\u003e \u003c/div\u003e ); }; export default Highscore;\rBemærk hvordan der i Highscore komponenten itereres over data objektets værdier, og oprettes en react komponenter af typen User for hver entry.\nDerefter indsættes Highscore komponenten i vores App komponent, så src/App.js nu ser således ud:\nimport React from 'react'; import './App.css'; import Clock from './components/Clock' import Highscore from './components/Highscore'; function App() { return ( \u003cdiv className=\"App\"\u003e \u003cClock /\u003e \u003cHighscore /\u003e \u003c/div\u003e ); } export default App;\rStyling af tabeller For at få html tabellerner med highscores til at se en smule pænere ud kan vi tilføje lidt css, så filen src/App.css nu ser således ud.\n.App { padding: 1em; } table { border-collapse: collapse; width: 30em; } th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; } tr:hover { background-color: #f5f5f5; }\rMateriale React React - Main concepts Components and Props Lists and Keys Object values() Array map() Styling tables",
    "description": "Her er et eksempel på hvordan man kan bruge properties på react komponenter til at vise udvalgte informationer, f.eks. fra en database eller et API.\nEksemplet bygger videre på den app der blev oprettet i React intro.\nInput data For at have noget data at vise, oprettes følgende datastruktur oprettet i filen src/lib/fake_highscores.js.\n// Fake data - could come from a database or similar const data = { userIdOne: { username: \"jens\", firstName: \"Jens\", lastName: \"Hansen\", scores: [ { date: \"2020-03-16T10:30:45\", score: 7 }, { date: \"2020-03-16T12:30:45\", score: 15 }, { date: \"2020-03-16T12:32:45\", score: 10 }, ] }, userIdTwo: { username: \"jj\", firstName: \"Jørgen\", lastName: \"Jyde\", scores: [ { date: \"2020-03-16T11:30:42\", score: 120 }, { date: \"2020-03-16T12:35:31\", score: 12 }, { date: \"2020-03-16T12:37:20\", score: 23 }, { date: \"2020-03-17T09:07:34\", score: 17 }, { date: \"2020-03-17T09:31:10\", score: 25 }, ] }, userIdThree: { username: \"john\", firstName: \"John\", lastName: \"Doe\", scores: [ { date: \"2020-03-16T10:57:45\", score: 11 }, { date: \"2020-03-16T11:05:45\", score: 8 }, { date: \"2020-03-16T11:21:12\", score: 13 }, ] } }; export default data;\rI en rigtig app kan vi forestille os at data er gemt i en database, i og ikke blot gemt i en statisk fil.",
    "tags": [],
    "title": "Components + Data",
    "uri": "/tech/react/component-props/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Node.js",
    "content": "Her er nogle links til at komme i gang med node.js.\nNode.js Getting started guide Node guides npm - Node Package Manager Express web framework for node.js Node gør det muligt at lave programmer der kan køres fra kommandolinien. Her er et simpelt eksempel.\n// this is a comment /* This is a multiline comment */ // Erklæring af variabel let name; // Tildering af variable name = \"Allan\"; // Erklæring og tildeling på samme linje let greeting = \"Hej \"; // Iteration med for-løkke for (let i = 0; i \u003c 5; i++) { let separator = ''; if (i \u003c 3) { separator = ', '; } else if (i \u003c 4) { separator = ' og '; } greeting += name + separator; } // Udskrift til konsol console.log(greeting); // Matematiske beregninger let a = 5; let b = 3; let number = a * b; console.log(a + \" gange \" + b + \" giver \" + number); // Betingelser og forgreninger if (number \u003e 5) { console.log(\"Det var et stort tal\"); } else { console.log(\"Ok tak\"); } // Definition af egne funktioner function myAdd(a, b) { return a + b; } result = myAdd(number, 34); console.log(result); // Brug af biblioteks funktion let root = Math.sqrt(result); console.log(root); console.log(\"Program afslutter\");\rHvis du gemmer koden i filen node-demo.js, kan du eksekvere programmet med denne kommando.\nnode node-demo.js\rProgrammet burde så give følgende output i terminalen.\nHej Allan, Allan, Allan, Allan og Allan 5 gange 3 giver 15 Det var et stort tal 49 7 Program afslutter\rDiscussing node.js - Computerphile",
    "description": "Her er nogle links til at komme i gang med node.js.\nNode.js Getting started guide Node guides npm - Node Package Manager Express web framework for node.js Node gør det muligt at lave programmer der kan køres fra kommandolinien. Her er et simpelt eksempel.\n// this is a comment /* This is a multiline comment */ // Erklæring af variabel let name; // Tildering af variable name = \"Allan\"; // Erklæring og tildeling på samme linje let greeting = \"Hej \"; // Iteration med for-løkke for (let i = 0; i \u003c 5; i++) { let separator = ''; if (i \u003c 3) { separator = ', '; } else if (i \u003c 4) { separator = ' og '; } greeting += name + separator; } // Udskrift til konsol console.log(greeting); // Matematiske beregninger let a = 5; let b = 3; let number = a * b; console.log(a + \" gange \" + b + \" giver \" + number); // Betingelser og forgreninger if (number \u003e 5) { console.log(\"Det var et stort tal\"); } else { console.log(\"Ok tak\"); } // Definition af egne funktioner function myAdd(a, b) { return a + b; } result = myAdd(number, 34); console.log(result); // Brug af biblioteks funktion let root = Math.sqrt(result); console.log(root); console.log(\"Program afslutter\");\rHvis du gemmer koden i filen node-demo.js, kan du eksekvere programmet med denne kommando.",
    "tags": [],
    "title": "Intro",
    "uri": "/tech/node/intro/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e React",
    "content": "Dette eksempel viser hvordan man kan integrere Firebase Firestore i en react app. Det tager udgangspunkt i samme simple eksempel, som blev brugt i hotdog demoen. Dog vil vi her nøjes med at læse data fra Firestore.\nEksemplet bygger videre på den app der blev oprettet i React intro, og udvidet i Components + Data.\nInstallation af Firebase For at kunne benytte funktionaliteter fra firebase i vores react app, er det nødvendigt at installere firebase SDK. Dette kan klares med følgende kommando, som henter pakken fra npm og tilføjer den til package.json, så vi har styr på projektets afhængigheder.\nnpm install firebase --save\rKonfiguration af Firebase Til dette eksempel er det ikke nødvendigt at oprette en ny firebase app, da den bruge samme Firestore database som denne demonstrationen fra tidligere. Det er dog stadig nødvendigt at konfigurere firebase SDK til at kommunikere med den ønskede backend.\nFor at kunne benytte firebase på en nem måde i flere forskellige komponenter laves opsætning af og initialisering af firebase SDK i filen src/lib/Firebase.js, som så kan importeres af de komponenter der skal bruge firebase.\nimport firebase from \"firebase/app\"; import \"firebase/firestore\"; // Your web app's Firebase configuration const firebaseConfig = { apiKey: \"YOUR_API_KEY\", authDomain: \"YOUR_FIREBASE_APP_NAME.firebaseapp.com\", databaseURL: \"https://YOUR_FIREBASE_APP_NAME.firebaseio.com\", projectId: \"YOUR_FIREBASE_APP_NAME\", storageBucket: \"YOUR_FIREBASE_APP_NAME.appspot.com\", messagingSenderId: \"YOUR_SENDER_ID\", appId: \"YOUR_APP_ID\", measurementId: \"YOUR_MEASUREMENT_ID\" }; // Initialize Firebase firebase.initializeApp(firebaseConfig); export default firebase;\rDe konkrete settings, der skal bruges i dit projekt, finder du i firebase konsollen ved at gå ind i den app du vil bruge som backend. Åben derefter “Settings” og “General”. Måske skal der oprettes et web endpoint, hvis du ikke allerede har gjort det. For yderligere forklaringer kan denne intro sikkert bruges.\nLæs fra Firestore Nu er fundament på plads, så det er tid til at lave en react komponent, der henter data fra Firestore. Det gøres i filen src/components/Hotdog.js, og koden er som vist herunder.\nimport React, { useEffect, useState } from \"react\"; // import the firebase configuration settings import firebase from \"../lib/Firebase\"; // initialize firestore const firestore = firebase.firestore(); const docRef = firestore.doc(\"samples/sandwichData\"); function Hotdog() { const thingToDoWhithDocumentData = doc =\u003e { if (doc \u0026\u0026 doc.exists) { const myData = doc.data(); setHotdogStatus(myData.hotdogStatus); } }; const getRealtimeUpdates = () =\u003e { docRef.onSnapshot(thingToDoWhithDocumentData); }; const [hotdogStatus, setHotdogStatus] = useState(\"\"); useEffect(() =\u003e { // subscribe to realtime updates when component loads or updates getRealtimeUpdates(); }); return ( \u003cdiv className=\"hotdog-status\"\u003e \u003cb\u003eBreaking News\u003c/b\u003e \u003ch1\u003eHotdog status: \u003cspan\u003e{hotdogStatus}\u003c/span\u003e\u003c/h1\u003e \u003c/div\u003e ); } export default Hotdog;\rDerefter mangler vi blot at indsætte Hotdog i App komponenten, så src/App.js nu ser således ud:\nimport React from 'react'; import './App.css'; import Clock from './components/Clock' import Highscore from './components/Highscore'; import Hotdog from './components/Hotdog'; function App() { return ( \u003cdiv className=\"App\"\u003e \u003cClock /\u003e \u003cHotdog /\u003e \u003cHighscore /\u003e \u003c/div\u003e ); } export default App;\rVi tilføjer en smule css i src/App.css for at fremhæve den vigtige information om hotdogs.\n.App { padding: 1em; } table { border-collapse: collapse; width: 30em; } th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; } tr:hover { background-color: #f5f5f5; } .hotdog-status { display: inline-block; margin-top: 1em; padding: 1em; background-color: yellow; border-radius: .5em; -webkit-box-shadow: 8px 13px 16px 0px rgba(0, 0, 0, 0.85); -moz-box-shadow: 8px 13px 16px 0px rgba(0, 0, 0, 0.85); box-shadow: 8px 13px 16px 0px rgba(0, 0, 0, 0.85); }\rApp Demo med Hotdog Status Den kørende app burde nu ligne noget i stil med det der er vist på figuren herunder.\nScreenshot af den kørende react app. Materiale Add Firebase to your JavaScript project",
    "description": "Dette eksempel viser hvordan man kan integrere Firebase Firestore i en react app. Det tager udgangspunkt i samme simple eksempel, som blev brugt i hotdog demoen. Dog vil vi her nøjes med at læse data fra Firestore.\nEksemplet bygger videre på den app der blev oprettet i React intro, og udvidet i Components + Data.\nInstallation af Firebase For at kunne benytte funktionaliteter fra firebase i vores react app, er det nødvendigt at installere firebase SDK. Dette kan klares med følgende kommando, som henter pakken fra npm og tilføjer den til package.json, så vi har styr på projektets afhængigheder.",
    "tags": [],
    "title": "React + Firebase",
    "uri": "/tech/react/react-with-firebase/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Materiale p5js p5 code editor browserbaseret editor der ikke kræver installation. p5 reference er dokumentation af de mange funktioner i p5. Variabler i javascript bliver grundigt forklaret og bruger et metafor med en kasse, der måske kan hjælpe lidt på forståelsen. Variable scope forklaret ved et eksempel. P5 Cheat Sheet giver en oversigt over de basale elementer i p5.js. Tegn på skærmen Denne video forklarer de grundlæggende principper i computergrafik.\nSetup and draw stateDiagram\r[*] --\u003e Setup\rSetup --\u003e Draw\rDraw--\u003eDraw : render next frame\rTegneprimitiver Dokumentation af alle tegneprimitiver i p5. Her nogle få udvalgte, der formentlig kan bruges til at løse opgaven.\nrect() line() ellipse() arc() Her er nogle eksempler på hvordan de kan bruges i koden: en linie, et rektangel, en ellipse, et buestykke.\nline(x1, y1, x2, y2); rect(x, y, w, h); arc(x, y, w, h, start, stop);\rBrug af farver Når du skal tegne kan du vælge egenskaber for din “pensel”. Dette gøres på inden du “maler”, på samme måde som med en rigtig pensel.\nstroke() vælger stregens farve. strokeWeight() vælger stregens tykkelse. fill() vælger fyldfarven. Denne har kun betydning for lukkede figurer som f.eks. firkanter og cirkler. Du kan bruge color() til at oprette en farve, og gemme værdien i en variabel, så den nemt kan genbruges forskellige steder i programmet. Her er et eksempel:\nlet myColor = color(250, 142, 0) fill(myColor); circle(100, 150, 42);\rColor Picker (google) kan bruges til at vælge en farve og se hvilke argumenter du skal give til color() funktionen. Color Picker - w3schools er en del af en længere forklaring om farver på hjemmesider og computergrafik. Adobe Color farvehjul der kan bruges til at sammensætte et farvetema. HTML Color Codes forklaring af farver i HTML/CSS.",
    "description": "Materiale p5js p5 code editor browserbaseret editor der ikke kræver installation. p5 reference er dokumentation af de mange funktioner i p5. Variabler i javascript bliver grundigt forklaret og bruger et metafor med en kasse, der måske kan hjælpe lidt på forståelsen. Variable scope forklaret ved et eksempel. P5 Cheat Sheet giver en oversigt over de basale elementer i p5.js. Tegn på skærmen Denne video forklarer de grundlæggende principper i computergrafik.",
    "tags": [],
    "title": "Intro til P5js",
    "uri": "/tech/p5js/intro/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech",
    "content": "HTML er et opmærkningssprog, der bruges til at kommunikere strukturen af indholdet i et dokument til en browser.\nHer er et eksempel på en html struktur.\n\u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e \u003ctitle\u003eTitlen på dokumentet\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e Indhold på siden \u003c/body\u003e \u003c/html\u003e\rHTML elementer Når du skriver dit indhold benyttes en række forskellige tags, til at angive hvordan de forskellige dele (HTML elementer) af dokumentet skal fortolkes.\nGrundlæggende er html elementer opbygget således.\n\u003cTAG_NAVN ATTRIBUT_NAVN=\"ATTRIBUT_VÆRDI\"\u003eINDHOLD_AF_HTML_ELEMENT\u003c/TAG_NAVN\u003e\rEt html element består alså af disse elementer\net start tag \u003cTAG_NAVN\u003e et slut tag der matcher start tag men med en skråstreg: \u003c/TAG_NAVN\u003e en eller flere attributter, bestående af et navn og en værdi. Her er et par eksempler på HTML tags.\n\u003ch1\u003eOverskrift\u003c/h1\u003e \u003cp\u003eDette er et afsnit med noget tekst.\u003c/p\u003e\rIndlejrede elementer Nogle html elementer er beregnet til at indeholde andre html elementer, et eksempel er når man laver en opremsning med en liste.\n\u003cul\u003e \u003cli\u003epunkt 1\u003c/li\u003e \u003cli\u003epunkt 2\u003c/li\u003e \u003cli\u003epunkt 3\u003c/li\u003e \u003c/ul\u003e\rTypisk ender et dokument med at bestå af en række HTML elemementer, hver med et eller flere indlejrede dokumenter indeni.\nIkke afsluttede tags Det er ikke alle HTML elementer, hvor det semantisk giver mening at de har indhold. Derfor kan de også bestå af et tag der slutter sig selv. Et eksempel er hr (Horizontal rule)\n\u003chr /\u003e\rEt andet eksempel er når der indsættes et billede. Her angives en URL til hvor billedets kilde kan findes som en attribut.\n\u003cimg src=\"path/to/image/file.jpg\" title=\"En beskrivende title\" alt=\"Beskrivelse af billedet i fald det ikke kan vises\" /\u003e\rAlle de mange tags og hvordan de bruges kan du læse mere om i denne HTML Tutorial.\nDemo dokument Her er et lidt mere fyldigt eksempel.\n\u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e \u003ctitle\u003eTitlen på dokumentet\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eEksempel på HTML dokument\u003c/h1\u003e \u003cp\u003eDette er et afsnit med noget tekst. Bemærk at jeg har sat et billede ind herunder\u003c/p\u003e \u003cimg src=\"IMG_9747.jpg\" alt=\"kameleon i skovbunden\" title=\"Hovedet skiftede fra rødt til grønt mens jeg fandt kameraet frem\" /\u003e \u003chr /\u003e \u003cp\u003eHer følger en liste med et par HTML elementer.\u003c/p\u003e \u003cul\u003e \u003cli\u003epunkt 1\u003c/li\u003e \u003cli\u003epunkt 2\u003c/li\u003e \u003cli\u003epunkt 3\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eMan kan nemt ændre det til en ordnet liste.\u003c/p\u003e \u003col\u003e \u003cli\u003epunkt 1\u003c/li\u003e \u003cli\u003epunkt 2\u003c/li\u003e \u003cli\u003epunkt 3\u003c/li\u003e \u003c/ol\u003e \u003c/body\u003e \u003c/html\u003e\rPå denne side kan du se resultatet i din browser.\nMateriale HTML introduktion HTML Tutorial Headings Paragraphs Lists Links Images figure figcaption Video kursus (På dansk) HTML Kursus Quiz HTML quiz",
    "description": "HTML er et opmærkningssprog, der bruges til at kommunikere strukturen af indholdet i et dokument til en browser.\nHer er et eksempel på en html struktur.\n\u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e \u003ctitle\u003eTitlen på dokumentet\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e Indhold på siden \u003c/body\u003e \u003c/html\u003e\rHTML elementer Når du skriver dit indhold benyttes en række forskellige tags, til at angive hvordan de forskellige dele (HTML elementer) af dokumentet skal fortolkes.",
    "tags": [],
    "title": "Html",
    "uri": "/tech/html/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Project",
    "content": "For at kunne løse opgaven har du sikkert brug for en kort introduktion til HTML.\nOpgave: Mig og min kageopskrift Lav et website i html der præsenterer dig selv og din yndlings kage:\nDer skal være 2 sider. En beskrivelse af dig selv der navngives “profil.html”. En anden side med en mad opskrift “opskrift.html”. Begge sider skal have en titel. Der skal være links så man kan navigere mellem de to sider. På profil siden\nBrug forskellige niveauer af overskrifter. Lav mindst et afsnit med brødtekst (f.eks. En kort beskrivelse af dig selv). På siden med opskriften\nLav overskrifter. Indsæt et billede af kagen. Giv det en figurtekst. Lav en unummereret punktopstilling med ingredienser. Lav en nummeret punktopstilling med fremgangsmåden. Lav en henvisning (link) til kilden (hvor du fandt opskriften). Lav et link til “toppen” lokalt link på siden. Opgave: Styling med CSS Arbejd med styling af HTML elementer vha CSS i eksternt stylesheet\nBrug html struktur fra opgaven med kageopskriften (index.html) Lav styling af siden ved hjælp af CSS i en ekstern fil (style.css) Materiale Introduktion til HTML Introduktion til CSS CSS grid layout Visual Studio Code - værktøj til redigering af filer.",
    "description": "For at kunne løse opgaven har du sikkert brug for en kort introduktion til HTML.\nOpgave: Mig og min kageopskrift Lav et website i html der præsenterer dig selv og din yndlings kage:\nDer skal være 2 sider. En beskrivelse af dig selv der navngives “profil.html”. En anden side med en mad opskrift “opskrift.html”. Begge sider skal have en titel. Der skal være links så man kan navigere mellem de to sider. På profil siden",
    "tags": [],
    "title": "HTML Basics",
    "uri": "/project/html-basics/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech",
    "content": "HTML bruges til at opbygge den semantiske struktur af et dokument. Dette har ikke nogen direkte kobling til det visuelle udtryk.\nNår vi skal styre udseendet på en webside bruges i stedet Cascading Style Sheets (CSS).\nCSS introduktion CSS er opbygget af en række regler, der angiver hvordan et eller flere HTML elementer skal vises.\nSELECTOR_ONE, SELECTOR_TWO { PROPERTY_ONE : VALUE_ONE; PROERTY_TWO : VALUE_TWO; }\rEn regel består altså af\nEn SELECTOR der udvælger de elementer, der er omfattet af reglen. Hvis der er flere selectors, adskilles listen med kommaer , En eller flere PROPERTIES (egenskaber) med en tilhørende værdi Listen af egenskaber er indkapslet som en blok i et sæt krøllede paranteser { ... } En egenskab og den tilhørende værdi er adskilt med et Kolon : Listen af egenskabs-/værdipar er adskilt af semikolon ; Her er et konkret eksempel, der styrer fontstørrelsen og farven for overskrifter på niveau 2 (h2 elementer):\nh2 { font-size: 24px; color: blue; }\rSamspil med HTML Der er 3 måder at insætte css i en html struktur.\nDefinition i ekstern fil Definition i internt i html strukturen Inline i html elementerne som værdi i attribut Der er mange forskellige måder at lave en selector, der udvælger bestemte html elementer. De mest almindelige er\nDirekte vha. navn på elementet Ved brug af en klasse Ved brug af et ID Kodeeksempel De forskellige måder at bruge styles og udvælge elementer er illustreret i dette eksempel.\nFormålet med eksemplet er ikke at lave en webside, der er visuelt pæn, men blot at illustrere et udvalg af hvordan styles og selectors kan bruges.\nHer er html strukturen i demo.html. Bemærk hvordan det eksterne stylesheet er inkluderet, definition af style internt i dokument, samt brug af inline style.\n\u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"external-style.css\" \u003e \u003ctitle\u003eCSS på 3 måder\u003c/title\u003e \u003cstyle\u003e h3 { font-style: italic; } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003cheader\u003e \u003ch2\u003eEkstern Definition\u003c/h2\u003e \u003cp\u003eUdseendet af denne sektion er defineret i en ekstern css fil.\u003c/p\u003e \u003cp\u003eSelector er lavet vha. af elementets navn.\u003c/p\u003e \u003c/header\u003e \u003cmain\u003e \u003ch1\u003eTre måder at bruge CSS i HTML\u003c/h1\u003e \u003cul\u003e \u003cli\u003eEkstern CSS Fil.\u003c/li\u003e \u003cli\u003eIntern CSS i dokument.\u003c/li\u003e \u003cli\u003eInline CSS definition i style attribut.\u003c/li\u003e \u003c/ul\u003e \u003ch3\u003eIntern definition\u003c/h3\u003e \u003cp\u003eSom eksempel er der lavet en \u003cstrong\u003eintern definition\u003c/strong\u003e, der ændrer skriften til kursiv for \u003ccode\u003eh3\u003c/code\u003e elementer.\u003c/p\u003e \u003ch2\u003eSelectors\u003c/h2\u003e \u003cp\u003eDer er flere måde at udvælge elementer vha. selectors. De mest almindelige er:\u003c/p\u003e \u003cul\u003e \u003cli\u003eDirekte ved hjælp af navn på elementet.\u003c/li\u003e \u003cli\u003eVed brug af en klasse.\u003c/li\u003e \u003cli\u003eVed brug af et ID.\u003c/li\u003e \u003c/ul\u003e \u003cdiv\u003e \u003ch3\u003eElement\u003c/h3\u003e \u003cp\u003eMan kan bruge html elementer direkte som selector, så vil alle elementer der matches bruge samme stil.\u003c/p\u003e \u003cp\u003eDette er lavet som eksempel i dette dokument, med \u003ccode\u003ediv\u003c/code\u003e elementer Der bliver vist som indrammede kasser.\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"my-custom-class\"\u003e \u003ch3\u003eKlasse\u003c/h3\u003e \u003cp\u003eMan kan bruge selectors til at vælge bestemte html elementer vha. deres navn. Dette er lavet som eksempel i dette dokument, med \u003ccode\u003ediv\u003c/code\u003e elementer Der bliver vist som indrammede kasser.\u003c/p\u003e \u003cp\u003eMan kan bruge html elementer direkte som selector, så vil alle elementer der matches bruge samme stil.\u003c/p\u003e \u003c/div\u003e \u003cdiv id=\"my-custom-id\"\u003e \u003ch3\u003eSelector med ID\u003c/h3\u003e \u003cp\u003eMan kan vælge at tildele et ID som en attribut til et element, og bruge det til styling.\u003c/p\u003e \u003cp\u003eFor denne blok er stilen lavet med et ID\u003c/p\u003e \u003cp\u003e\u003cem\u003eBemærk:\u003c/em\u003e at et id skal være unikt indefor et dokument.\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"my-custom-class\"\u003e \u003ch3\u003eKlasser fortsat\u003c/h3\u003e \u003cp\u003eMan kan bruge Samme klasse flere steder i sit dokument.\u003c/p\u003e \u003c/div\u003e \u003c/main\u003e \u003cfooter\u003e \u003ch2\u003eDemonstration af css\u003c/h2\u003e \u003cp\u003eHer er et eksempel på en \u003cspan style=\"font-weight: bold; color: orange;\"\u003einline style\u003c/span\u003e\u003c/p\u003e \u003c/footer\u003e \u003c/body\u003e \u003c/html\u003e\rHer er css filen strukturen i external-style.css\n/* Man kan indsætte kommentarer i CSS på denne måde */ /* Kommentarer kan sprede sig over flere linjer */ header { display: inline-flexbox; justify-content: flex-end; margin: 1em 1em; padding: 1em; background-color: yellow; border-radius: .5em; -webkit-box-shadow: 8px 13px 16px 0px rgba(0, 0, 0, 0.85); -moz-box-shadow: 8px 13px 16px 0px rgba(0, 0, 0, 0.85); box-shadow: 8px 13px 16px 0px rgba(0, 0, 0, 0.85); } body { margin: 0; } footer { background-color: gray; padding: .2em 3em; margin: 0; } h3 { color: brown; font-style: italic; } main { margin: 0 2em; } div { background-color: lightgrey; margin-bottom: 1em; padding: .1em 1em; border: 2px solid gray; } .my-custom-class { color: rgb(0, 92, 0); background-color: rgb(136, 207, 136); border-color: green; } #my-custom-id { background-color: lightpink; border-color: darkred; margin-left: 2em; margin-right: 2em; border-radius: .5em; border-width: 5px; }\rDemo Prøv det kørende eksempel.\nMateriale CSS Tutorial CSS Syntax and Selectors Three Ways to Insert CSS Same Page Different Stylesheets CSS Box Model Eksempler zebra stripes on a table Fancy table Quiz CSS quiz Css zen garden Eksempler på forskellige styles brugt på den samme html struktur.\nEks. 215 Eks. 217 Eks. 216 Eks. 211 Eks. 212",
    "description": "HTML bruges til at opbygge den semantiske struktur af et dokument. Dette har ikke nogen direkte kobling til det visuelle udtryk.\nNår vi skal styre udseendet på en webside bruges i stedet Cascading Style Sheets (CSS).\nCSS introduktion CSS er opbygget af en række regler, der angiver hvordan et eller flere HTML elementer skal vises.\nSELECTOR_ONE, SELECTOR_TWO { PROPERTY_ONE : VALUE_ONE; PROERTY_TWO : VALUE_TWO; }\rEn regel består altså af",
    "tags": [],
    "title": "Css",
    "uri": "/tech/css/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Dette eksempel viser hvordan man opretter et lærred og tegner figurer på skærmen. Der benyttes variabler og musemarkørens position til at styre hvor på skærmen der tegnes.\nfunction setup() { createCanvas(windowWidth, windowHeight); } function draw() { background(220); fill(255); // variable declaration let x; // variable assignment x = mouseX; // declaration and assignment in one line let y = mouseY; circle(x, y, 150); // assign a new value to x x = 200; ellipse(x, y, 80, 40); fill(255, 0, 0); circle(width, height, 120); let cx = width / 2; let cy = height / 2; circle(cx, cy, 50); }\rDemo Prøv det kørende eksempel\nMateriale setup() createCanvas() draw() background() fill() mouseX mouseY circle() ellipse()",
    "description": "Dette eksempel viser hvordan man opretter et lærred og tegner figurer på skærmen. Der benyttes variabler og musemarkørens position til at styre hvor på skærmen der tegnes.\nfunction setup() { createCanvas(windowWidth, windowHeight); } function draw() { background(220); fill(255); // variable declaration let x; // variable assignment x = mouseX; // declaration and assignment in one line let y = mouseY; circle(x, y, 150); // assign a new value to x x = 200; ellipse(x, y, 80, 40); fill(255, 0, 0); circle(width, height, 120); let cx = width / 2; let cy = height / 2; circle(cx, cy, 50); }\rDemo Prøv det kørende eksempel",
    "tags": [],
    "title": "Canvas",
    "uri": "/tech/p5js/canvas/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Løse noter om programmering og andet “Work In Progress”.\n“Hvis du nyder at veksle mellem at føle dig som den klogeste i verden og historiens største fjols, begge dele i løbet af den samme dag, så er programmering sikkert lige noget for dig.” – Anonym programmør",
    "description": "Løse noter om programmering og andet “Work In Progress”.\n“Hvis du nyder at veksle mellem at føle dig som den klogeste i verden og historiens største fjols, begge dele i løbet af den samme dag, så er programmering sikkert lige noget for dig.” – Anonym programmør",
    "tags": [],
    "title": "Getsrevel",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Mindstorms",
    "content": "Robot der styres med 2 motorer. Dette eksempel forudsætter at man har bygget en robot der kan køre ved at styre 2 separater motorer, en til hvert hjul. Motorerne sidder på B og C udgangene.\nDet kan være sværet at vurdere hvor hurtigt robotten kører med forskellige motorhastigheder. Derfor ender man ofte med at downloade talrige programmer til EV3 brick’en, for at teste forskellige motorhastigheder. Endnu sværere bliver det at afgøre hvor skarp robottet drejer, når motorerne kører med forskellige hastigheder.\nDerfor kan dette eksempel bruges til nemt at afprøve forskellige motorhastigheder.\nIndstillinger for speed og turn ratio kan indstilles med knapperne på EV3 brick, og displayet viser de valgte indstillinger.\nEksempel på visning i displayet i simulatoren. Blokprogrammering Her er koden der bruges i eksemplet lavet med blokprogrammering.\nProgrammet lavet med blokprogrammering. Javascript udgave Den samme kode er her vist som javascript.\nlet turnRatio = 0 let speed = 0 brick.buttonUp.onEvent(ButtonEvent.Pressed, function () { speed += 10 }) brick.buttonRight.onEvent(ButtonEvent.Pressed, function () { turnRatio += 10 }) brick.buttonLeft.onEvent(ButtonEvent.Pressed, function () { turnRatio += 0 - 10 }) brick.buttonDown.onEvent(ButtonEvent.Pressed, function () { speed += 0 - 10 }) brick.showString(\"Steer tester\", 1) brick.showString(\"Connect motors BC\", 7) brick.showString(\"up/down : speed\", 8) brick.showString(\"left/right : turn\", 9) forever(function () { motors.largeBC.steer(turnRatio, speed) brick.showValue(\"speed\", speed, 2) brick.showValue(\"turnRatio\", turnRatio, 3) brick.showValue(\"motor B speed\", motors.largeB.speed(), 4) brick.showValue(\"motor C speed\", motors.largeC.speed(), 5) pause(100) })",
    "description": "Robot der styres med 2 motorer. Dette eksempel forudsætter at man har bygget en robot der kan køre ved at styre 2 separater motorer, en til hvert hjul. Motorerne sidder på B og C udgangene.\nDet kan være sværet at vurdere hvor hurtigt robotten kører med forskellige motorhastigheder. Derfor ender man ofte med at downloade talrige programmer til EV3 brick’en, for at teste forskellige motorhastigheder. Endnu sværere bliver det at afgøre hvor skarp robottet drejer, når motorerne kører med forskellige hastigheder.",
    "tags": [],
    "title": "Two Motor Turning",
    "uri": "/tech/mindstorms/2-motor-turning/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Objects Simple",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Objects Simple Demo",
    "uri": "/tech/p5js/objects-simple/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Dette eksempel viser hvordan man kan bruge vektorer i en klasse til at tegne figurer på skærmen.\nNår man klikker med musen genereres et tilfældigt antal rektangler, som tegnes på skærmen.\nDet grundlæggende programflow håndteres i filen sketch.js.\nlet shapes = [] function setup() { createCanvas(windowWidth, windowHeight); createShapes() } function draw() { background('LightSkyBlue'); for (const shape of shapes) { shape.render() } } // === Helper functions function createShapes() { shapes = [] let p1 = new p5.Vector() let p2 = new p5.Vector() let shapeCount = random(10) for (let i = 0; i \u003c shapeCount; i++) { p1.x = random(0, width) p1.y = random(0, height) p2.x = random(0, width) p2.y = random(0, height) let s = new Shape(p1, p2) shapes.push(s) } } // === Event handling function mousePressed() { createShapes() }\rKlassen Shape er defineret i filen shape.js.\nclass Shape { constructor(startPos, endPos) { this.startPos = startPos.copy() this.endPos = endPos.copy() } render() { push() stroke('navy') strokeWeight(5) line(this.startPos.x, this.startPos.y, this.endPos.x, this.endPos.y) pop() } }\rFor at de to filer kan fungere sammen, skal de begge inkluderes i html strukturen, f.eks. som vist herunder.\n\u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cscript src=\"../p5lib/p5.js\"\u003e\u003c/script\u003e \u003cscript src=\"../p5lib/p5.sound.min.js\"\u003e\u003c/script\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"../p5lib/default-p5-style.css\" /\u003e \u003cmeta charset=\"utf-8\" /\u003e \u003c/head\u003e \u003cbody\u003e \u003cscript src=\"shape.js\"\u003e\u003c/script\u003e \u003cscript src=\"sketch.js\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e\rDemo Prøv det kørende eksempel\nMateriale setup() draw() createCanvas() background() noFill() rect() push() pop() mousePressed() p5.Vector()",
    "description": "Dette eksempel viser hvordan man kan bruge vektorer i en klasse til at tegne figurer på skærmen.\nNår man klikker med musen genereres et tilfældigt antal rektangler, som tegnes på skærmen.\nDet grundlæggende programflow håndteres i filen sketch.js.\nlet shapes = [] function setup() { createCanvas(windowWidth, windowHeight); createShapes() } function draw() { background('LightSkyBlue'); for (const shape of shapes) { shape.render() } } // === Helper functions function createShapes() { shapes = [] let p1 = new p5.Vector() let p2 = new p5.Vector() let shapeCount = random(10) for (let i = 0; i \u003c shapeCount; i++) { p1.x = random(0, width) p1.y = random(0, height) p2.x = random(0, width) p2.y = random(0, height) let s = new Shape(p1, p2) shapes.push(s) } } // === Event handling function mousePressed() { createShapes() }\rKlassen Shape er defineret i filen shape.js.",
    "tags": [],
    "title": "Objects Simple",
    "uri": "/tech/p5js/objects-simple/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e C#",
    "content": "Eksemplet viser hvordan man kan bruge argumenter fra kommandolinjen til at påvirke afviklingen af et program.\n﻿using System; namespace cmd_args_demo { class Program { static void Main(string[] args) { ShowArguments(args); int multiplier = 7; if (args.Length \u003e 0) { int.TryParse(args[0], out multiplier); } if (args.Length \u003e 1) { int max = 10; int.TryParse(args[1], out max); } doStuff(multiplier, 10); } static void ShowArguments(string[] args) { for (int i = 0; i \u003c args.Length; i++) { string item = args[i]; Console.WriteLine($\"argument {i} : {item}\"); } } static void doStuff(int multiplier, int iterationCount) { for (int i = 1; i \u003c= iterationCount; i++) { int value = multiplier * i; Console.WriteLine($\"{i} * {multiplier} : {value}\"); } } } }\rMateriale How to convert a string to a number Int32.TryParse Method",
    "description": "Eksemplet viser hvordan man kan bruge argumenter fra kommandolinjen til at påvirke afviklingen af et program.\n﻿using System; namespace cmd_args_demo { class Program { static void Main(string[] args) { ShowArguments(args); int multiplier = 7; if (args.Length \u003e 0) { int.TryParse(args[0], out multiplier); } if (args.Length \u003e 1) { int max = 10; int.TryParse(args[1], out max); } doStuff(multiplier, 10); } static void ShowArguments(string[] args) { for (int i = 0; i \u003c args.Length; i++) { string item = args[i]; Console.WriteLine($\"argument {i} : {item}\"); } } static void doStuff(int multiplier, int iterationCount) { for (int i = 1; i \u003c= iterationCount; i++) { int value = multiplier * i; Console.WriteLine($\"{i} * {multiplier} : {value}\"); } } } }\rMateriale How to convert a string to a number Int32.TryParse Method",
    "tags": [],
    "title": "Command Line Interface Arguments",
    "uri": "/tech/c-sharp/cli-args/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Circle Rain",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Circle rain Demo",
    "uri": "/tech/p5js/circle-rain/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tags",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tag :: Array",
    "uri": "/tags/array/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Eksemplet tegner en mængde cirkler på skærmen, der falder mod bunder af skærmen som en slags regn. Der defineres en funktion der kan ændre cirklernes egenskaber: position og hastighed. Der benyttes arrays til at kan holde styr de mange cirklers individuelle egenskaber.\nconst ballCount = 100 let diameters = new Array(ballCount); let xPositions = new Array(ballCount); let yPositions = new Array(ballCount); let ySpeeds = new Array(ballCount); function setup() { createCanvas(windowWidth, windowHeight); reset(50) } function draw() { background(220); for (let i = 0; i \u003c ballCount; i++) { circle(xPositions[i], yPositions[i], diameters[i]) yPositions[i] += ySpeeds[i]; } } function reset(maxSize) { for (let i = 0; i \u003c ballCount; i++) { diameters[i] = random(0, maxSize); ySpeeds[i] = random(0.01, 10); xPositions[i] = random(0, width); yPositions[i] = random(0, height) - height; } } function mouseClicked() { const maxSize = map(mouseY, 0, height,0,200) reset(maxSize) }\rDemo Prøv det kørende eksempel\nMateriale setup() draw() background() createCanvas() random() circle() mouseClicked() map()",
    "description": "Eksemplet tegner en mængde cirkler på skærmen, der falder mod bunder af skærmen som en slags regn. Der defineres en funktion der kan ændre cirklernes egenskaber: position og hastighed. Der benyttes arrays til at kan holde styr de mange cirklers individuelle egenskaber.\nconst ballCount = 100 let diameters = new Array(ballCount); let xPositions = new Array(ballCount); let yPositions = new Array(ballCount); let ySpeeds = new Array(ballCount); function setup() { createCanvas(windowWidth, windowHeight); reset(50) } function draw() { background(220); for (let i = 0; i \u003c ballCount; i++) { circle(xPositions[i], yPositions[i], diameters[i]) yPositions[i] += ySpeeds[i]; } } function reset(maxSize) { for (let i = 0; i \u003c ballCount; i++) { diameters[i] = random(0, maxSize); ySpeeds[i] = random(0.01, 10); xPositions[i] = random(0, width); yPositions[i] = random(0, height) - height; } } function mouseClicked() { const maxSize = map(mouseY, 0, height,0,200) reset(maxSize) }\rDemo Prøv det kørende eksempel",
    "tags": [
      "Array",
      "Loop",
      "Event"
    ],
    "title": "Circle Rain",
    "uri": "/tech/p5js/circle-rain/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tags",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tag :: Event",
    "uri": "/tags/event/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tags",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tag :: Loop",
    "uri": "/tags/loop/index.html"
  },
  {
    "breadcrumb": "Getsrevel",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Project",
    "content": "Skriv et program, der finder positionen af det første mellemrum i en streng. Skriv et program, der fjerner det første ord i en sætning (indtil første mellemrum). Skriv et program, der tæller antallet af mellemrum i en tekst. Skriv et program, der fjerner den første forekomst af ordet “måske” fra en tekst. Ændr derefter programmet, så det fjerner alle forekomster af ordet (brug f.eks. en løkke). Skriv et program, der finder og fjerner alle forekomster af ordet “måske” fra en tekst, uanset om det er skrevet med store eller små bogstaver. Skriv et program, der undersøger, om en tekst er et palindrom, dvs. med samme stavning forfra og bagfra (som f.eks. “regninger”, “russerdressur”, “vær dog god ræv”). Udvid programmet til at tage højde for store/små bogstaver, tegnsætning og mellemrum, sådan at de følgende palindromer også genkendes: “Selmas lakserøde garagedøre skal samles” og “Åge lo, da baronesse Nora bad Ole gå”. Materiale Palindromer rotor Anna RADAR kajak pop madam regninger otto Otto programmering russerdressur vær dog god ræv Selmas lakserøde garagedøre skal samles Hej med dig jeg hedder Kaj Åge lo, da baronesse Nora bad Ole gå Python Python tutorial, w3schools.com Python Strings, w3schools.com C# C# Tutorial C# Tutorial - Strings String.IndexOf Method String.Equals Method String.Replace Method String.Substring Method",
    "description": "Skriv et program, der finder positionen af det første mellemrum i en streng. Skriv et program, der fjerner det første ord i en sætning (indtil første mellemrum). Skriv et program, der tæller antallet af mellemrum i en tekst. Skriv et program, der fjerner den første forekomst af ordet “måske” fra en tekst. Ændr derefter programmet, så det fjerner alle forekomster af ordet (brug f.eks. en løkke). Skriv et program, der finder og fjerner alle forekomster af ordet “måske” fra en tekst, uanset om det er skrevet med store eller små bogstaver. Skriv et program, der undersøger, om en tekst er et palindrom, dvs. med samme stavning forfra og bagfra (som f.eks. “regninger”, “russerdressur”, “vær dog god ræv”). Udvid programmet til at tage højde for store/små bogstaver, tegnsætning og mellemrum, sådan at de følgende palindromer også genkendes: “Selmas lakserøde garagedøre skal samles” og “Åge lo, da baronesse Nora bad Ole gå”. Materiale Palindromer rotor Anna RADAR kajak pop madam regninger otto Otto programmering russerdressur vær dog god ræv Selmas lakserøde garagedøre skal samles Hej med dig jeg hedder Kaj Åge lo, da baronesse Nora bad Ole gå Python Python tutorial, w3schools.com Python Strings, w3schools.com C# C# Tutorial C# Tutorial - Strings String.IndexOf Method String.Equals Method String.Replace Method String.Substring Method",
    "tags": [],
    "title": "String Manipulation",
    "uri": "/project/string-manipulation/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Input Events",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Input Events demo",
    "uri": "/tech/p5js/input-events/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Eksemplet viser, hvordan man kan benytte input events fra keyboard og mus til at ændre på figurens udseende.\nlet fillColor = 'black' let sizeMultiplier = 1 function setup() { createCanvas(windowWidth, windowHeight) rectMode(CENTER) } function draw() { background(220); text(\"Press 'r', 'b' or click mouse to change color\", 40, 40) textSize(20) let xPos = mouseX let yPos = mouseY let shapeSize = 80 * sizeMultiplier fill(fillColor) if (keyIsPressed) { rect(xPos, yPos, shapeSize) } else { circle(xPos, yPos, shapeSize) } } function keyPressed() { console.log(\"pressed\", key) if ('b' == key) { fillColor = 'blue' } if ('r' == key) { fillColor = 'red' } } function keyReleased() { console.log(\"released\", key) sizeMultiplier = 1 } function mousePressed() { console.log(\"mouse pressed\") fillColor = 'yellow' sizeMultiplier = 3 } function mouseReleased() { console.log(\"mouse released\") fillColor = 'black' sizeMultiplier = 3 }\rDemo Prøv det kørende eksempel\nMateriale setup() draw() createCanvas() rectMode() background() text() textSize() fill() rect() circle() mouseX mouseY keyIsPressed keyPressed() keyReleased() mousePressed() mouseReleased()",
    "description": "Eksemplet viser, hvordan man kan benytte input events fra keyboard og mus til at ændre på figurens udseende.\nlet fillColor = 'black' let sizeMultiplier = 1 function setup() { createCanvas(windowWidth, windowHeight) rectMode(CENTER) } function draw() { background(220); text(\"Press 'r', 'b' or click mouse to change color\", 40, 40) textSize(20) let xPos = mouseX let yPos = mouseY let shapeSize = 80 * sizeMultiplier fill(fillColor) if (keyIsPressed) { rect(xPos, yPos, shapeSize) } else { circle(xPos, yPos, shapeSize) } } function keyPressed() { console.log(\"pressed\", key) if ('b' == key) { fillColor = 'blue' } if ('r' == key) { fillColor = 'red' } } function keyReleased() { console.log(\"released\", key) sizeMultiplier = 1 } function mousePressed() { console.log(\"mouse pressed\") fillColor = 'yellow' sizeMultiplier = 3 } function mouseReleased() { console.log(\"mouse released\") fillColor = 'black' sizeMultiplier = 3 }\rDemo Prøv det kørende eksempel",
    "tags": [
      "Event"
    ],
    "title": "Input Events",
    "uri": "/tech/p5js/input-events/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Project",
    "content": "Lav et program, der simulerer kast med 6 terninger. Der udføres f.eks. 100 kast. Optæl i et array hyppigheden af summen af øjenantallene. Udvid programmet til at kunne lave statistik på kast med et vilkårligt antal terninger. Udvid programmet til at kunne lave statistik på kast med terninger med et vilkårligt antal sider. Ændr programmet, så man kan angive antallet af terninger, gentagelser og sider på kommandolinjen. Hints For at lave en ’terning’ med seks sider kan du bruge denne stump kode, der generer et tilfældigt tal mellem 1 og 6.\nlet value = Math.floor(Math.random() * 6) + 1\rKommandolinje argumenter kan f.eks. benyttes således const args = process.argv.slice(2) console.log(args) if(1 == args.length){ const name = args[0] console.log(`Hello, ${name}!`) } else { console.log(\"Hello, world!\") }\rHer en lidt mere udførlig introduktion til CLI argumenter.\nMateriale Arrays in javascript Math.floor() Math.random() CLI arguments intro Node.js, accept arguments from the command line",
    "description": "Lav et program, der simulerer kast med 6 terninger. Der udføres f.eks. 100 kast. Optæl i et array hyppigheden af summen af øjenantallene. Udvid programmet til at kunne lave statistik på kast med et vilkårligt antal terninger. Udvid programmet til at kunne lave statistik på kast med terninger med et vilkårligt antal sider. Ændr programmet, så man kan angive antallet af terninger, gentagelser og sider på kommandolinjen. Hints For at lave en ’terning’ med seks sider kan du bruge denne stump kode, der generer et tilfældigt tal mellem 1 og 6.",
    "tags": [],
    "title": "Array Stats",
    "uri": "/project/array-stats/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Node.js",
    "content": "Eksempler på forskellige måder at man kan bruge argumenter fra kommandolinjen til at påvirke afviklingen af et program.\nSimpel brug af CLI argumenter Kommandolinje argumenter kan f.eks. benyttes således const args = process.argv.slice(2) console.log(args) if(1 == args.length){ const name = args[0] console.log(`Hello, ${name}!`) } else { console.log(\"Hello, world!\") }\rProgrammet giver dette output ved afvikling af med forskellig input argumenter.\n$ node cli-args-demo.js [] Hello, world! $ node cli-args-demo.js Bjarne [ 'Bjarne' ] Hello, Bjarne! $ node cli-args-demo.js Finn, Find og Bjarne [ 'Finn', 'Find', 'og', 'Bjarne' ] Hello, world!\rMinimist pakken Det kan være fordelagtigt at benytte npm pakken minimist, hvis der er brug for mere end de aller simpleste argumenter. Det gør det langt nemmere at parse indholdet in i variabler, der kan benyttes i programmet.\nconst args = require('minimist')(process.argv.slice(2)) args['name'] console.log(args) if(args.name !== undefined){ console.log(`Hello, ${args.name}!`) } else { console.log(\"Hello, world!\") }\rHer er et eksempel på output fra programmet.\n$ node cli-minimist-demo.js { _: [] } Hello, world! $ node cli-minimist-demo.js Bjarne { _: [ 'Bjarne' ] } Hello, world! $ node cli-minimist-demo.js Finn, Find og Bjarne { _: [ 'Finn', 'Find', 'og', 'Bjarne' ] } Hello, world! $ node cli-minimist-demo.js Find --name=Bjarne og Finn { _: [ 'Find', 'og', 'Finn' ], name: 'Bjarne' } Hello, Bjarne!\rHusk at installere minimist inden eksemplet køres, med kommandoen nmp install minimist\nYargs pakken Er der brug for mere avanceret håndtering af argumenter på kommandolinjen, kan man benytte npm pakken yargs. Det giver blandt andet mulighed for at tilknytte beskrivelser, typer og aliaser for de forskellige argumenter.\nHer er et eksempel på håndtering af mere indviklede argumenter på kommandolinjen.\nconst yargs = require('yargs'); const argv = yargs .command('lyr', 'Tells whether an year is leap year or not', { year: { description: 'the year to check for', alias: 'y', type: 'number', } }) .option('time', { alias: 't', description: 'Tell the present Time', type: 'boolean', }) .help() .alias('help', 'h') .argv; if (argv.time) { console.log('The current time is: ', new Date().toLocaleTimeString()); } if (argv._.includes('lyr')) { const year = argv.year || new Date().getFullYear(); if (((year % 4 == 0) \u0026\u0026 (year % 100 != 0)) || (year % 400 == 0)) { console.log(`${year} is a Leap Year`); } else { console.log(`${year} is NOT a Leap Year`); } } console.log(argv);\rFor at kunne køre eksemplet kræver det at pakken yargs er installeret, hvilket kan gøres med kommandoen npm i yargs.\nHer er indholdet af package.json.\n{ \"name\": \"cli-args\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"cli-yargs-demo.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\" }, \"author\": \"\", \"license\": \"ISC\", \"dependencies\": { \"yargs\": \"^17.2.1\" } }\rHer er et eksempel på output fra programmet.\n$ node cli-yargs-demo.js { _: [], '$0': 'cli-yargs-demo.js' } $ node cli-yargs-demo.js -h cli-yargs-demo.js [command] Commands: cli-yargs-demo.js lyr Tells whether an year is leap year or not --version Show version number [boolean] -t, --time Tell the present Time [boolean] $ node cli-yargs-demo.js --version 1.0.0 $ node cli-yargs-demo.js --help lyr cli-yargs-demo.js lyr Options: --version Show version number [boolean] -t, --time Tell the present Time [boolean] -h, --help Show help [boolean] -y, --year the year to check for [number] $ node cli-yargs-demo.js lyr 2021 is NOT a Leap Year { _: [ 'lyr' ], '$0': 'cli-yargs-demo.js' } $ node cli-yargs-demo.js lyr --time The current time is: 22.48.45 2021 is NOT a Leap Year { _: [ 'lyr' ], time: true, t: true, '$0': 'cli-yargs-demo.js' } $ node cli-yargs-demo.js lyr --time -y 3000 The current time is: 22.48.59 3000 is NOT a Leap Year { _: [ 'lyr' ], time: true, t: true, y: 3000, year: 3000, '$0': 'cli-yargs-demo.js' }\rMateriale Node.js, accept arguments from the command line Yargs; Leap year example minimist - npm package yargs - npm package",
    "description": "Eksempler på forskellige måder at man kan bruge argumenter fra kommandolinjen til at påvirke afviklingen af et program.\nSimpel brug af CLI argumenter Kommandolinje argumenter kan f.eks. benyttes således const args = process.argv.slice(2) console.log(args) if(1 == args.length){ const name = args[0] console.log(`Hello, ${name}!`) } else { console.log(\"Hello, world!\") }\rProgrammet giver dette output ved afvikling af med forskellig input argumenter.\n$ node cli-args-demo.js [] Hello, world! $ node cli-args-demo.js Bjarne [ 'Bjarne' ] Hello, Bjarne! $ node cli-args-demo.js Finn, Find og Bjarne [ 'Finn', 'Find', 'og', 'Bjarne' ] Hello, world!\rMinimist pakken Det kan være fordelagtigt at benytte npm pakken minimist, hvis der er brug for mere end de aller simpleste argumenter. Det gør det langt nemmere at parse indholdet in i variabler, der kan benyttes i programmet.",
    "tags": [],
    "title": "Command Line Interface Arguments",
    "uri": "/tech/node/cli-args/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e C#",
    "content": "Eksemplet viser hvordan man kan bede en bruger om input, og bruge det til at vurdere temperaturen. NB! Temperaturen er i grader celcius.\n﻿using System; namespace temperature_assessment { class Program { private InputHandler inputHandler; private TemperatureAssessor temperatureAssessor; public Program(InputHandler ih, TemperatureAssessor ta) { this.inputHandler = ih; this.temperatureAssessor = ta; } public void Run() { do { double temperature = inputHandler.PromptForNumber(\"Hvad er temperaturen i grader celsius?\"); string result = temperatureAssessor.EvaluateTemperature(temperature); Console.WriteLine(result); } while (inputHandler.Confirm(\"Vil du prøve igen?\")); } static void Main(string[] args) { Console.WriteLine(\"Temperatur vurdering\"); InputHandler inputHandler = new InputHandler(); TemperatureAssessor temperatureAssessor = new TemperatureAssessor(); Program myProgram = new Program(inputHandler, temperatureAssessor); myProgram.Run(); } } class TemperatureAssessor { public string EvaluateTemperature(double temperature) { if (temperature \u003c= 10) return \"For koldt til at stå op - bliv i sengen\"; if (temperature \u003c= 15) return \"For koldt til at arbejde - bliv hjemme\"; if (temperature \u003c= 20) return \"OK temperatur til en tur i skoven\"; if (temperature \u003c= 22) return \"Perfekt pausetemperatur\"; return \"For varmt til at arbejde - tag til stranden\"; } } class InputHandler { public double PromptForNumber(string message) { double value; bool isSuccess; do { string line = Prompt($\"{message} \"); isSuccess = Double.TryParse(line, out value); if (!isSuccess) { Console.Error.WriteLine(\"Ugyldigt input: Du skal skrive et tal.\"); } } while (!isSuccess); return value; } public bool Confirm(string question) { string confirm = \"ja\"; string reject = \"nej\"; string response; bool isValidResponse; do { response = Prompt($\"{question} [{confirm}/{reject}] \"); isValidResponse = response.Equals(reject) || response.Equals(confirm); if (!isValidResponse) { Console.Error.WriteLine($\"Ugyldigt input: Du skal svare enten '{confirm}' eller '{reject}'\"); } } while (!isValidResponse); return response.Equals(confirm); } string Prompt(string message) { Console.Write($\"{message} \"); return Console.ReadLine(); } } }\rMateriale How to convert a string to a number Console.ReadLine Method Console.Write Method Console.WriteLine Method Console.Error Property Double.TryParse Method",
    "description": "Eksemplet viser hvordan man kan bede en bruger om input, og bruge det til at vurdere temperaturen. NB! Temperaturen er i grader celcius.\n﻿using System; namespace temperature_assessment { class Program { private InputHandler inputHandler; private TemperatureAssessor temperatureAssessor; public Program(InputHandler ih, TemperatureAssessor ta) { this.inputHandler = ih; this.temperatureAssessor = ta; } public void Run() { do { double temperature = inputHandler.PromptForNumber(\"Hvad er temperaturen i grader celsius?\"); string result = temperatureAssessor.EvaluateTemperature(temperature); Console.WriteLine(result); } while (inputHandler.Confirm(\"Vil du prøve igen?\")); } static void Main(string[] args) { Console.WriteLine(\"Temperatur vurdering\"); InputHandler inputHandler = new InputHandler(); TemperatureAssessor temperatureAssessor = new TemperatureAssessor(); Program myProgram = new Program(inputHandler, temperatureAssessor); myProgram.Run(); } } class TemperatureAssessor { public string EvaluateTemperature(double temperature) { if (temperature \u003c= 10) return \"For koldt til at stå op - bliv i sengen\"; if (temperature \u003c= 15) return \"For koldt til at arbejde - bliv hjemme\"; if (temperature \u003c= 20) return \"OK temperatur til en tur i skoven\"; if (temperature \u003c= 22) return \"Perfekt pausetemperatur\"; return \"For varmt til at arbejde - tag til stranden\"; } } class InputHandler { public double PromptForNumber(string message) { double value; bool isSuccess; do { string line = Prompt($\"{message} \"); isSuccess = Double.TryParse(line, out value); if (!isSuccess) { Console.Error.WriteLine(\"Ugyldigt input: Du skal skrive et tal.\"); } } while (!isSuccess); return value; } public bool Confirm(string question) { string confirm = \"ja\"; string reject = \"nej\"; string response; bool isValidResponse; do { response = Prompt($\"{question} [{confirm}/{reject}] \"); isValidResponse = response.Equals(reject) || response.Equals(confirm); if (!isValidResponse) { Console.Error.WriteLine($\"Ugyldigt input: Du skal svare enten '{confirm}' eller '{reject}'\"); } } while (!isValidResponse); return response.Equals(confirm); } string Prompt(string message) { Console.Write($\"{message} \"); return Console.ReadLine(); } } }\rMateriale How to convert a string to a number Console.ReadLine Method Console.Write Method Console.WriteLine Method Console.Error Property Double.TryParse Method",
    "tags": [],
    "title": "Temperature Assessment",
    "uri": "/tech/c-sharp/temperature-assessment/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tags",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tag :: Game",
    "uri": "/tags/game/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e C#",
    "content": "Eksemplet viser hvordan man kan lave et “spil”, der går ud på at gætte det hemmelige tal.\n﻿using System; namespace guessing_game { class Program { static void Main(string[] args) { int min = 1; if (args.Length \u003e 1) { if (!int.TryParse(args[0], out min)) { Console.Error.WriteLine(\"Invalid Argument: minimum must be an integer.\"); return; } } int max = 1000; if (args.Length \u003e 0) { string maxStr = (args.Length \u003e 1)? args[1]: args[0]; if (!int.TryParse(maxStr, out max)) { Console.Error.WriteLine(\"Invalid Argument: maximum must be an integer.\"); return; } } if (!(min \u003c max)) { Console.Error.WriteLine(\"Invalid Argument: minimum must be greater than maximum\"); return; } GuessingGame game = new GuessingGame(min, max); do { game.play(); } while (game.wantsRematch()); } } class GuessingGame { private int min; private int max; public GuessingGame(int max) { this.min = 1; this.max = max; } public GuessingGame(int min, int max) { this.min = min; this.max = max; } public bool wantsRematch() { Console.Write(\"Prøv igen? (Y/n): \"); string answer = Console.ReadLine(); bool isAfirmative = \"y\".Equals(answer.ToLower()) || \"\".Equals(answer); return isAfirmative; } public void play() { Random randomNumberGenerator = new Random(); int secretNumber = randomNumberGenerator.Next(min, max); Console.WriteLine($\"Gæt et tal mellem {min} og {max}\"); bool done = false; while (!done) { Console.Write(\"Skriv dit gæt: \"); var guessLine = Console.ReadLine(); bool isValidInteger = int.TryParse(guessLine, out int guess); if (!isValidInteger) { Console.WriteLine(\"Dit gæt skal være et tal!\"); continue; } bool isInValidRange = min \u003c= guess \u0026\u0026 guess \u003c= max; if (!isInValidRange) { Console.WriteLine($\"Dit gæt skal være melem {min} og {max}!\"); continue; } if (guess == secretNumber) { Console.WriteLine($\"Rigtigt! Flot gættet. Det hemmelige tal er {secretNumber}\"); done = true; } else { if (guess \u003e secretNumber) { Console.WriteLine(\"Dit gæt er for højt\"); } if (guess \u003c secretNumber) { Console.WriteLine(\"Dit gæt er for lavt\"); } Console.WriteLine(\"Gæt igen\"); } } } } }\rMateriale How to convert a string to a number Random.Next Method Int32.TryParse Method",
    "description": "Eksemplet viser hvordan man kan lave et “spil”, der går ud på at gætte det hemmelige tal.\n﻿using System; namespace guessing_game { class Program { static void Main(string[] args) { int min = 1; if (args.Length \u003e 1) { if (!int.TryParse(args[0], out min)) { Console.Error.WriteLine(\"Invalid Argument: minimum must be an integer.\"); return; } } int max = 1000; if (args.Length \u003e 0) { string maxStr = (args.Length \u003e 1)? args[1]: args[0]; if (!int.TryParse(maxStr, out max)) { Console.Error.WriteLine(\"Invalid Argument: maximum must be an integer.\"); return; } } if (!(min \u003c max)) { Console.Error.WriteLine(\"Invalid Argument: minimum must be greater than maximum\"); return; } GuessingGame game = new GuessingGame(min, max); do { game.play(); } while (game.wantsRematch()); } } class GuessingGame { private int min; private int max; public GuessingGame(int max) { this.min = 1; this.max = max; } public GuessingGame(int min, int max) { this.min = min; this.max = max; } public bool wantsRematch() { Console.Write(\"Prøv igen? (Y/n): \"); string answer = Console.ReadLine(); bool isAfirmative = \"y\".Equals(answer.ToLower()) || \"\".Equals(answer); return isAfirmative; } public void play() { Random randomNumberGenerator = new Random(); int secretNumber = randomNumberGenerator.Next(min, max); Console.WriteLine($\"Gæt et tal mellem {min} og {max}\"); bool done = false; while (!done) { Console.Write(\"Skriv dit gæt: \"); var guessLine = Console.ReadLine(); bool isValidInteger = int.TryParse(guessLine, out int guess); if (!isValidInteger) { Console.WriteLine(\"Dit gæt skal være et tal!\"); continue; } bool isInValidRange = min \u003c= guess \u0026\u0026 guess \u003c= max; if (!isInValidRange) { Console.WriteLine($\"Dit gæt skal være melem {min} og {max}!\"); continue; } if (guess == secretNumber) { Console.WriteLine($\"Rigtigt! Flot gættet. Det hemmelige tal er {secretNumber}\"); done = true; } else { if (guess \u003e secretNumber) { Console.WriteLine(\"Dit gæt er for højt\"); } if (guess \u003c secretNumber) { Console.WriteLine(\"Dit gæt er for lavt\"); } Console.WriteLine(\"Gæt igen\"); } } } } }\rMateriale How to convert a string to a number Random.Next Method Int32.TryParse Method",
    "tags": [
      "Game"
    ],
    "title": "Guessing Game",
    "uri": "/tech/c-sharp/guessing-game/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tools",
    "content": "Når man skal arbejde med programering og softwareudvikling, er det ofte nyttigt at kunne anvende et kommandolinjeinterface, til nogle basale opgaver.\nNyttige kommandoer pwd (path to working directory) viser stien til den mappe man befinder sig i. cd (change directory) skifter til den mappe, der angives som argument. ls (list directory) viser indholdet i en mappe. mkdir (make directory) opretter en en mappe med det angivne navn. rmdir (remove directory) sletter en mappe. cat udskriver indholdet af en fil til skærmen. echo udskriver argumentet til skærmen date udskriver det aktuelle klokkeslet til skærmen touch opretter en fil med det angivne navn. Hvis filen allerede findes, opdateres ændringstidspunktet til det aktuelle klokkeslet. ^C (ctrl+c) afbryder et kørende program / kommando uden at vente på det afslutter af sig selv. Dette er nyttigt hvis man f.eks. kommer til at at lave en uendelig løkke. Omdirigering af output Her er et eksempel på hvordan man kan bruge omdirigering af output fra kommandoer (linjer der starter med ‘$’ er prompten hvor kommandoen skrives).\n$ date \u003e my-file.txt $ cat .\\my-file.txt Fri Sep 24 11:20:58 Rom, sommertid 2021 $ date \u003e\u003e my-file.txt $ date \u003e my-file.txt $ echo \"test af append to file\" \u003e\u003e .\\my-file.txt $ date \u003e\u003e my-file.txt $ cat .\\my-file.txt Fri Sep 24 11:21:19 Rom, sommertid 2021 test af append to file Fri Sep 24 11:21:58 Rom, sommertid 2021 $\rGit Her er nogle få kommandoer til håndtering af git depoter (repositories).\nOpsætning af git git config --global user.name \"FIRST_NAME LAST_NAME\" sætter navnet på brugeren af git globalt for alle depoter på maskinen. git config --global user.email \"user@example.com\" sætter email adressen på brugeren af git globalt for alle depoter på maskinen. Initialisering og Kloning git init opretter et depot. git clone [URL] opretter en klon af et depot fra f.eks. github. URL er der hvor depotet befinder sig. Dagligt arbejde med git git status viser status for det lokale depot. git add . tilføjer alle ændringer i arbejdsområdet rekursivt. git commit -m \"COMMIT MESSAGE HERE\" committer ind i det lokale depot. git pull henter og fletter ændringer ind fra en remote. git push skubber ændringer ud til en remote. git fetch henter ændringer fra remote uden at flette dem sammen automatisk. git merge [BRANCH] fletter ændringer fra BRANCH ind i den aktuelle gren (branch).",
    "description": "Når man skal arbejde med programering og softwareudvikling, er det ofte nyttigt at kunne anvende et kommandolinjeinterface, til nogle basale opgaver.\nNyttige kommandoer pwd (path to working directory) viser stien til den mappe man befinder sig i. cd (change directory) skifter til den mappe, der angives som argument. ls (list directory) viser indholdet i en mappe. mkdir (make directory) opretter en en mappe med det angivne navn. rmdir (remove directory) sletter en mappe. cat udskriver indholdet af en fil til skærmen. echo udskriver argumentet til skærmen date udskriver det aktuelle klokkeslet til skærmen touch opretter en fil med det angivne navn. Hvis filen allerede findes, opdateres ændringstidspunktet til det aktuelle klokkeslet. ^C (ctrl+c) afbryder et kørende program / kommando uden at vente på det afslutter af sig selv. Dette er nyttigt hvis man f.eks. kommer til at at lave en uendelig løkke. Omdirigering af output Her er et eksempel på hvordan man kan bruge omdirigering af output fra kommandoer (linjer der starter med ‘$’ er prompten hvor kommandoen skrives).",
    "tags": [],
    "title": "Command Line Basics",
    "uri": "/tools/command-line/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Project",
    "content": "Mastermind spillet. I dette projekt skal der laves en løsning der gør de muligt at dyste mod computeren i Mastermind.\nOpgave: Mastermind Bot Denne opgave går ud på at lave en discord bot som man kan dyste mod i “Mastermind”.\nDel 1: Discord bot (fundament) Lav en discord bot som beskrevet i disse guides:\nDiscord Bot tutorial Discord Bot The Coding Train video guide Del 2: Mastermind Bot (udvidelse) Lav en ny kommando i din discord bot, der gør det muligt at spille “Mastermind” mod computeren.\nStart med at studere reglerne til spillet. Kender du ikke spillet i forvejen, kan du med fordele spille et par spil vha. en af de mange apps, der er lavet. F.eks denne udgave af mastermind til Android, eller i en web udgave af mastermind.\nKravspecifikation Det skal være muligt at få hjælp til interaktion med spillet (e.g syntaks for gyldige kommandoer). Det skal være muligt at starte spillet. Computeren skal generere en hemmelig kode. Koden skal bestå af 4 ud af mulige 6 forskellige farver (eller tegn). Der må gerne forekomme gentagelser af den samme farve i koden. Det skal være muligt at afgive et gæt. Bot’en skal give tilbagemelding på hvert gæt bestående af Antal modtagne gæt. Gentagelse af det afgivne gæt Angivelse af antal rigtigt placerede farver Angivelse af antal rigtige farver Hvis man gætter koden, skal der gives tilbagemelding om at man har vundet. Hvis koden ikke er gættet efter 10 forsøg, har computeren vundet. Dette skal annonceres i svaret, og den hemmelige kode afsløres, så man kan kontrollere at alt er gået retfærdigt til. Ekstra ideer og nice to have funktioner Man skal have mulighed for at give op, få vist koden og starte forfra. Hold styr på hvor mange gange parterne har vundet. Her er et eksempel på hvordan interaktionen med programmet kan laves.\n!mm help Welcome to Mastermind! Guess the secrect code. Code consist of 4 numbers in the range 1 through 6. Show this help message !mm or !mm help Start / restart game !mm start Make a guess for the code 1234 !mm g 1234 The game response shows your guesses and provides feedback o : code contains number x : correct placement of number\r!mm start Starting new mastermind game, generated secrect code.\r!mm g 1234 1 : [1, 2, 3, 4] | ooo\r!mm g 1235 1 : [1, 2, 3, 4] | ooo 2 : [1, 2, 3, 5] | ooo\r!mm g 1236 1 : [1, 2, 3, 4] | ooo 2 : [1, 2, 3, 5] | ooo 3 : [1, 2, 3, 6] | oo\r!mm g 2354 1 : [1, 2, 3, 4] | ooo 2 : [1, 2, 3, 5] | ooo 3 : [1, 2, 3, 6] | oo 4 : [2, 3, 5, 4] | xooo\r!mm g 2543 1 : [1, 2, 3, 4] | ooo 2 : [1, 2, 3, 5] | ooo 3 : [1, 2, 3, 6] | oo 4 : [2, 3, 5, 4] | xooo 5 : [2, 5, 4, 3] | xxxx ### You win ### Secret code is: [2, 5, 4, 3]",
    "description": "Mastermind spillet. I dette projekt skal der laves en løsning der gør de muligt at dyste mod computeren i Mastermind.\nOpgave: Mastermind Bot Denne opgave går ud på at lave en discord bot som man kan dyste mod i “Mastermind”.\nDel 1: Discord bot (fundament) Lav en discord bot som beskrevet i disse guides:\nDiscord Bot tutorial Discord Bot The Coding Train video guide Del 2: Mastermind Bot (udvidelse) Lav en ny kommando i din discord bot, der gør det muligt at spille “Mastermind” mod computeren.",
    "tags": [],
    "title": "Mastermind",
    "uri": "/project/mastermind/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Project",
    "content": "Opgave: RPS CLI Lav et kommandobaseret program der gør det muligt at spille “Sten-saks-papir” mod computeren.\nProgrammet skal kunne tage mod simple input kommandoer, tolke betydningen, og vise dem i output som en “tegning” lavet med nogle ascii symboler, f.eks.:\nInput Betydning Symbol r sten 0 p papir — s saks \u003e8 Programmet skal også holde styr på hvor mange gange parterne har vundet.\nHvordan dette håndteres internt i programmet er op til programmøren at finde en god løsning på.\nHer er et eksempel på hvordan output kunne se ud.\nrock-paper-scissor $ .\\bin\\Debug\\netcoreapp3.1\\rock-paper-scissor.exe Welcome to RPS! Make your selection! Rock(r), Paper (p), Scissor (s)!? Result: \u003e8 vs 0 =\u003e Computer WINS Score: Player(0) vs Computer(1) Press any key to continue or ESC to quit Make your selection! Rock(r), Paper (p), Scissor (s)!? Result: 0 vs 0 =\u003e TIE Score: Player(0) vs Computer(1) Press any key to continue or ESC to quit Make your selection! Rock(r), Paper (p), Scissor (s)!? Result: --- vs 0 =\u003e Player WINS Score: Player(1) vs Computer(1) Press any key to continue or ESC to quit\rOpgave: RPS Discord Bot Denne opgave går ud på at lave en discord bot som man kan dyste mod i “sten-saks-papir”.\nDel 1: Discord bot (fundament) Lav en discord bot som beskrevet i disse guides:\nDiscord Bot tutorial Discord Bot The Coding Train video guide Del 2: Sten-Saks-Papir (udvidelse) Lav en ny kommando i din discord bot, der gør det muligt at spille “Sten-Saks-Papir” mod computeren. Hold styr på hvor mange gange parterne har vundet.\nHer er et eksempel på hvordan interaktionen med programmet kan laves.\n!rps scissor Result: \u003e8 vs 0 =\u003e Computer WINS Score: Player(0) vs Computer(1)\r!rps rock Result: 0 vs 0 =\u003e TIE Score: Player(0) vs Computer(1)\r!rps paper Result: --- vs 0 =\u003e Player WINS Score: Player(1) vs Computer(1)",
    "description": "Opgave: RPS CLI Lav et kommandobaseret program der gør det muligt at spille “Sten-saks-papir” mod computeren.\nProgrammet skal kunne tage mod simple input kommandoer, tolke betydningen, og vise dem i output som en “tegning” lavet med nogle ascii symboler, f.eks.:\nInput Betydning Symbol r sten 0 p papir — s saks \u003e8 Programmet skal også holde styr på hvor mange gange parterne har vundet.\nHvordan dette håndteres internt i programmet er op til programmøren at finde en god løsning på.",
    "tags": [],
    "title": "Rock Paper Scissor",
    "uri": "/project/rock-paper-scissor/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Circle Collision",
    "content": "",
    "description": "",
    "tags": [],
    "title": "p5 circle collision demo",
    "uri": "/tech/p5js/circle-collision/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Dette er et eksempel på, hvordan man kan benytte p5.Vector klassen til at simulere kollision mellem 2 cirkler.\nDen resulterende hastighedsvektor efter kollisionen beregnes ved at benytte reflektion om normalvektoren til de sammenstødende cirkelperiferier.\nReflektionen kan beregnes ved hjælp af formlen\n$$\\vec r = \\vec d - 2 (\\vec d \\cdot \\vec n) \\vec n$$\nhvor \\( \\vec d \\) er den indkommende vektor, \\( \\vec n = \\frac{\\vec n}{|\\vec n|}\\) er en normaliseret normal-vektor til cirkelperiferien, og \\( \\vec r \\) er reflektionen af \\( \\vec d \\) omkring \\( \\vec n \\).\nSe også implementationen af reflect().\nUdledning af formlen \\(\\vec n\\) er en normal vektor til overfladen, og denne er normaliseret dvs. $$\\vec n = \\frac{\\vec n}{|\\vec n|}$$\nProjektionen \\(\\vec p\\) af \\(\\vec d\\) på overfladens normalvektor \\(\\vec n\\) findes ved hjælp af skalar produktet $$\\vec p = (\\vec d \\cdot \\vec n)\\vec n$$\nVektoren \\(\\vec e\\) bruges som hjælp i beregningen\n$$\\vec e = \\vec d - \\vec p$$\nDa indfaldsvinkel og udfaldsvinkel er ens, og desuden er størrelsen af den indgående vektor og reflektionen ens \\(|\\vec d| = |\\vec r|\\) fås\n$$\\vec r = -\\vec d + 2\\vec e$$\nDerefter kan formlerne kombineres\n$$ \\begin{aligned} \\vec r \u0026= -\\vec d + 2(\\vec d - \\vec p) \\\\ \u0026= -\\vec d + 2(\\vec d - (\\vec d \\cdot \\vec n)\\vec n) \\\\ \u0026= -\\vec d + 2\\vec d - 2(\\vec d \\cdot \\vec n)\\vec n \\\\ \u0026= \\vec d - 2(\\vec d \\cdot \\vec n)\\vec n \\end{aligned} $$\nStruktur af programmet Eksemplet består er opdelt i 3 filer, som er inkluderet i html filen således:\n\u003cscript src=\"ball.js\"\u003e\u003c/script\u003e \u003cscript src=\"bat.js\"\u003e\u003c/script\u003e \u003cscript src=\"sketch.js\"\u003e\u003c/script\u003e\rDet overordnede programflow styres i sketch.js.\nlet ball; let bat; function setup() { createCanvas(windowWidth, windowHeight); ball = new Ball(width / 2, height / 2) bat = new Bat(0,0) } function draw() { background(220); ball.render(); ball.update(); bat.render(); bat.update(); bat.collision(ball) }\rFilen ball.js indeholder en klassen Ball.\nclass Ball { constructor(x, y) { this.pos = createVector(x, y) this.vel = createVector(12, 3) this.r = 40 this.isColliding = false this.collisionHandled = false } update() { this.pos.add(this.vel); this.edges(); } edges() { const x = this.pos.x; if (x - this.r \u003c 0 || x + this.r \u003e= width) { this.vel.x = -this.vel.x } const y = this.pos.y; if (y - this.r \u003c 0 || y + this.r \u003e= height) { this.vel.y = -this.vel.y } } render() { push(); if (this.isColliding) { strokeWeight(5) } if (this.collisionHandled) { fill('green') } circle(this.pos.x, this.pos.y, this.r * 2); pop(); } }\rFilen bat.js indeholder en klassen Bat.\nclass Bat { constructor(x, y) { this.pos = createVector(x, y) this.r = 60 } update() { this.pos = createVector(mouseX, mouseY) } render() { push(); fill('red') circle(this.pos.x, this.pos.y, this.r * 2); pop(); } collision(other) { const distance = this.pos.dist(other.pos); other.isColliding = distance \u003c this.r + other.r if (other.isColliding) { if (!other.collisionHandled) { this._resolveCollision(other); other.collisionHandled = true; } } else { other.collisionHandled = false; } } _resolveCollision(other) { const surfaceNormal = p5.Vector.sub(this.pos, other.pos); other.vel.reflect(surfaceNormal); } }\rBemærk hvordan reflect() benyttes til beregning af hastigheden efter kollisionen.\nDemo Prøv det kørende eksempel\nMateriale setup() draw() createCanvas() fill() push() pop() circle() createVector() p5.Vector p5.Vector.reflect() p5.Vector.sub() p5.Vector.dist()",
    "description": "Dette er et eksempel på, hvordan man kan benytte p5.Vector klassen til at simulere kollision mellem 2 cirkler.\nDen resulterende hastighedsvektor efter kollisionen beregnes ved at benytte reflektion om normalvektoren til de sammenstødende cirkelperiferier.\nReflektionen kan beregnes ved hjælp af formlen\n$$\\vec r = \\vec d - 2 (\\vec d \\cdot \\vec n) \\vec n$$\nhvor \\( \\vec d \\) er den indkommende vektor, \\( \\vec n = \\frac{\\vec n}{|\\vec n|}\\) er en normaliseret normal-vektor til cirkelperiferien, og \\( \\vec r \\) er reflektionen af \\( \\vec d \\) omkring \\( \\vec n \\).",
    "tags": [],
    "title": "Circle Collision",
    "uri": "/tech/p5js/circle-collision/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Dette eksempel viser hvordan man kan tegne figurer interaktivt ved at opbygge lister af punkter der forbindes.\nListen af punkter opbygges ved at klikke med musen, og den fremkomne figur kan føjes til listen og eller fjernes igen med keyboard kommandoer.\nlet currentShape = []; let shapes = []; function setup() { createCanvas(windowWidth, windowHeight); loadData(); } function draw() { background(0); renderHelp(); renderShapes(); renderCurrentShape(); } function renderHelp() { push(); fill(220) textSize(20); text(\"k : Add shape\", 30, 30); text(\"j : Revert last added shape\", 30, 55); text(\"u : Undo last point\", 30, 80); text(\"r : Clear drawing\", 30, 105); pop(); } function renderShapes() { push(); for (const shape of shapes) { noFill(); stroke('greenyellow'); strokeWeight(2); beginShape(); curveVertex(shape[0].x, shape[0].y); for (const p of shape) { curveVertex(p.x, p.y); } const lastPoint = shape[shape.length - 1]; curveVertex(lastPoint.x, lastPoint.y); endShape(); } pop(); } function renderCurrentShape() { push(); noFill(); stroke('red') strokeWeight(5) for (const p of currentShape) { point(p.x, p.y); } strokeWeight(2) beginShape(); for (const p of currentShape) { vertex(p.x, p.y); } endShape(); pop(); } function clearDrawing() { shapes = []; currentShape = []; } function addShape() { const aCopy = currentShape.slice(); shapes.push(aCopy); currentShape = []; } function mousePressed() { const p = createVector(mouseX, mouseY); currentShape.push(p); } function keyPressed() { if (key == 'r') { clearDrawing(); } if (key == 'j') { if (0 \u003c shapes.length) { currentShape = shapes.pop(); } } if (key == 'u') { currentShape.pop(); } if (key == 'k') { addShape(); } if (key == 'd') { loadData(); } } function loadData() { shapes = [ [ new p5.Vector(210, 165), new p5.Vector(119, 198), new p5.Vector(96, 266), new p5.Vector(122, 334), new p5.Vector(200, 388), new p5.Vector(311, 374), new p5.Vector(330, 273), new p5.Vector(309, 189), new p5.Vector(214, 141), new p5.Vector(175, 147), new p5.Vector(153, 124), ], [ new p5.Vector(184, 225), new p5.Vector(165, 231), new p5.Vector(166, 257), new p5.Vector(182, 259), new p5.Vector(200, 240), new p5.Vector(189, 226), ], [ new p5.Vector(240, 232), new p5.Vector(238, 250), new p5.Vector(253, 266), new p5.Vector(270, 250), new p5.Vector(264, 231), new p5.Vector(249, 225), new p5.Vector(241, 226), ], [ new p5.Vector(165, 300), new p5.Vector(190, 321), new p5.Vector(242, 333), new p5.Vector(271, 321), new p5.Vector(280, 302), ], ]; // Center the shape horizontally const xOffset = width / 2 - 220; for (const shape of shapes) { for (const p of shape) { p.x += xOffset; } } }\rDemo Prøv det kørende eksempel\nMateriale P5js setup() draw() createCanvas() fill() beginShape() text() textSize() noFill() stroke() strokeWeight() curveVertex() vertex() endShape() push() pop() createVector() p5.Vector Arrays \u0026 iteration Array-Methods pop/push, shift/unshift - Javascript Tutorial Array.prototype.pop() Array.prototype.push() Array.prototype.slice() for..of loops",
    "description": "Dette eksempel viser hvordan man kan tegne figurer interaktivt ved at opbygge lister af punkter der forbindes.\nListen af punkter opbygges ved at klikke med musen, og den fremkomne figur kan føjes til listen og eller fjernes igen med keyboard kommandoer.\nlet currentShape = []; let shapes = []; function setup() { createCanvas(windowWidth, windowHeight); loadData(); } function draw() { background(0); renderHelp(); renderShapes(); renderCurrentShape(); } function renderHelp() { push(); fill(220) textSize(20); text(\"k : Add shape\", 30, 30); text(\"j : Revert last added shape\", 30, 55); text(\"u : Undo last point\", 30, 80); text(\"r : Clear drawing\", 30, 105); pop(); } function renderShapes() { push(); for (const shape of shapes) { noFill(); stroke('greenyellow'); strokeWeight(2); beginShape(); curveVertex(shape[0].x, shape[0].y); for (const p of shape) { curveVertex(p.x, p.y); } const lastPoint = shape[shape.length - 1]; curveVertex(lastPoint.x, lastPoint.y); endShape(); } pop(); } function renderCurrentShape() { push(); noFill(); stroke('red') strokeWeight(5) for (const p of currentShape) { point(p.x, p.y); } strokeWeight(2) beginShape(); for (const p of currentShape) { vertex(p.x, p.y); } endShape(); pop(); } function clearDrawing() { shapes = []; currentShape = []; } function addShape() { const aCopy = currentShape.slice(); shapes.push(aCopy); currentShape = []; } function mousePressed() { const p = createVector(mouseX, mouseY); currentShape.push(p); } function keyPressed() { if (key == 'r') { clearDrawing(); } if (key == 'j') { if (0 \u003c shapes.length) { currentShape = shapes.pop(); } } if (key == 'u') { currentShape.pop(); } if (key == 'k') { addShape(); } if (key == 'd') { loadData(); } } function loadData() { shapes = [ [ new p5.Vector(210, 165), new p5.Vector(119, 198), new p5.Vector(96, 266), new p5.Vector(122, 334), new p5.Vector(200, 388), new p5.Vector(311, 374), new p5.Vector(330, 273), new p5.Vector(309, 189), new p5.Vector(214, 141), new p5.Vector(175, 147), new p5.Vector(153, 124), ], [ new p5.Vector(184, 225), new p5.Vector(165, 231), new p5.Vector(166, 257), new p5.Vector(182, 259), new p5.Vector(200, 240), new p5.Vector(189, 226), ], [ new p5.Vector(240, 232), new p5.Vector(238, 250), new p5.Vector(253, 266), new p5.Vector(270, 250), new p5.Vector(264, 231), new p5.Vector(249, 225), new p5.Vector(241, 226), ], [ new p5.Vector(165, 300), new p5.Vector(190, 321), new p5.Vector(242, 333), new p5.Vector(271, 321), new p5.Vector(280, 302), ], ]; // Center the shape horizontally const xOffset = width / 2 - 220; for (const shape of shapes) { for (const p of shape) { p.x += xOffset; } } }\rDemo Prøv det kørende eksempel",
    "tags": [],
    "title": "Shape Drawing",
    "uri": "/tech/p5js/shape-drawing/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Shape Drawing",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Shape Drawing demo",
    "uri": "/tech/p5js/shape-drawing/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Node.js",
    "content": "Dette eksempel viser hvordan man kan lave en Discord bot, som kan reagere på kommandoer i en tekstkanal.\nOprettelse af Discord Application og Bot Start med at oprette en application i Discord udvikler portalen.\nDerefter skal der tilføjes en Bot til din application.\nFor at give din bot adgang til din discord server, kan du bruge denne URL:\nhttps://discord.com/oauth2/authorize?client_id=YOUR_CLIENT_ID\u0026scope=bot\rBemærk at YOUR_CLIENT_ID skal erstattes med det relevante id for din specifikke bot. Du kan også få en korrekt URL genereret ved at gå ind under OAuth2 i menuen, og vælge bot under scopes.\nEfter dette er forarbejdet gjort og du er klar til at starte på koden til din bot.\nDer er mere information om de tekniske detaljer på Discord Developer Portalen.\nOpsætning af node projekt Først skal der laves et projekt så node kan finde ud af at køre programmet, og har en package.json fil til at holde styr på projektet og afhængigheder af biblioteksmoduler.\nStart med at lave en mappe, som kan indeholde dit projekt. Kald den f.eks. discord-bot. I denne mappe skal du køre følgende kommando, for at oprette projekt filen package.json.\nnpm init\rUdfyld passende værdier som svar på de spørgsmål programmet stiller. Jeg foreslår at ændre din main fil til bot.js.\nDernæst har du mulighed for at installere de pakker, der skal bruges i projektet som afhængigheder. Dette gøres med disse kommandoer.\nnpm install discord.js npm install dotenv npm install axios npm install cowsay npm install random-fortune\rNår programmet skal startes kan det gøres med kommandoen.\nnode bot.js\rFor at undgå at huske på hvilken fil der skal køres for at starte programmet, kan man tilføje en start action i scripts sectionen i package.json. Derefter kan du køre din bot, med denne kommando.\nnpm start\rHer er indholdet den fulde af package.json.\n{ \"name\": \"discordbot\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"bot.js\", \"scripts\": { \"start\": \"node bot.js\", \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\" }, \"author\": \"\", \"license\": \"ISC\", \"dependencies\": { \"axios\": \"^0.26.1\", \"cowsay\": \"^1.5.0\", \"discord.js\": \"^13.6.0\", \"dotenv\": \"^16.0.0\", \"random-fortune\": \"^0.2.0\" } }\rBot koden Hovedprogrammet til robotten benyttes sig af pakken discord.js. Koden er forholdsvis kortfattet, og placeres i filen bot.js. Bemærk hvordan kommandohåndteringen er uddelegeret til et andet modul.\nrequire('dotenv').config(); const TOKEN = process.env.TOKEN; const {Client, Intents} = require('discord.js'); const config = {intents:[Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MESSAGES]}; const client = new Client(config); client.login(TOKEN); client.on('ready', () =\u003e { console.log(`Logged in as ${client.user.tag}!`); }); const commandHandler = require('./commands'); client.on('message', commandHandler); console.log('Beep beep! 🤖');\rKommandofortolker Håndtering af de indkomne kommandoer er placeret i filen commands.js. Bemærk hvordan der uden større ændringer kan tilføjes flere kommandoer til systemet.\nconst serverID = process.env.SERVERID; const channelID = process.env.CHANNELID; const help = (msg, args) =\u003e { const reply = `Avaliable commands are: !help : Show this help message !ping : Responds with pong !hmm : Get a random response !dog : Shows a dog !toast : Get a quote from the toaster `; msg.channel.send(reply); }; const dog = require('./commands/dog.js'); const hmm = require('./commands/hmm.js'); const ping = require('./commands/ping.js'); const toast = require('./commands/toast.js'); const commands = { help, hmm, dog, ping, toast }; module.exports = async function (msg) { // Only for this server and this channel if (msg.guild.id === serverID \u0026\u0026 msg.channel.id === channelID) { // Handle command let tokens = msg.content.split(' '); let command = tokens.shift(); if (command.charAt(0) === '!') { command = command.substring(1); // check that command exists if (commands.hasOwnProperty(command)) { commands[command](msg, tokens); console.log(`got valid command, '${command}'`); } else { console.log(`got invalid command: '${command}', showing help`); help(msg, tokens); } } } };\rBrug af miljøvariabler For at undgå at kode login tokens, server og kanal id’er ind i kildeteksten til programmet, benyttes pakken dotenv, således at disse kan hentes fra miljøvariable i stedet. Konkrete værdier placeres i en hjælpefil sammen med koden i dette format. Filen skal navngives .env.\nSERVERID=replace_with_server_id CHANNELID=replace_with_channel_id TOKEN=replace_with_secret_bot_token\rPladsholderne skal erstattes med konkrete værdier fra den server bot’en skal være tilgængelig på.\nUdelad private indstillinger i git For at undgå utilsigtet deling af disse oplysninger er det en god ide at undlade at tilføje filen i git. Derfor tilføjes den til filen .gitignore, der f.eks kan se således ud.\nnode_modules/ .env\rDiscord specifikke værdier De omtalte miljøvariabler skal som nævnt sættes til konkrete værdier, der afhænger af hvilken server/guild bot’en skal fungere sammen med.\nFor at kunne find de oplysninger, der skal indsættes i .env filen, er det nødvendigt at aktivere udviklertilstanden i discord.\nGå til brugerindstillinger \u003e udseende Scroll ned til avanceret Tænd for udviklertilstand Server ID kan nu tilgås sådan: højre-klik på serverens icon, vælg Kopiér ID i menuen.\nLigeledes kan Kanal ID fås sådan: højre-klik på tekst-kanalen, vælg Kopiér ID i menuen.\nBot Kommandoer For at få en overskuelig struktur i koden er de enkelte kommandoer, som bot’en kan reagere på, implementeret i hver sin fil i mappen commands/.\n!ping Denne kommando svarer tilbage med pong. Den er implementeret i filen commands/ping.js. Bemærk at der ved at bruge funktionen reply(), automatisk insættes en @mention til den bruger der har aktiveret bot’en.\nmodule.exports = (msg, args) =\u003e { msg.reply('pong!'); };\r!hmm Denne kommando svarer tilbage med en besked tilfældigt udvalgt fra en liste med svarmuligheder. Den er implementeret i filen commands/hmm.js.\nconst ufoUrl = 'https://i.pinimg.com/originals/39/b2/34/39b234d75c67da28abdcb38b1b4cf649.png'; const replies = [ ufoUrl, '🤖 says go 🏄 and ⛷️', '(╯°□°）╯︵ ┻━┻', '¯\\_(ツ)_/¯', 'Så er der 🍰' ]; module.exports = (msg, args) =\u003e { const index = Math.floor(Math.random() * replies.length); console.log(replies[index]); msg.channel.send(replies[index]); };\r!dog Denne kommando svarer tilbage med et tilfældigt udvalgt billede af en hund, som hentes fra et web-api. Den er implementeret i filen commands/dog.js. Kommandoen benytter pakken axios til at udføre kald til web-api’et.\nconst axios = require('axios'); const url = \"https://dog.ceo/api/breeds/image/random\"; module.exports = async (msg, args) =\u003e { const response = await axios.get(url); const dogImgUrl = response.data.message; console.log(`dog image url: ${dogImgUrl}`); if (\"success\" === response.data.status) { msg.channel.send(dogImgUrl); } };\r!toast Denne kommando svarer tilbage med et tilfældigt udvalgt citat, præsenteret af en toaster. Kommandoen benytter pakken random-fortune til at generere tilfældigt udvalgte citater. Desuden benyttes pakken cowsay til den visuelle præsentation af tekst output som ascii-art. Kommandoen er implementeret i filen commands/toast.js.\nconst fortune = require('random-fortune'); const cowsay = require(\"cowsay\"); module.exports = (msg, args) =\u003e { const fortuneText = fortune.fortune(); const options = { text : fortuneText, f: 'toaster', W: 50 }; const res = cowsay.say(options); msg.channel.send(`\\n\\`${res}\\``); };\rHer er et eksempelt på et svar fra robotten.\n_________________________________________ / \"Buy land. They've stopped making it.\" \\ \\ -- Mark Twain / ----------------------------------------- \\ .___________. \\ | | \\ ___________. | | /~\\ | / __ __ /| | _ _ |_| | / /:/ /:/ / | !________|__! / /:/ /:/ / | | / /:/ /:/ / |____________! / /:/ /:/ / | / /:/ /:/ / | / ~~ ~~ / | |~~~~~~~~~~| | | :: | / | == | / | :: | / | :: | / | :: @ | / !__________!/\rAfprøvning Nu burde bot’en være funktionel. Den kan som tidligere nævnt startes med kommandoen npm start. Husk at det er nødvendigt at genstarte programmet, hvis der laves ændringer i det.\nMateriale Discord Discord Bot How to create a Discord bot with discord.js! Coding Train Discord Developer Portal Discord.js Discord.js Guide Discord : server.id Discord : channel.id Coding train discord bot series Discord Bot - The Coding Train Discord Bots 1: Introduction Discord Bots 2: Discord Developer Portal Discord Bots 3: Coding a Bot with discord.js Discord Bots 4: Hiding API Keys with .env Discord Bots 5: Posting GIFs Discord Bots 6: Building a Command Handler Javascript - MDN Web Docs hasOwnProperty Template literals : Multi-line strings NPM pakker axios discord.js dotenv cowsay random-fortune Json API Random dogs api docs Random dogs api",
    "description": "Dette eksempel viser hvordan man kan lave en Discord bot, som kan reagere på kommandoer i en tekstkanal.\nOprettelse af Discord Application og Bot Start med at oprette en application i Discord udvikler portalen.\nDerefter skal der tilføjes en Bot til din application.\nFor at give din bot adgang til din discord server, kan du bruge denne URL:\nhttps://discord.com/oauth2/authorize?client_id=YOUR_CLIENT_ID\u0026scope=bot\rBemærk at YOUR_CLIENT_ID skal erstattes med det relevante id for din specifikke bot. Du kan også få en korrekt URL genereret ved at gå ind under OAuth2 i menuen, og vælge bot under scopes.",
    "tags": [],
    "title": "Discord Bot",
    "uri": "/tech/node/discord-bot/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Node.js \u003e Web Server",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Demo",
    "uri": "/tech/node/web-server/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Node.js",
    "content": "Dette er et eksempel på en simpel web-server, lavet med node js og det ofte benyttede web framework express. Ved at benytte pakker fra npm, kan man ret nemt lave systemet uden at skulle programmere alt op fra grunden.\nOpsætning af projekt Først skal der laves et projekt så node kan finde ud af at køre programmet, og har en package.json fil til at holde styr på projektet og afhængigheder af biblioteksmoduler.\nStart med at lave en mappe, som kan indeholde dit projekt. Kald den f.eks. web-server. I denne mappe skal du køre følgende kommando, for at oprette projekt filen package.json.\nnpm init\rUdfyld passende værdier som svar på de spørgsmål programmet stiller. Jeg foreslår at ændre din main fil til server.js.\nDernæst har du mulighed for at installere afhængigheder.\nnpm install express\rDu burde nu have en package.json fil, der ser nogenlunde sådan ud:\n{ \"name\": \"web-server-demo\", \"version\": \"1.0.0\", \"description\": \"Demo web server\", \"main\": \"server.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\" }, \"author\": \"\", \"license\": \"ISC\", \"dependencies\": { \"express\": \"^4.17.1\" } }\rBemærk at installerede pakker er listet under afhængigheder.\nSimple server med output Derefter skal du oprette filen server.js med følgende indhold.\nconst express = require('express') const app = express() const port = 3000 app.get('/', (req, res) =\u003e { res.send('Hello World!') }) app.listen(port, () =\u003e { console.log(`Example app listening at http://localhost:${port}`) })\rNu kan du køre eksemplet med denne kommando:\nnode server.js\rÅben din browser og gå til http://localhost:3000. Her vil du se en side der blot indeholder teksten Hello, World!.\nSom du sikkert har bemærket er der ikke noget html på siden. Ved at ændre lidt på serveren kan vi indsætte et par tags således.\nconst express = require('express') const app = express() const port = 3000 app.get('/', (req, res) =\u003e { res.send('\u003chtml\u003e\u003cbody\u003e\u003ch1\u003eHello, World!\u003c/h1\u003e\u003c/body\u003e\u003c/html\u003e') }) app.listen(port, () =\u003e { console.log(`Example app listening at http://localhost:${port}`) })\rHusk at genstarte serveren i terminalen, og genindlæse siden i browseren for at se ændringen.\nDet bliver hurtigt unødvendigt besværligt at skrive html indholdet midt i server koden. Derfor ændrer vi serveren til at læse det statiske indhold fra filer i en mappe på harddisken.\nconst express = require('express') const app = express() const port = 3000 app.use(express.static(__dirname + \"/public\")); app.listen(port, () =\u003e { console.log(`Example app listening at http://localhost:${port}`) })\rOpret en mappe med navnet public, i samme bibliotek som server.js.\nNu kan vi oprette alle de statiske filer og mapper der ønskes gjort tilgængelige på webserveren, ved at placere dem i mappen public.\nSom eksempel kan vi lave en forside, ved at lave filen public/index.html, og give den følgende indhold.\n\u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eMin Side\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eHej Verden\u003c/h1\u003e \u003cp\u003eVelkommen til express js webserver server lyn kursus.\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e\rHerefter er det blot fantasien, der sætter grænser for indholdet. Måske har du brug for at læse en kort introduktion til HTML eller CSS inden du går i gang.\nMateriale Node npm - Node Package Manager Express Express - Hello world example express - nmp package Introduktion til HTML Introduktion til CSS",
    "description": "Dette er et eksempel på en simpel web-server, lavet med node js og det ofte benyttede web framework express. Ved at benytte pakker fra npm, kan man ret nemt lave systemet uden at skulle programmere alt op fra grunden.\nOpsætning af projekt Først skal der laves et projekt så node kan finde ud af at køre programmet, og har en package.json fil til at holde styr på projektet og afhængigheder af biblioteksmoduler.",
    "tags": [],
    "title": "Web Server",
    "uri": "/tech/node/web-server/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Node.js \u003e Webrtc Server",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Demo",
    "uri": "/tech/node/webrtc-server/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Node.js",
    "content": "Dette er eksempel viser hvordan man kan streame indholdet af et html canvas element (en p5js sketch) til en anden maskine. Streaming delen håndteres af WebRTC, og etablering af forbindelsen håndteres ved hjælp af Socket.io.\nOpsætning af projekt Først skal der laves et projekt så node kan finde ud af at køre programmet, og har en package.json fil til at holde styr på projektet og afhængigheder af biblioteksmoduler.\nStart med at lave en mappe, som kan indeholde dit projekt. Kald den f.eks. webrtc-server. I denne mappe skal du køre følgende kommando, for at oprette projekt filen package.json.\nnpm init\rUdfyld passende værdier som svar på de spørgsmål programmet stiller. Jeg foreslår at ændre din main fil til server.js.\nDernæst har du mulighed for at installere disse afhængigheder.\nnpm install express npm install socket.io\rIndsæt en start action i script sektionen.\nDu burde nu have en package.json fil, der ser nogenlunde sådan ud:\n{ \"name\": \"webrtccanvasbroadcast\", \"version\": \"1.0.0\", \"description\": \"Example of streaming canvas content using WebRTC\", \"main\": \"server.js\", \"scripts\": { \"start\": \"node server.js\", \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\" }, \"author\": \"\", \"license\": \"ISC\", \"dependencies\": { \"express\": \"^4.17.1\", \"socket.io\": \"^3.1.0\" } }\rBemærk de to pakker der er listet under afhængigheder.\nServer De statiske web-resourcer placeres i mappen public, og de gøres tilgængelige på samme måde som i eksemplet med den simple web server.\nDerudover består serveren af en række endpoints, der håndterer socket.io beskeder. Dette er nødvendigt for at kunne styre transmission af videostrømmen, da dette ikke er indbygget i WebRTC.\nKoden til serveren placeres i filen server.js.\nconst express = require(\"express\"); const app = express(); let broadcaster; const port = 4000; const http = require(\"http\"); const server = http.createServer(app); const io = require(\"socket.io\")(server); app.use(express.static(__dirname + \"/public\")); io.on(\"error\", e =\u003e console.log(e)); io.on(\"connection\", socket =\u003e { socket.on(\"broadcaster\", () =\u003e { broadcaster = socket.id; console.log(`Broadcaster id: ${broadcaster}`) socket.broadcast.emit(\"broadcaster\"); }); socket.on(\"watcher\", () =\u003e { console.log(`Watcher id: ${socket.id}`) socket.to(broadcaster).emit(\"watcher\", socket.id); }); socket.on(\"offer\", (id, message) =\u003e { console.log(`Offer id: ${socket.id}, message: ${message}`) socket.to(id).emit(\"offer\", socket.id, message); }); socket.on(\"answer\", (id, message) =\u003e { console.log(`Answer id: ${socket.id}, message: ${message}`) socket.to(id).emit(\"answer\", socket.id, message); }); socket.on(\"candidate\", (id, message) =\u003e { console.log(`Candidate id: ${socket.id}, message: ${message}`) socket.to(id).emit(\"candidate\", socket.id, message); }); socket.on(\"disconnect\", () =\u003e { console.log(`Disconnect id: ${socket.id}`) socket.to(broadcaster).emit(\"disconnectPeer\", socket.id); }); }); server.listen(port, () =\u003e console.log(`Server is running on port ${port}`));\rNår du ønsker at starte serveren, kan det gøres med kommandoen.\nnpm start\rAfsender af video stream For at have noget at sende afsted laves en sketch ved hjælp af p5js, der streames til modtagerne med WebRTC.\nTegn på canvas Der laves en sketch, der tegner noget på det canvas element, som skal transmitteres. I eksemplet tegnes blot en rød cirkel med sort omrids på musens position. Dette laves i filen public/broadcast/sketch.js.\nlet stream; function setup() { // Capture the canvas content as a stream const c = createCanvas(400, 400); const htmlCanvas = c.elt; stream = htmlCanvas.captureStream(); gotStream(stream); } function draw() { background(220); // Draw a red circle at the position of the mouse fill('red'); strokeWeight(5); circle(mouseX, mouseY, 50); }\rStyring af video stream For at kunne håndtere WebRTC forbindelsen kommunikeres med serveren via Socket.io.\nKlient-delen der styrer afsendelsen laves i public/broadcast/webrtc.js\nconst peerConnections = {}; const config = { iceServers: [ { \"urls\": \"stun:stun.l.google.com:19302\", }, ] }; const socket = io.connect(window.location.origin); socket.on(\"answer\", (id, description) =\u003e { peerConnections[id].setRemoteDescription(description); }); socket.on(\"watcher\", id =\u003e { const peerConnection = new RTCPeerConnection(config); peerConnections[id] = peerConnection; let stream = window.stream; stream.getTracks().forEach(track =\u003e peerConnection.addTrack(track, stream)); peerConnection.onicecandidate = event =\u003e { if (event.candidate) { socket.emit(\"candidate\", id, event.candidate); } }; peerConnection .createOffer() .then(sdp =\u003e peerConnection.setLocalDescription(sdp)) .then(() =\u003e { socket.emit(\"offer\", id, peerConnection.localDescription); }); }); socket.on(\"candidate\", (id, candidate) =\u003e { peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate)); }); socket.on(\"disconnectPeer\", id =\u003e { peerConnections[id].close(); delete peerConnections[id]; }); window.onunload = window.onbeforeunload = () =\u003e { socket.close(); }; function gotStream(stream) { window.stream = stream; socket.emit(\"broadcaster\"); } function handleError(error) { console.error(\"Error: \", error); }\rVisning i browser Javascript koden kan ikke stå alene. For at kunne eksekvere den i browseren bliver den indsat på en simpel web side i filen public/broadcast/index.html.\n\u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eVideo stream - Broadcaster\u003c/title\u003e \u003cscript src=\"/p5lib/p5.min.js\"\u003e\u003c/script\u003e \u003cscript src=\"/p5lib/p5.sound.min.js\"\u003e\u003c/script\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"../styles.css\"\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eVideo stream - Broadcaster\u003c/h1\u003e \u003cscript src=\"sketch.js\"\u003e\u003c/script\u003e \u003cscript src=\"/socket.io/socket.io.js\"\u003e\u003c/script\u003e \u003cscript src=\"webrtc.js\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e\rBemærk at filen /socket.io/socket.io.js genereres automatisk af serveren når socket.io pakken benyttes.\nFor at kunne tegne på canvas med p5js i public/broadcast/sketch.js er det nødvendigt at inkludere p5 biblioteksfilerne. Disse er placeret i public/p5lib.\npublic/p5lib/p5.min.js public/p5lib/p5.sound.min.js Der benyttes også en smule css som placeres i public/styles.css.\nhtml, body { margin: 0; padding: 0; } canvas { display: block; } video { width: 400px; height: 400px; background-color: black; }\rModtager af video stream Den modtagende ende af videostrømmen laves også som en simpel webside. Det er den man skal se, når man besøger serveren.\nLav filen public/index.html med dette indhold.\n\u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eVideo stream - Viewer\u003c/title\u003e \u003clink href=\"/styles.css\" rel=\"stylesheet\" /\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eVideo stream - Viewer\u003c/h1\u003e \u003cvideo playsinline autoplay muted\u003e\u003c/video\u003e \u003cscript src=\"/socket.io/socket.io.js\"\u003e\u003c/script\u003e \u003cscript src=\"/watch.js\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e\rTil at styre modtagelsen af WebRTC strømmen benyttes scriptet public/watch.js med dette indhold.\nlet peerConnection; const config = { iceServers: [ { \"urls\": \"stun:stun.l.google.com:19302\", }, // { // \"urls\": \"turn:TURN_IP?transport=tcp\", // \"username\": \"TURN_USERNAME\", // \"credential\": \"TURN_CREDENTIALS\" // } ] }; const socket = io.connect(window.location.origin); const video = document.querySelector(\"video\"); socket.on(\"offer\", (id, description) =\u003e { peerConnection = new RTCPeerConnection(config); peerConnection .setRemoteDescription(description) .then(() =\u003e peerConnection.createAnswer()) .then(sdp =\u003e peerConnection.setLocalDescription(sdp)) .then(() =\u003e { socket.emit(\"answer\", id, peerConnection.localDescription); }); peerConnection.ontrack = event =\u003e { video.srcObject = event.streams[0]; }; peerConnection.onicecandidate = event =\u003e { if (event.candidate) { socket.emit(\"candidate\", id, event.candidate); } }; }); socket.on(\"candidate\", (id, candidate) =\u003e { peerConnection .addIceCandidate(new RTCIceCandidate(candidate)) .catch(e =\u003e console.error(e)); }); socket.on(\"connect\", () =\u003e { socket.emit(\"watcher\"); }); socket.on(\"broadcaster\", () =\u003e { socket.emit(\"watcher\"); }); window.onunload = window.onbeforeunload = () =\u003e { socket.close(); peerConnection.close(); };\rAfprøvning Nu burde du kunne start serveren med kommandoen.\nnpm start\rFor at starte transmissionen skal åbne http://localhost:4000/broadcast.\nHvis du derefter besøger http://localhost:4000 i et andet browservindue, kan du se en video transmission af din sketch.\nScreenshot af de to browserviduer med sender og modtager. Bemærk at videoen stopper, hvis du lukker det første browservindue. Den burde starte igen, næste gang du besøger http://localhost:4000/broadcast.\nMateriale Node npm - Node Package Manager Socket.io Socket.io Version3 Documentation Socket.io - Get started Express express - nmp package WebRTC p5.js p5js getting started p5js reference",
    "description": "Dette er eksempel viser hvordan man kan streame indholdet af et html canvas element (en p5js sketch) til en anden maskine. Streaming delen håndteres af WebRTC, og etablering af forbindelsen håndteres ved hjælp af Socket.io.\nOpsætning af projekt Først skal der laves et projekt så node kan finde ud af at køre programmet, og har en package.json fil til at holde styr på projektet og afhængigheder af biblioteksmoduler.\nStart med at lave en mappe, som kan indeholde dit projekt. Kald den f.eks. webrtc-server. I denne mappe skal du køre følgende kommando, for at oprette projekt filen package.json.",
    "tags": [],
    "title": "Webrtc Server",
    "uri": "/tech/node/webrtc-server/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Nested Loops",
    "content": "",
    "description": "",
    "tags": [],
    "title": "p5 nested loops demo",
    "uri": "/tech/p5js/nested-loops/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Dette er et eksempel på hvordan man bruge indlejrede løkker (løkker inden i andre løkker).\nfunction setup() { createCanvas(windowWidth, windowHeight); } function draw(){ background(0); const gridSize = 35; const focusX = mouseX const focusY = mouseY for (let x = gridSize; x \u003c= width - gridSize; x += gridSize) { for (let y = gridSize; y \u003c= height - gridSize; y += gridSize) { stroke(255, random(40, 100)); strokeWeight(3) point(x, y); stroke(255, 20); strokeWeight(1) line(x, y, focusX, focusY); } } }\rDemo Prøv det kørende eksempel\nMateriale Loops: while and for - Javascript tutorial for - MDN docs setup() createCanvas() draw() background() map() stroke() strokeWeight() point() line() mouseX mouseY",
    "description": "Dette er et eksempel på hvordan man bruge indlejrede løkker (løkker inden i andre løkker).\nfunction setup() { createCanvas(windowWidth, windowHeight); } function draw(){ background(0); const gridSize = 35; const focusX = mouseX const focusY = mouseY for (let x = gridSize; x \u003c= width - gridSize; x += gridSize) { for (let y = gridSize; y \u003c= height - gridSize; y += gridSize) { stroke(255, random(40, 100)); strokeWeight(3) point(x, y); stroke(255, 20); strokeWeight(1) line(x, y, focusX, focusY); } } }\rDemo Prøv det kørende eksempel\nMateriale Loops: while and for - Javascript tutorial for - MDN docs setup() createCanvas() draw() background() map() stroke() strokeWeight() point() line() mouseX mouseY",
    "tags": [
      "Loop"
    ],
    "title": "Nested Loops",
    "uri": "/tech/p5js/nested-loops/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Ball Objects",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Ball Objects Demo",
    "uri": "/tech/p5js/ball-objects/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Dette eksempel viser hvordan kan benytte klasser og nedarvning i til at lave en simulering af hoppende bolde.\nDer benyttes 3 klasser som illustreret i dette klasse diagram.\nclassDiagram Ball \u003c|-- BouncingBall BouncingBall \u003c|-- RandomBouncingBall Ball : constructor(position) Ball : update() Ball : render() Ball : r Ball : pos Ball : speed BouncingBall : update() RandomBouncingBall : lineWidth RandomBouncingBall : strokeColor RandomBouncingBall : fillColor RandomBouncingBall : constructor(position) RandomBouncingBall : render() RandomBouncingBall : _generateColors() Det grundlæggende programflow håndteres i filen sketch.js.\nlet balls = [] let bouncingBalls = [] let randomBouncinBalls = [] let pos = new p5.Vector() function setup() { createCanvas(windowWidth, windowHeight) pos.x = width / 2 pos.y = height / 2 reset() createBalls() } function draw() { background(220) renderBalls() } // === Helper functions function reset(position) { balls = [] bouncingBalls = [] randomBouncinBalls = [] } function createBalls() { for (let i = 0; i \u003c 50; i++) { balls.push(new Ball(pos)) } } function createBouncingBalls() { for (let i = 0; i \u003c 20; i++) { bouncingBalls.push(new BouncingBall(pos)) } } function createRandomBalls() { let spawnPoint = createVector(random(50, width - 50), random(50, height - 50)) for (let i = 0; i \u003c 20; i++) { randomBouncinBalls.push(new RandomBouncingBall(spawnPoint)) } } function renderBalls() { for (const b of balls) { b.update() b.render() } for (const b of bouncingBalls) { b.update() b.render() } for (const b of randomBouncinBalls) { b.update() b.render() } } // === events === function mousePressed() { pos.x = mouseX pos.y = mouseY balls = [] createBalls() if (keyIsDown(SHIFT)) { createBouncingBalls() } } function keyPressed() { if ('c' == key) { reset() } if ('r' == key) { createRandomBalls() } else if ('R' == key) { randomBouncinBalls = [] createRandomBalls() } }\rKoden til klassen Ball ser sådan ud.\nclass Ball { constructor(position) { this.r = random(5, 40) this.pos = position.copy() this.speed = createVector() this.speed.x = random(-20,20) this.speed.y = random(-20,20) } update() { this.pos.add(this.speed) } render() { circle(this.pos.x, this.pos.y, this.r * 2) } }\rKoden til klassen BouncingBall ser sådan ud.\nclass BouncingBall extends Ball { update() { if (this.pos.x + this.r \u003e width || this.pos.x - this.r \u003c 0) { this.speed.x = -this.speed.x } if (this.pos.y + this.r \u003e height || this.pos.y - this.r \u003c 0) { this.speed.y = -this.speed.y } super.update() } }\rHer er koden til klassen RandomBouncingBall.\nclass RandomBouncingBall extends BouncingBall { constructor(pos) { super(pos); this.lineWidth = random(1,20) this._generateColors() } _generateColors() { this.strokeColor = color(random(255), random(255), random(255)) this.fillColor = color(random(255), random(255), random(255)) } render() { push() stroke(this.strokeColor) strokeWeight(this.lineWidth) fill(this.fillColor) super.render() pop() } }\rDemo Prøv det kørende eksempel. Bemærk hvordan en del af boldene forsvinder ud af skærmen.\nMateriale Class basic syntax Class inheritance Loops: while and for - Javascript tutorial for - MDN docs setup() createCanvas() draw() background() map() ellipse() random() push() pop() keyIsDown() p5.Vector createVector()",
    "description": "Dette eksempel viser hvordan kan benytte klasser og nedarvning i til at lave en simulering af hoppende bolde.\nDer benyttes 3 klasser som illustreret i dette klasse diagram.\nclassDiagram Ball \u003c|-- BouncingBall BouncingBall \u003c|-- RandomBouncingBall Ball : constructor(position) Ball : update() Ball : render() Ball : r Ball : pos Ball : speed BouncingBall : update() RandomBouncingBall : lineWidth RandomBouncingBall : strokeColor RandomBouncingBall : fillColor RandomBouncingBall : constructor(position) RandomBouncingBall : render() RandomBouncingBall : _generateColors() Det grundlæggende programflow håndteres i filen sketch.js.",
    "tags": [],
    "title": "Ball Objects",
    "uri": "/tech/p5js/ball-objects/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Map Range",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Map range demo",
    "uri": "/tech/p5js/map-range/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Dette rutediagram viser hvordan en løkke fungerer.\nflowchart TD start((S)) --\u003e init[INITIALIZE] init --\u003e cond{CONDITION?} cond --\u003e|true| body[LOOP_BODY] body --\u003e step[POST_STEP] step --\u003e cond cond ----\u003e|false| end_loop((E)) classDef termination fill:#fff,stroke:#000,color:#fff,stroke-width:4px; class start,end_loop termination %%classDef myClass fill:#ddd, stroke:#000; %%class init,cond,body,step myClass For løkke Her er for-løkken vist med pseudokode.\nfor(INITIALIZE;CONDITION;POST_STEP){ LOOP_BODY }\rHer er et konkret eksempel i javascript, der printer tal fra 0 til 9.\nfor(let i = 0; i \u003c 10; i++){ console.log(i); }\rWhile løkke En anden måde at lave en løkker er ved at bruge while.\nINITIALIZE; while(CONDITION){ LOOP_BODY; POST_STEP; }\rHer er eksemplet, der printer tal fra 0 til 9, lavet med en while løkke.\nlet i = 0 while(i \u003c 10){ console.log(i); i++; }\rEksempel med Løkke Dette eksempel viser hvordan man kan benytte funktionen map(), til at lave lineær interpolation. Endepunkternes position kan varieres ved at ændre musemarkørens x-position. De små cirkler generes i for-løkken, og antallet af cirkler styres af musens y-position.\nfunction setup() { createCanvas(windowWidth, windowHeight); fill(133, 18, 9); stroke(209, 52, 40) strokeWeight(3) } function draw() { background(70); // Define tilt based on mouse horizontal position const yRange = height / 4 const deltaY = map(mouseX, 0, width, -yRange, yRange, true) // Define control points const ax = 50 const ay = height / 2 - deltaY const bx = width - ax const by = height / 2 + deltaY // Draw large cirles at control poins const diameter = 50 circle(ax, ay, diameter) circle(bx, by, diameter) // Define number of circles based on mouse vertical position let n = map(mouseY, 0, height, 30, 2, true) n = ceil(n) // Draw circles using a loop for (let i = 0; i \u003c= n; i++) { const x = map(i, 0, n, ax, bx) const y = map(i, 0, n, ay, by) circle(x, y, diameter / 2) } }\rDemo Prøv det kørende eksempel\nMateriale Loops: while and for - Javascript tutorial for - MDN docs setup() createCanvas() draw() fill() stroke() strokeWeight() background() map() line() circle()",
    "description": "Dette rutediagram viser hvordan en løkke fungerer.\nflowchart TD start((S)) --\u003e init[INITIALIZE] init --\u003e cond{CONDITION?} cond --\u003e|true| body[LOOP_BODY] body --\u003e step[POST_STEP] step --\u003e cond cond ----\u003e|false| end_loop((E)) classDef termination fill:#fff,stroke:#000,color:#fff,stroke-width:4px; class start,end_loop termination %%classDef myClass fill:#ddd, stroke:#000; %%class init,cond,body,step myClass For løkke Her er for-løkken vist med pseudokode.\nfor(INITIALIZE;CONDITION;POST_STEP){ LOOP_BODY }\rHer er et konkret eksempel i javascript, der printer tal fra 0 til 9.\nfor(let i = 0; i \u003c 10; i++){ console.log(i); }\rWhile løkke En anden måde at lave en løkker er ved at bruge while.",
    "tags": [
      "Loop"
    ],
    "title": "Map Range",
    "uri": "/tech/p5js/map-range/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Project",
    "content": "I dette projekt arbejdes med algoritmer til blanding og sortering.\nOpgave: Shuffle Der skal laves et program, der kan blande en række heltal i et array.\nLav en beskrivelse af hvordan algoritmen fungerer. Din beskrivelse skal indeholde et flow chart. Lav en implementation i C#. Hint: Du kan benytte koden i ShuffleProgram.cs som udgangspunkt. Hint: Du får sikkert brug for at generere tilfældige tal, hvilket kan gøres med System.Random.Next().\nI kan f.eks. benytte Fisher–Yates shuffle som blande-algoritme.\nOpgave: Sort Lav en beskrivelse af en sorterings algoritme, som også indeholder et flowchart / pseudokode. Lav en implementation af en sorteringsalgoritme i C#. Hint: Det er oplagt at i bruge output fra shuffle algoritmen som input til sorteringsalgoritmen, så den let kan afprøves med forskellige inputs.\nMateriale System.Random.Next() - Dotnet 3.1 reference Fisher Yates Shuffle - Wikipedia C# intro Random.org - online tilfældighedsgenerator.",
    "description": "I dette projekt arbejdes med algoritmer til blanding og sortering.\nOpgave: Shuffle Der skal laves et program, der kan blande en række heltal i et array.\nLav en beskrivelse af hvordan algoritmen fungerer. Din beskrivelse skal indeholde et flow chart. Lav en implementation i C#. Hint: Du kan benytte koden i ShuffleProgram.cs som udgangspunkt. Hint: Du får sikkert brug for at generere tilfældige tal, hvilket kan gøres med System.Random.Next().\nI kan f.eks. benytte Fisher–Yates shuffle som blande-algoritme.",
    "tags": [],
    "title": "Shuffle \u0026 Sort",
    "uri": "/project/shuffle-n-sort/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Logical Operators",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Logical operators demo",
    "uri": "/tech/p5js/logical-operators/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Dette eksempel viser hvordan man kan benytte de forskellige logiske operatorer: OR, AND, NOT, XOR.\nOR (||) let result = a || b\ra b result FALSE ❌ FALSE ❌ FALSE ❌ FALSE ❌ TRUE ✔️ TRUE ✔️ TRUE ✔️ FALSE ❌ TRUE ✔️ TRUE ✔️ TRUE ✔️ TRUE ✔️ AND (\u0026\u0026) let result = a \u0026\u0026 b\ra b result FALSE ❌ FALSE ❌ FALSE ❌ FALSE ❌ TRUE ✔️ FALSE ❌ TRUE ✔️ FALSE ❌ FALSE ❌ TRUE ✔️ TRUE ✔️ TRUE ✔️ NOT (!) let result = !a\ra result FALSE ❌ TRUE ✔️ TRUE ✔️ FALSE ❌ XOR Der findes ikke en selvstændig operator, der laver XOR i javascript. Denne kan opbygges af de andre logiske operationer.\nlet result = a \u0026\u0026 !b || !a \u0026\u0026 b\ra b result FALSE ❌ FALSE ❌ FALSE ❌ FALSE ❌ TRUE ✔️ TRUE ✔️ TRUE ✔️ FALSE ❌ TRUE ✔️ TRUE ✔️ TRUE ✔️ FALSE ❌ Visualisering med kode function setup() { createCanvas(windowWidth, windowHeight); rectMode(CENTER); } function draw() { background(220) const size = windowHeight/8 let w = size let h = size const x = mouseX const y = mouseY const xLimit = width / 2 const yLimit = height / 2 // Boolean expression const xIsSmall = x \u003c xLimit const yIsSmall = y \u003c yLimit // NOT operator const xIsLarge = !xIsSmall const yIsLarge = !yIsSmall // defaults let c = color(220) let lineWidth = 2 // BRANCH on condition if (xIsSmall) { w = w / 2; } if (yIsSmall) { h = h / 2 } // OR operator if (xIsSmall || yIsSmall) { c = color(\"red\"); } // AND operator if (xIsLarge \u0026\u0026 yIsLarge) { lineWidth = lineWidth * 3; } // XOR const showAsRectangle = xIsLarge \u0026\u0026 !yIsLarge || !xIsLarge \u0026\u0026 yIsLarge; // Draw moving shape fill(c); strokeWeight(lineWidth); if (showAsRectangle) { rect(x, y, w, h) } else { ellipse(x, y, w, h); } // Draw limits line(xLimit, 0, xLimit, height) line(0, yLimit, width, yLimit) }\rDemo Prøv det kørende eksempel\nMateriale Logical operators - Javascript tutorial Conditional branching: if, ‘?’ - Javascript tutorial XOR gate setup() createCanvas() draw() background() fill() mouseX mouseY rect() rectMode() ellipse()",
    "description": "Dette eksempel viser hvordan man kan benytte de forskellige logiske operatorer: OR, AND, NOT, XOR.\nOR (||) let result = a || b\ra b result FALSE ❌ FALSE ❌ FALSE ❌ FALSE ❌ TRUE ✔️ TRUE ✔️ TRUE ✔️ FALSE ❌ TRUE ✔️ TRUE ✔️ TRUE ✔️ TRUE ✔️ AND (\u0026\u0026) let result = a \u0026\u0026 b\ra b result FALSE ❌ FALSE ❌ FALSE ❌ FALSE ❌ TRUE ✔️ FALSE ❌ TRUE ✔️ FALSE ❌ FALSE ❌ TRUE ✔️ TRUE ✔️ TRUE ✔️ NOT (!) let result = !a\ra result FALSE ❌ TRUE ✔️ TRUE ✔️ FALSE ❌ XOR Der findes ikke en selvstændig operator, der laver XOR i javascript. Denne kan opbygges af de andre logiske operationer.",
    "tags": [],
    "title": "Logical Operators",
    "uri": "/tech/p5js/logical-operators/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Project",
    "content": "Opgave Læs og forstå de simple regler for Game of Life. Lav manuel simulering af algoritmen. Den kan simuleres ved at afvikle game of life på et stykke papir eller en ternet spilleplade. Brug perler / lego / eller andre små genstande til at symbolisere levende celler. Lav derefter din egen version af version i p5.js. Som inspiration kan du bruge denne videopræsentation. Coding Challenge #85: The Game of Life Materiale Game of life - Wikipedia Game of life - Nature of code Coding Challenge #85: The Game of Life",
    "description": "Opgave Læs og forstå de simple regler for Game of Life. Lav manuel simulering af algoritmen. Den kan simuleres ved at afvikle game of life på et stykke papir eller en ternet spilleplade. Brug perler / lego / eller andre små genstande til at symbolisere levende celler. Lav derefter din egen version af version i p5.js. Som inspiration kan du bruge denne videopræsentation. Coding Challenge #85: The Game of Life Materiale Game of life - Wikipedia Game of life - Nature of code Coding Challenge #85: The Game of Life",
    "tags": [],
    "title": "John Conway's: Game of life",
    "uri": "/project/game-of-life/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Project",
    "content": "Opgave: Simulering af ordblindhed Lav et program der kan lave tekster om til “volapykdansk” ala nedenstående. Reglerne for konvertering af teksten er beskrevet i det følgende. Iøfgle en uerndsøeglse på Cmabrigde Uinvertisy bteyedr det ikke ngoet i hivklen rkkæefgløe bgotsavrnee såtr i et ord, det eestne vgitgie er at det frøtse og sditse bgsoatv i odret er på de rtete psadler. Rsteen kan lngie vloaypk, men du vil sdtaig vræe i snatd til at lsæe det. Det er frodi den mnenesekilge hejrne ikke lesær hevrt bgotasv, men odret som en hhleed.\nMateriale Blande algoritme Simulering af ordblindhed Typoglycemia - Wikipedia Article from University of Cambridge",
    "description": "Opgave: Simulering af ordblindhed Lav et program der kan lave tekster om til “volapykdansk” ala nedenstående. Reglerne for konvertering af teksten er beskrevet i det følgende. Iøfgle en uerndsøeglse på Cmabrigde Uinvertisy bteyedr det ikke ngoet i hivklen rkkæefgløe bgotsavrnee såtr i et ord, det eestne vgitgie er at det frøtse og sditse bgsoatv i odret er på de rtete psadler. Rsteen kan lngie vloaypk, men du vil sdtaig vræe i snatd til at lsæe det. Det er frodi den mnenesekilge hejrne ikke lesær hevrt bgotasv, men odret som en hhleed.",
    "tags": [],
    "title": "Volapyk-dansk",
    "uri": "/project/volapyk-dansk/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Project",
    "content": "Opgave: Mobile Game / App Tema: FNs Verdensmål Lav et spil. Målgruppen for spillet skal defineres klart. Spillet skal kunne køre på en android telefon. Der må gerne være et socialt element, f.eks. multiplayer via netværk. Der skal bruges input fra de tilgængelige sensorer, som er i en smartphone (kompas, gps, accelerometer, gyro, etc.) Som minimum skal input en af sensorerne anvendes i spillet Opgaven laves i grupper.\nDer skal laves en projektrapport, der dokumenterer udviklingen af produktet (jeres spil / app).\nProcessen i udviklingen af spillet skal dokumenteres i en logbog\nMateriale I gang med Unity og android Installatering af Unity. Opsætning af Android udviklingsmiljø. Android studio. Tutorials (til at komme i gang) How to make a video Game (Brakeys). C# Tutorial - w3schools. How to program C# video tutorial, Brakeys. C# programmering for begyndere Videokursus på dansk, Nemprogrammering.dk. How to program in C# - PROPERTIES - Beginner tutorial. 3D assets Poly 3D model bibliotek, Google Inspiration Coding Adventure 01: Hydraulic Erosion koden kan findes på github MAKING A GAME IN 10 MINUTES!! (Brakeys) Tips for using Rider with Unity Unity ideas Perlin noise Firebase Realtime Database Unity integration with firebase",
    "description": "Opgave: Mobile Game / App Tema: FNs Verdensmål Lav et spil. Målgruppen for spillet skal defineres klart. Spillet skal kunne køre på en android telefon. Der må gerne være et socialt element, f.eks. multiplayer via netværk. Der skal bruges input fra de tilgængelige sensorer, som er i en smartphone (kompas, gps, accelerometer, gyro, etc.) Som minimum skal input en af sensorerne anvendes i spillet Opgaven laves i grupper.\nDer skal laves en projektrapport, der dokumenterer udviklingen af produktet (jeres spil / app).",
    "tags": [],
    "title": "Mobile Game",
    "uri": "/project/mobile-game/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Css \u003e Flexbox Layout",
    "content": "\u003c!DOCTYPE html\u003e\rPage Title\rlogo\rMain Title\rpkt L1\rpkt L2\rpkt L3\rpkt L4\rpkt R1\rpkt R2\r1\r2\r3\r4\r5\r6\r7\r8\r9\r1\r2\r3",
    "description": "\u003c!DOCTYPE html\u003e\rPage Title\rlogo\rMain Title\rpkt L1\rpkt L2\rpkt L3\rpkt L4\rpkt R1\rpkt R2\r1\r2\r3\r4\r5\r6\r7\r8\r9\r1\r2\r3",
    "tags": [],
    "title": "Flexbox Layout demo",
    "uri": "/tech/css/flexbox-layout/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Node.js \u003e Socket IO",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Demo",
    "uri": "/tech/node/socket-io-demo/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Css",
    "content": "Dette eksempel viser hvordan man kan bruge flexbox layout til at lave et layout på en webside.\nDet består af et enkelt html dokument og en tilhørende css fil.\nHer er den html struktur der er brugt.\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\" /\u003e \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /\u003e \u003ctitle\u003ePage Title\u003c/title\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"style.css\" /\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"top\"\u003e \u003cdiv class=\"box\"\u003elogo\u003c/div\u003e \u003cdiv class=\"box\"\u003eMain Title\u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"menu\"\u003e \u003cul\u003e \u003cli\u003epkt L1\u003c/li\u003e \u003cli\u003epkt L2\u003c/li\u003e \u003cli\u003epkt L3\u003c/li\u003e \u003cli\u003epkt L4\u003c/li\u003e \u003c/ul\u003e \u003cul\u003e \u003cli\u003epkt R1\u003c/li\u003e \u003cli\u003epkt R2\u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e \u003cdiv class=\"middle\"\u003e \u003cdiv class=\"box\"\u003e1\u003c/div\u003e \u003cdiv class=\"box\"\u003e2\u003c/div\u003e \u003cdiv class=\"box\"\u003e3\u003c/div\u003e \u003cdiv class=\"box\"\u003e4\u003c/div\u003e \u003cdiv class=\"box\"\u003e5\u003c/div\u003e \u003cdiv class=\"box\"\u003e6\u003c/div\u003e \u003cdiv class=\"box\"\u003e7\u003c/div\u003e \u003cdiv class=\"box\"\u003e8\u003c/div\u003e \u003cdiv class=\"box\"\u003e9\u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"bottom-wrapper\"\u003e \u003cfooter class=\"bottom\"\u003e \u003cdiv class=\"box\"\u003e1\u003c/div\u003e \u003cdiv class=\"box\"\u003e2\u003c/div\u003e \u003cdiv class=\"box\"\u003e3\u003c/div\u003e \u003c/footer\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e\rCSS filen ser således ud.\n.box { background-color: #f1f1f1; min-width: 100px; margin: 10px; padding: 10px; text-align: center; font-size: 30px; } div { margin: 0; padding: 0; } body { margin: 0; padding: 0; min-height: 100vh; display: flex; flex-direction: column; background-color: burlywood; } .top { display: flex; background-color: green; } .menu { display: flex; flex-direction: row; justify-content: space-between; background-color: brown; } .menu ul { display: flex; flex-direction: row; list-style: none; background-color: aqua; padding: 0; } .menu\u003eul:last-child { display: flex; align-items: flex-end; list-style: none; background-color: purple; } .menu li { text-align: center; padding: 5px; margin: 3px; border: 2px solid black; background-color: olive; } .menu li:hover { background-color: chartreuse; } .middle { display: flex; flex-wrap: wrap; } .bottom-wrapper { margin-top: auto; } .bottom { display: flex; flex: 1; flex-direction: row; justify-content: space-around; background-color: black; }\rDemo Prøv det kørende eksempel.\nMateriale CSS Tutorial Same Page Different Stylesheets CSS Flexbox A guide to flexbox Eksempler zebra stripes on a table Fancy table Spil Flexbox froggy",
    "description": "Dette eksempel viser hvordan man kan bruge flexbox layout til at lave et layout på en webside.\nDet består af et enkelt html dokument og en tilhørende css fil.\nHer er den html struktur der er brugt.\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\" /\u003e \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /\u003e \u003ctitle\u003ePage Title\u003c/title\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"style.css\" /\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"top\"\u003e \u003cdiv class=\"box\"\u003elogo\u003c/div\u003e \u003cdiv class=\"box\"\u003eMain Title\u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"menu\"\u003e \u003cul\u003e \u003cli\u003epkt L1\u003c/li\u003e \u003cli\u003epkt L2\u003c/li\u003e \u003cli\u003epkt L3\u003c/li\u003e \u003cli\u003epkt L4\u003c/li\u003e \u003c/ul\u003e \u003cul\u003e \u003cli\u003epkt R1\u003c/li\u003e \u003cli\u003epkt R2\u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e \u003cdiv class=\"middle\"\u003e \u003cdiv class=\"box\"\u003e1\u003c/div\u003e \u003cdiv class=\"box\"\u003e2\u003c/div\u003e \u003cdiv class=\"box\"\u003e3\u003c/div\u003e \u003cdiv class=\"box\"\u003e4\u003c/div\u003e \u003cdiv class=\"box\"\u003e5\u003c/div\u003e \u003cdiv class=\"box\"\u003e6\u003c/div\u003e \u003cdiv class=\"box\"\u003e7\u003c/div\u003e \u003cdiv class=\"box\"\u003e8\u003c/div\u003e \u003cdiv class=\"box\"\u003e9\u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"bottom-wrapper\"\u003e \u003cfooter class=\"bottom\"\u003e \u003cdiv class=\"box\"\u003e1\u003c/div\u003e \u003cdiv class=\"box\"\u003e2\u003c/div\u003e \u003cdiv class=\"box\"\u003e3\u003c/div\u003e \u003c/footer\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e\rCSS filen ser således ud.",
    "tags": [],
    "title": "Flexbox Layout",
    "uri": "/tech/css/flexbox-layout/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Css",
    "content": "\u003c!DOCTYPE html\u003e\rCSS på 3 måder\rEkstern Definition\rUdseendet af denne sektion er defineret i en ekstern css fil.\nSelector er lavet vha. af elementets navn.\nTre måder at bruge CSS i HTML\rEkstern CSS Fil.\rIntern CSS i dokument.\rInline CSS definition i style attribut.\rIntern definition\rSom eksempel er der lavet en intern definition, der ændrer skriften til kursiv for h3 elementer.\nSelectors\rDer er flere måde at udvælge elementer vha. selectors. De mest almindelige er:\nDirekte ved hjælp af navn på elementet.\rVed brug af en klasse.\rVed brug af et ID.\rElement\rMan kan bruge html elementer direkte som selector, så vil alle elementer der matches bruge samme stil.\nDette er lavet som eksempel i dette dokument, med div elementer Der bliver vist som indrammede kasser.\nKlasse\rMan kan bruge selectors til at vælge bestemte html elementer vha. deres navn. Dette er lavet som eksempel i dette dokument, med div elementer Der bliver vist som indrammede kasser.\nMan kan bruge html elementer direkte som selector, så vil alle elementer der matches bruge samme stil.\nSelector med ID\rMan kan vælge at tildele et ID som en attribut til et element, og bruge det til styling.\nFor denne blok er stilen lavet med et ID\nBemærk: at et id skal være unikt indefor et dokument.\nKlasser fortsat\rMan kan bruge Samme klasse flere steder i sit dokument.\nDemonstration af css\rHer er et eksempel på en inline style",
    "description": "\u003c!DOCTYPE html\u003e\rCSS på 3 måder\rEkstern Definition\rUdseendet af denne sektion er defineret i en ekstern css fil.\nSelector er lavet vha. af elementets navn.\nTre måder at bruge CSS i HTML\rEkstern CSS Fil.\rIntern CSS i dokument.\rInline CSS definition i style attribut.\rIntern definition\rSom eksempel er der lavet en intern definition, der ændrer skriften til kursiv for h3 elementer.",
    "tags": [],
    "title": "Css 3 Methods demo",
    "uri": "/tech/css/css-3-methods/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Css",
    "content": "Dette eksempel viser hvordan man kan bruge css grid til at lave et responsive layout på en webside.\nDet består af et enkelt html dokument og en tilhørende css fil.\nHer er den html struktur der er brugt.\n\u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eCSS grid layout\u003c/title\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" \u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"grid-container\"\u003e \u003cdiv class=\"item1\"\u003e\u003ch2\u003e Header \u003c/h2\u003e \u003cp\u003ePrøv at ændre i bredden på vinduet og læg mærke til hvad der sker med layoutet.\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"item2\"\u003e \u003ch2\u003eMenu\u003c/h2\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"#\"\u003eMenu item 1\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003eMenu item 2\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003eMenu item 3\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003eMenu item 4\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003eMenu item 5\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eLorem ipsum dolor sit amet consectetur, adipisicing elit.\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"item3\"\u003e \u003ch2\u003eMain\u003c/h2\u003e \u003cdiv class=\"breaking\"\u003e \u003ch2\u003eUnder udarbejdelse\u003c/h2\u003e \u003c/div\u003e \u003cp\u003eLorem ipsum dolor, sit amet consectetur adipisicing elit. Aperiam tenetur, quidem reiciendis itaque beatae dolores consequuntur eos fugiat iste consequatur rem molestias, exercitationem veniam nisi iure minima fuga illum ea.\u003c/p\u003e \u003cp\u003eQuod voluptates accusantium rerum a cum, quidem modi velit voluptatum magnam corrupti repudiandae minus, eveniet ipsum sunt soluta labore aliquam possimus. Natus tempora itaque eos aliquid earum quae asperiores blanditiis!\u003c/p\u003e \u003cp\u003eItaque velit molestias provident amet magni voluptas, voluptatibus maxime esse. Quaerat id molestias odio dolore animi nemo, suscipit modi magnam quasi temporibus omnis sint natus ducimus dignissimos labore fugit voluptatem!\u003c/p\u003e \u003cp\u003eSimilique vitae architecto sequi error soluta nobis iste quos voluptatem expedita repudiandae numquam fugit fugiat, debitis omnis incidunt ipsam possimus sint magni quas cumque aspernatur! Voluptatem saepe sed quis corporis.\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"item4\"\u003e \u003ch2\u003eRight\u003c/h2\u003e \u003cp\u003eLorem ipsum dolor sit amet consectetur adipisicing elit. Quia, repellat. Ducimus accusamus temporibus cum perspiciatis, incidunt illo saepe error ex ad reiciendis at magni, deleniti velit in voluptatibus iusto eos.\u003c/p\u003e \u003cp\u003eVoluptatum, dicta quis iste cumque magni harum quaerat cupiditate adipisci culpa libero quae accusantium praesentium excepturi quod eum obcaecati dolorum iusto aperiam est. Soluta, enim? Culpa autem temporibus rem eaque.\u003c/p\u003e \u003cp\u003ePossimus animi minima aliquam molestiae laboriosam sit aliquid tenetur ut consectetur deserunt architecto, perspiciatis facere earum magnam totam minus quisquam incidunt placeat optio quidem! Minima, repellendus. Natus dolorum optio ducimus.\u003c/p\u003e \u003cp\u003eExpedita aliquid, quam iusto voluptas totam possimus laboriosam earum fugiat ducimus, esse soluta rerum, non iure. Ex nemo animi molestias aliquid aperiam placeat ducimus qui numquam provident nostrum, magnam ipsa.\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"item5\"\u003e\u003ch2\u003eFooter\u003c/h2\u003e\u003c/div\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e\rCSS filen ser således ud.\n.item1 { grid-area: header; } .item2 { grid-area: menu; } .item3 { grid-area: main; } .item4 { grid-area: right; } .item5 { grid-area: footer; } .grid-container { display: grid; grid-template-areas: 'header header header header header header' 'menu main main main right right' 'menu footer footer footer right right'; grid-gap: 10px; background-color: #2196F3; padding: 10px; } @media only screen and (max-width: 70em) { .grid-container { background-color: rgb(10, 192, 10); grid-template-areas: 'header header ' 'main main ' 'menu right' 'footer footer'; } } @media only screen and (max-width: 50em) { .grid-container { background-color: rgb(226, 45, 32); grid-template-areas: 'header' 'main' 'menu' 'right' 'footer'; } } .grid-container \u003e div { background-color: rgba(218, 226, 231, 0.822); padding: 1em 1em; font-size: 30px; } .breaking { text-align: center; margin-top: 1em; padding: 1em; background-color: yellow; border-radius: .5em; -webkit-box-shadow: 8px 13px 16px 0px rgba(0, 0, 0, 0.85); -moz-box-shadow: 8px 13px 16px 0px rgba(0, 0, 0, 0.85); box-shadow: 8px 13px 16px 0px rgba(0, 0, 0, 0.85); }\rDemo Prøv det kørende eksempel.\nMateriale CSS Tutorial Same Page Different Stylesheets CSS Grid Layout Module Spil CSS Grid Garden",
    "description": "Dette eksempel viser hvordan man kan bruge css grid til at lave et responsive layout på en webside.\nDet består af et enkelt html dokument og en tilhørende css fil.\nHer er den html struktur der er brugt.\n\u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eCSS grid layout\u003c/title\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" \u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"grid-container\"\u003e \u003cdiv class=\"item1\"\u003e\u003ch2\u003e Header \u003c/h2\u003e \u003cp\u003ePrøv at ændre i bredden på vinduet og læg mærke til hvad der sker med layoutet.\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"item2\"\u003e \u003ch2\u003eMenu\u003c/h2\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"#\"\u003eMenu item 1\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003eMenu item 2\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003eMenu item 3\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003eMenu item 4\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003eMenu item 5\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eLorem ipsum dolor sit amet consectetur, adipisicing elit.\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"item3\"\u003e \u003ch2\u003eMain\u003c/h2\u003e \u003cdiv class=\"breaking\"\u003e \u003ch2\u003eUnder udarbejdelse\u003c/h2\u003e \u003c/div\u003e \u003cp\u003eLorem ipsum dolor, sit amet consectetur adipisicing elit. Aperiam tenetur, quidem reiciendis itaque beatae dolores consequuntur eos fugiat iste consequatur rem molestias, exercitationem veniam nisi iure minima fuga illum ea.\u003c/p\u003e \u003cp\u003eQuod voluptates accusantium rerum a cum, quidem modi velit voluptatum magnam corrupti repudiandae minus, eveniet ipsum sunt soluta labore aliquam possimus. Natus tempora itaque eos aliquid earum quae asperiores blanditiis!\u003c/p\u003e \u003cp\u003eItaque velit molestias provident amet magni voluptas, voluptatibus maxime esse. Quaerat id molestias odio dolore animi nemo, suscipit modi magnam quasi temporibus omnis sint natus ducimus dignissimos labore fugit voluptatem!\u003c/p\u003e \u003cp\u003eSimilique vitae architecto sequi error soluta nobis iste quos voluptatem expedita repudiandae numquam fugit fugiat, debitis omnis incidunt ipsam possimus sint magni quas cumque aspernatur! Voluptatem saepe sed quis corporis.\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"item4\"\u003e \u003ch2\u003eRight\u003c/h2\u003e \u003cp\u003eLorem ipsum dolor sit amet consectetur adipisicing elit. Quia, repellat. Ducimus accusamus temporibus cum perspiciatis, incidunt illo saepe error ex ad reiciendis at magni, deleniti velit in voluptatibus iusto eos.\u003c/p\u003e \u003cp\u003eVoluptatum, dicta quis iste cumque magni harum quaerat cupiditate adipisci culpa libero quae accusantium praesentium excepturi quod eum obcaecati dolorum iusto aperiam est. Soluta, enim? Culpa autem temporibus rem eaque.\u003c/p\u003e \u003cp\u003ePossimus animi minima aliquam molestiae laboriosam sit aliquid tenetur ut consectetur deserunt architecto, perspiciatis facere earum magnam totam minus quisquam incidunt placeat optio quidem! Minima, repellendus. Natus dolorum optio ducimus.\u003c/p\u003e \u003cp\u003eExpedita aliquid, quam iusto voluptas totam possimus laboriosam earum fugiat ducimus, esse soluta rerum, non iure. Ex nemo animi molestias aliquid aperiam placeat ducimus qui numquam provident nostrum, magnam ipsa.\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"item5\"\u003e\u003ch2\u003eFooter\u003c/h2\u003e\u003c/div\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e\rCSS filen ser således ud.",
    "tags": [],
    "title": "Grid Layout",
    "uri": "/tech/css/grid-layout/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Css \u003e Grid Layout",
    "content": "\u003c!DOCTYPE html\u003e\rCSS grid layout\rHeader\rPrøv at ændre i bredden på vinduet og læg mærke til hvad der sker med layoutet.\nMenu\rMenu item 1\rMenu item 2\rMenu item 3\rMenu item 4\rMenu item 5\rLorem ipsum dolor sit amet consectetur, adipisicing elit.\nMain\rUnder udarbejdelse\rLorem ipsum dolor, sit amet consectetur adipisicing elit. Aperiam tenetur, quidem reiciendis itaque beatae dolores consequuntur eos fugiat iste consequatur rem molestias, exercitationem veniam nisi iure minima fuga illum ea.\nQuod voluptates accusantium rerum a cum, quidem modi velit voluptatum magnam corrupti repudiandae minus, eveniet ipsum sunt soluta labore aliquam possimus. Natus tempora itaque eos aliquid earum quae asperiores blanditiis!\nItaque velit molestias provident amet magni voluptas, voluptatibus maxime esse. Quaerat id molestias odio dolore animi nemo, suscipit modi magnam quasi temporibus omnis sint natus ducimus dignissimos labore fugit voluptatem!\nSimilique vitae architecto sequi error soluta nobis iste quos voluptatem expedita repudiandae numquam fugit fugiat, debitis omnis incidunt ipsam possimus sint magni quas cumque aspernatur! Voluptatem saepe sed quis corporis.\nRight\rLorem ipsum dolor sit amet consectetur adipisicing elit. Quia, repellat. Ducimus accusamus temporibus cum perspiciatis, incidunt illo saepe error ex ad reiciendis at magni, deleniti velit in voluptatibus iusto eos.\nVoluptatum, dicta quis iste cumque magni harum quaerat cupiditate adipisci culpa libero quae accusantium praesentium excepturi quod eum obcaecati dolorum iusto aperiam est. Soluta, enim? Culpa autem temporibus rem eaque.\nPossimus animi minima aliquam molestiae laboriosam sit aliquid tenetur ut consectetur deserunt architecto, perspiciatis facere earum magnam totam minus quisquam incidunt placeat optio quidem! Minima, repellendus. Natus dolorum optio ducimus.\nExpedita aliquid, quam iusto voluptas totam possimus laboriosam earum fugiat ducimus, esse soluta rerum, non iure. Ex nemo animi molestias aliquid aperiam placeat ducimus qui numquam provident nostrum, magnam ipsa.\nFooter",
    "description": "\u003c!DOCTYPE html\u003e\rCSS grid layout\rHeader\rPrøv at ændre i bredden på vinduet og læg mærke til hvad der sker med layoutet.\nMenu\rMenu item 1\rMenu item 2\rMenu item 3\rMenu item 4\rMenu item 5\rLorem ipsum dolor sit amet consectetur, adipisicing elit.\nMain\rUnder udarbejdelse\rLorem ipsum dolor, sit amet consectetur adipisicing elit. Aperiam tenetur, quidem reiciendis itaque beatae dolores consequuntur eos fugiat iste consequatur rem molestias, exercitationem veniam nisi iure minima fuga illum ea.",
    "tags": [],
    "title": "Grid Layout demo",
    "uri": "/tech/css/grid-layout/grid-demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Arduino",
    "content": "Dette eksempel viser hvordan man kan måle tiden mellem to hændelser.\nPin 2: starter timer når forbindelsen til GND afbrydes. Pin 3: stopper tidtagningen når forbindelsen til GND sluttes. Den indbyggede LED er tændt, mens tidtagningen er i gang.\nconst int startPin = 2; const int gatePin = 3; const int ledPin = 13; int isStarted = false; int hasTriggeredGate = false; unsigned long startTime = 0; unsigned long gateTime = 0; void setup() { pinMode(ledPin, OUTPUT); pinMode(startPin, INPUT_PULLUP); pinMode(gatePin, INPUT_PULLUP); Serial.begin(9600); Serial.println(\"Ready...\"); } void loop() { int startState = digitalRead(startPin); // Turn on LED while measurement is running int measRunning = isStarted \u0026\u0026 !hasTriggeredGate; digitalWrite(ledPin, measRunning); // Handle start trigger if (HIGH == startState \u0026\u0026 !isStarted) { startTime = millis(); isStarted = true; Serial.print(\"Start time 1: \"); Serial.println(startTime); } // Handle gate trigger int gateState = digitalRead(gatePin); if (LOW == gateState \u0026\u0026 !hasTriggeredGate) { gateTime = millis(); hasTriggeredGate = true; Serial.print(\"Gate time: \"); Serial.println(gateTime); Serial.print(\"Time diff: \"); unsigned long timeDiff = gateTime - startTime; Serial.println(timeDiff); } }",
    "description": "Dette eksempel viser hvordan man kan måle tiden mellem to hændelser.\nPin 2: starter timer når forbindelsen til GND afbrydes. Pin 3: stopper tidtagningen når forbindelsen til GND sluttes. Den indbyggede LED er tændt, mens tidtagningen er i gang.\nconst int startPin = 2; const int gatePin = 3; const int ledPin = 13; int isStarted = false; int hasTriggeredGate = false; unsigned long startTime = 0; unsigned long gateTime = 0; void setup() { pinMode(ledPin, OUTPUT); pinMode(startPin, INPUT_PULLUP); pinMode(gatePin, INPUT_PULLUP); Serial.begin(9600); Serial.println(\"Ready...\"); } void loop() { int startState = digitalRead(startPin); // Turn on LED while measurement is running int measRunning = isStarted \u0026\u0026 !hasTriggeredGate; digitalWrite(ledPin, measRunning); // Handle start trigger if (HIGH == startState \u0026\u0026 !isStarted) { startTime = millis(); isStarted = true; Serial.print(\"Start time 1: \"); Serial.println(startTime); } // Handle gate trigger int gateState = digitalRead(gatePin); if (LOW == gateState \u0026\u0026 !hasTriggeredGate) { gateTime = millis(); hasTriggeredGate = true; Serial.print(\"Gate time: \"); Serial.println(gateTime); Serial.print(\"Time diff: \"); unsigned long timeDiff = gateTime - startTime; Serial.println(timeDiff); } }",
    "tags": [],
    "title": "Button Trigger",
    "uri": "/tech/arduino/button-trigger/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Arduino",
    "content": "Dette eksempel laver et “løbelys” med blå farver.\nHardware setup Arduino og LED array hardware LED modulerne er forbunde i en kæde, så data signalets output er forbundet til input på næste LED modul. Alle modulerne forsynes med 5V fra arduino. Der er monteret en kondensator for at udjævne spændingen. Datasignalet tages fra pin 6 på Arduino.\nArduino \u0026 NeoPixel For at kunne styre arrayet af NeoPixel LED’er kan du benytte softwarebiblioteket Adafruit Neopixel.\nDet kan tilføjes til din Arduino IDE installation ved at bruge udvidelsesværkttøjet (Værktøjer –\u003e Manage libraries…), som vist på dette skærmbillede.\nSøg efter neopixel i Arduino Library manager Der følger en del eksempelkode med i til Neopixel biblioteket til Arduino. Denne guide beskriver hvordan man bruger eksempler i Arduino.\nPrøv f.eks. det der hedder simple, i Adafruit Neopixel biblioteket. Husk at ændre antallet af LED’er i koden, så det passer til hardwaren. Bemærk også, at du skal bruge samme output pin i koden, som du har forbundet med ledninger.\nKode eksempel Her er en sketch, der laver et “løbelys” med blå farver.\n#include \u003cAdafruit_NeoPixel.h\u003e // Which pin on the Arduino is connected to the NeoPixels? #define PIN 6 // On Trinket or Gemma, suggest changing this to 1 // How many NeoPixels are attached to the Arduino? #define NUMPIXELS 10 Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800); // Time (in milliseconds) to pause between pixels #define DELAYVAL 500 void setup() { // INITIALIZE NeoPixel strip object (REQUIRED) pixels.begin(); } void loop() { pixels.clear(); // Set all pixel colors to 'off' // The first NeoPixel in a strand is #0, second is 1, all the way up // to the count of pixels minus one. for(int i=0; i\u003cNUMPIXELS; i++) { // For each pixel... // pixels.Color() takes RGB values, from 0,0,0 up to 255,255,255 pixels.setPixelColor(i, pixels.Color(0, 20, 150)); // Send the updated pixel colors to the hardware. pixels.show(); // Pause before next pass through loop delay(DELAYVAL); } }\rMateriale Arduino Arduino IDE Arduino programming reference Installing arduino libraries Eksempler fra Arduino biblioteker Adafruit NeoPixel Adafruit NeoPixel Überguide",
    "description": "Dette eksempel laver et “løbelys” med blå farver.\nHardware setup Arduino og LED array hardware LED modulerne er forbunde i en kæde, så data signalets output er forbundet til input på næste LED modul. Alle modulerne forsynes med 5V fra arduino. Der er monteret en kondensator for at udjævne spændingen. Datasignalet tages fra pin 6 på Arduino.\nArduino \u0026 NeoPixel For at kunne styre arrayet af NeoPixel LED’er kan du benytte softwarebiblioteket Adafruit Neopixel.",
    "tags": [],
    "title": "Neopixel",
    "uri": "/tech/arduino/neopixel/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech",
    "content": "Noter og eksempler med Unity.",
    "description": "Noter og eksempler med Unity.",
    "tags": [],
    "title": "Unity",
    "uri": "/tech/unity/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Project",
    "content": "Dette projekt går ud på at lave en kodelås til en automatisk bom ved at programmere Lego Mindstorms.\nHardware setup Start med at bygge en konstruktion af din automatiske bom med kodelæser. Du skal også bruge et antal farver, der kan scannes når du tester programmet.\nKonstruktionen kan laves ud fra denne byggevejledning.\nForbindelser til EV3 brikken Modul Port Stor motor C color sensor 2 trykknap 4 Opgave Lav en kodelås der styrer en automatisk bom.\nMan skal kunne låse den op ved hjælp af indlæsning af farver i en bestemt sekvens. Indlæsningen af hver farve bekræftes med et tryk på den tilsluttede knap. Man skal kunne ændre på farverne og længden af sekvensen uden at lave en større modifikation af programmet (Hint: Benyt f.eks et array). Forslag til kodestruktur Denne struktur kan bruges som skabelon til at løse opgaven.\nlet code: number[] = [] let isCorrect = false function openGate() { // TODO Scan code and determine if it matches correct } sensors.color2.setMode(ColorSensorMode.Color) motors.largeC.setBrake(true) code = [ColorSensorColor.Red, ColorSensorColor.Green, ColorSensorColor.Blue, ColorSensorColor.Brown] forever(function () { // Indicate program is running brick.showImage(images.eyesBlackEye) isCorrect = true // TODO Scan code and determine if it matches correct sequence if (isCorrect) { openGate() } else { // TODO indicate wrong code } })\rMateriale Lego Mindstorms intro",
    "description": "Dette projekt går ud på at lave en kodelås til en automatisk bom ved at programmere Lego Mindstorms.\nHardware setup Start med at bygge en konstruktion af din automatiske bom med kodelæser. Du skal også bruge et antal farver, der kan scannes når du tester programmet.\nKonstruktionen kan laves ud fra denne byggevejledning.\nForbindelser til EV3 brikken Modul Port Stor motor C color sensor 2 trykknap 4 Opgave Lav en kodelås der styrer en automatisk bom.",
    "tags": [],
    "title": "Code Lock",
    "uri": "/project/code-lock/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Node.js",
    "content": "Dette eksempel viser en måde at tage imod input fra kommandolinien.\nOpret filen readline-demo.js med følgende indhold.\nconst readline = require('readline'); const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); const getLine = (function () { const getLineGen = (async function* () { for await (const line of rl) { yield line; } })(); return async () =\u003e ((await getLineGen.next()).value); })(); const main = async () =\u003e { console.log('Type value for a'); let a = Number(await getLine()); console.log(`Got a: ${a}`); console.log('Type value for b'); let b = Number(await getLine()); console.log(`Got b: ${b}`); console.log('Result of a+b'); console.log(a + b); process.exit(0); }; main();\rNu kan du køre eksemplet med denne kommando:\nnode readline-demo.js\rNår eksemplet kører bliver der bedt om først en værdi for variablen a, dernæst for variablen b.\nHvis eksemplet køres og værdierne 42 og 31 indtastes, giver programmet dette output.\nreadline-stdin$ node .\\readline-demo.js Type value for a 42 Got a: 42 Type value for b 31 Got b: 31 Result of a+b 73 readline-stdin$\rInput via pipe Hvis du er på windows og bruger powershell kan du også give input til stdin direkte på kommandolinien.\necho \"42`n31\" | node readline-demo.js\rBemærk powershell har en række escape sekvenser der bruges til at insætte special tegn, `n bruges at indsætte et linieskift i en streng.\nBruger du mac eller linux kan du opnå samme resultat med denne kommando.\nprintf \"42\\n31\\n\" | node readline-demo.js\rMateriale Readline node.js documentation. Async/await function* generator function in javascript. Echo newline to powershell console",
    "description": "Dette eksempel viser en måde at tage imod input fra kommandolinien.\nOpret filen readline-demo.js med følgende indhold.\nconst readline = require('readline'); const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); const getLine = (function () { const getLineGen = (async function* () { for await (const line of rl) { yield line; } })(); return async () =\u003e ((await getLineGen.next()).value); })(); const main = async () =\u003e { console.log('Type value for a'); let a = Number(await getLine()); console.log(`Got a: ${a}`); console.log('Type value for b'); let b = Number(await getLine()); console.log(`Got b: ${b}`); console.log('Result of a+b'); console.log(a + b); process.exit(0); }; main();\rNu kan du køre eksemplet med denne kommando:",
    "tags": [],
    "title": "Readline on Stdin",
    "uri": "/tech/node/readline-stdin/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Arduino",
    "content": "Dette eksempel illustrerer hvordan man kan arbejde med strenge, og konvertere de enkelte bytes i en streng til hex tal med foranstillede nuller.\nchar my_str[] = {72, 101, 106, 44, 32, 10, 86, 101, 114, 100, 101, 110, 33, 0}; char outputBuffer[3]; // Helper function for converting byte value to 2-digit hex string void byte2HexStr(byte val, char* outputBuffer){ const char HEX_DIGITS[16] = \"0123456789ABCDEF\"; byte upper_nibble_index = (val \u0026 0xf0) \u003e\u003e 4; byte lower_nibble_index = val \u0026 0xf; outputBuffer[0] = HEX_DIGITS[upper_nibble_index]; outputBuffer[1] = HEX_DIGITS[lower_nibble_index]; outputBuffer[2] = '\\0'; } void setup() { Serial.begin(115200); // Output some example strings Serial.println(\"Content:\"); Serial.println(my_str); Serial.println(); Serial.println(\"Content, decimal values of bytes:\"); for(int i = 0; i \u003c sizeof(my_str); i++) { Serial.print(my_str[i], DEC); Serial.print(\" \"); } Serial.println('\\n'); Serial.println(\"Content, hex values of bytes:\"); for(int i = 0; i \u003c sizeof(my_str); i++) { Serial.print(my_str[i], HEX); Serial.print(\" \"); } Serial.println('\\n'); Serial.println(\"Content, hex values zero-padded bytes:\"); for(int i = 0; i \u003c sizeof(my_str); i++) { byte2HexStr(my_str[i], outputBuffer); Serial.print(outputBuffer); Serial.print(\" \"); } Serial.println('\\n'); Serial.println(\"Content, append to string object:\"); String myStrObject = \"\"; for(int i = 0; i \u003c sizeof(my_str); i++) { myStrObject += String(my_str[i], HEX); } Serial.println(myStrObject); Serial.println(); Serial.println(\"Content, append to string object using byte2HexStr helper:\"); myStrObject = \"\"; for(int i = 0; i \u003c sizeof(my_str); i++) { byte2HexStr(my_str[i], outputBuffer); myStrObject += outputBuffer; } Serial.println(myStrObject); Serial.println(); Serial.println(\"Content, append to string object with separator:\"); myStrObject = \"\"; for(int i = 0; i \u003c sizeof(my_str); i++) { myStrObject += String(my_str[i], HEX); // add separator except for the last element if(i \u003c (sizeof(my_str) - 1)){ myStrObject += \":\"; } } Serial.println(myStrObject); Serial.println(); Serial.println(\"Content, append to string object using byte2HexStr helper with separator:\"); myStrObject = \"\"; for(int i = 0; i \u003c sizeof(my_str); i++) { byte2HexStr(my_str[i], outputBuffer); myStrObject += outputBuffer; // add separator except for the last element if(i \u003c (sizeof(my_str) - 1)){ myStrObject += \":\"; } } Serial.println(myStrObject); Serial.println(); } void loop() { }\rNår eksemplet køres på en arduino generes dette output på seriel porten.\nBemærk at baudrate er sat til 115200.\nContent: Hej, Verden! Content, decimal values of bytes: 72 101 106 44 32 10 86 101 114 100 101 110 33 0 Content, hex values of bytes: 48 65 6A 2C 20 A 56 65 72 64 65 6E 21 0 Content, hex values zero-padded bytes: 48 65 6A 2C 20 0A 56 65 72 64 65 6E 21 00 Content, append to string object: 48656a2c20a56657264656e210 Content, append to string object using byte2HexStr helper: 48656A2C200A56657264656E2100 Content, append to string object with separator: 48:65:6a:2c:20:a:56:65:72:64:65:6e:21:0 Content, append to string object using byte2HexStr helper with separator: 48:65:6A:2C:20:0A:56:65:72:64:65:6E:21:00\rMateriale string String object StringAppendOperator",
    "description": "Dette eksempel illustrerer hvordan man kan arbejde med strenge, og konvertere de enkelte bytes i en streng til hex tal med foranstillede nuller.\nchar my_str[] = {72, 101, 106, 44, 32, 10, 86, 101, 114, 100, 101, 110, 33, 0}; char outputBuffer[3]; // Helper function for converting byte value to 2-digit hex string void byte2HexStr(byte val, char* outputBuffer){ const char HEX_DIGITS[16] = \"0123456789ABCDEF\"; byte upper_nibble_index = (val \u0026 0xf0) \u003e\u003e 4; byte lower_nibble_index = val \u0026 0xf; outputBuffer[0] = HEX_DIGITS[upper_nibble_index]; outputBuffer[1] = HEX_DIGITS[lower_nibble_index]; outputBuffer[2] = '\\0'; } void setup() { Serial.begin(115200); // Output some example strings Serial.println(\"Content:\"); Serial.println(my_str); Serial.println(); Serial.println(\"Content, decimal values of bytes:\"); for(int i = 0; i \u003c sizeof(my_str); i++) { Serial.print(my_str[i], DEC); Serial.print(\" \"); } Serial.println('\\n'); Serial.println(\"Content, hex values of bytes:\"); for(int i = 0; i \u003c sizeof(my_str); i++) { Serial.print(my_str[i], HEX); Serial.print(\" \"); } Serial.println('\\n'); Serial.println(\"Content, hex values zero-padded bytes:\"); for(int i = 0; i \u003c sizeof(my_str); i++) { byte2HexStr(my_str[i], outputBuffer); Serial.print(outputBuffer); Serial.print(\" \"); } Serial.println('\\n'); Serial.println(\"Content, append to string object:\"); String myStrObject = \"\"; for(int i = 0; i \u003c sizeof(my_str); i++) { myStrObject += String(my_str[i], HEX); } Serial.println(myStrObject); Serial.println(); Serial.println(\"Content, append to string object using byte2HexStr helper:\"); myStrObject = \"\"; for(int i = 0; i \u003c sizeof(my_str); i++) { byte2HexStr(my_str[i], outputBuffer); myStrObject += outputBuffer; } Serial.println(myStrObject); Serial.println(); Serial.println(\"Content, append to string object with separator:\"); myStrObject = \"\"; for(int i = 0; i \u003c sizeof(my_str); i++) { myStrObject += String(my_str[i], HEX); // add separator except for the last element if(i \u003c (sizeof(my_str) - 1)){ myStrObject += \":\"; } } Serial.println(myStrObject); Serial.println(); Serial.println(\"Content, append to string object using byte2HexStr helper with separator:\"); myStrObject = \"\"; for(int i = 0; i \u003c sizeof(my_str); i++) { byte2HexStr(my_str[i], outputBuffer); myStrObject += outputBuffer; // add separator except for the last element if(i \u003c (sizeof(my_str) - 1)){ myStrObject += \":\"; } } Serial.println(myStrObject); Serial.println(); } void loop() { }\rNår eksemplet køres på en arduino generes dette output på seriel porten.",
    "tags": [],
    "title": "Hex String",
    "uri": "/tech/arduino/hex-string/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Arduino",
    "content": "Dette eksempel viser hvordan man kan bruge JSON data formatet til at udveksle information med en arduino og sende kommandoer via seriel porten.\nVed at sende en passende kommando kan man ændre på hastighed og duty cycle for en blinkende LED.\nFor nemt at kunne arbejde med JSON i Arduino koden benyttes biblioteket Arduino JSON. Derfor er det nødvendigt at installere dette på udviklingsmaskinen, inden denne sketch kan kompileres, det klares via. Arduino Library Manager, se hvordan du installerer det her.\n#include \u003cArduinoJson.h\u003e // Allocate the JSON document // // Inside the brackets, 200 is the capacity of the memory pool in bytes. // Don't forget to change this value to match your JSON document. // Use arduinojson.org/v6/assistant to compute the capacity. // StaticJsonDocument\u003c200\u003e doc; // StaticJsonDocument\u003cN\u003e allocates memory on the stack, it can be // replaced by DynamicJsonDocument which allocates in the heap. // DynamicJsonDocument doc(200); int periodMs = 2000; int dutyPct = 50; void setup() { // initialize digital pin LED_BUILTIN as an output. pinMode(LED_BUILTIN, OUTPUT); Serial.begin(115200); // wait for serial port to connect. Needed for native USB while (!Serial) { continue; } Serial.println(\"Ready for commands\"); } void loop() { myLedControl(); parseCommands(); } // Example of test input json /* {\"ts\": 1000, \"duty\": 10 } */ void parseCommands() { // reply only when you receive data: if (Serial.available() \u003e 0) { // Deserialize the JSON document DeserializationError error = deserializeJson(doc, Serial); Serial.println(\"Received:\"); serializeJson(doc, Serial); Serial.println(); // Test if parsing succeeds. if (error) { Serial.print(F(\"deserializeJson() failed: \")); Serial.println(error.c_str()); return; } if (doc[\"ts\"]) { unsigned int ts = doc[\"ts\"]; Serial.print(\"got ts: \"); Serial.println(ts); periodMs = ts; } if (doc[\"duty\"]) { int duty = doc[\"duty\"]; Serial.print(\"got duty: \"); Serial.println(duty); duty = constrain(duty, 0, 100); Serial.print(\"constrained duty to [0, 100], using: \"); Serial.println(duty); dutyPct = duty; } } } // toggle the builtin LED state void myLedControl() { //map(value, fromLow, fromHigh, toLow, toHigh) int highDelayMs = map(dutyPct, 0, 100, 0, periodMs); int lowDelayMs = periodMs - highDelayMs; digitalWrite(LED_BUILTIN, HIGH); delay(highDelayMs); digitalWrite(LED_BUILTIN, LOW); delay(lowDelayMs); }\rNB! Serielporten er sat til at køre 115200 Baud.\nPrøv at sende nogle kommandoer vha. serial monitor, og læg mærke til hvordan blinkrate og duty cycle ændres for den inbyggede LED på Arduino.\n{\"ts\": 1000, \"duty\": 10 }\r{\"ts\": 500, \"duty\": 80 }\rNår eksemplet køres på en Arduino og de to ovenstående kommandoer sendes en ad gangen, kommer der dette output fra Arduino på seriel porten.\nReady for commands Received: {\"ts\":1000,\"duty\":10} got ts: 1000 got duty: 10 constrained duty to [0, 100], using: 10 Received: {\"ts\":500,\"duty\":80} got ts: 500 got duty: 80 constrained duty to [0, 100], using: 80\rMateriale Arduino. Arduino JSON Arduino JSON installation JSON Serial.begin() Serial.print() Serial.println() Serial.available() constrain() map() delay() pinMode() digitalWrite()",
    "description": "Dette eksempel viser hvordan man kan bruge JSON data formatet til at udveksle information med en arduino og sende kommandoer via seriel porten.\nVed at sende en passende kommando kan man ændre på hastighed og duty cycle for en blinkende LED.\nFor nemt at kunne arbejde med JSON i Arduino koden benyttes biblioteket Arduino JSON. Derfor er det nødvendigt at installere dette på udviklingsmaskinen, inden denne sketch kan kompileres, det klares via. Arduino Library Manager, se hvordan du installerer det her.",
    "tags": [],
    "title": "Json Command Receiver",
    "uri": "/tech/arduino/json-command-receiver/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Arduino",
    "content": "Dette eksempel illustrerer, hvordan man kan bruge function pointers til at køre forskellige opgaver med hvert sit interval, uden at de blokerer for hinanden i længere tid end det tager at eksekvere en enkelt opgave.\ntypedef struct MyTask { void (*handler)(); int intervalMs; int taskId; unsigned long lastRunMs; } MyTask; // Forward declaration of the task runner functions void task_main(); void task_A(); void task_B(); void task_C(); MyTask tasks[] = { {.handler=task_main}, {task_A,300}, {task_B,500}, {task_C,3000} }; const int arrSize = sizeof(tasks)/sizeof(MyTask); void setup() { // initialize serial communication at 115200 bits per second: Serial.begin(115200); Serial.print(\"Task count: \"); Serial.println(arrSize); for(int i=0 ; i\u003carrSize; i++){ if(tasks[i].intervalMs \u003c= 0){ tasks[i].intervalMs = (i+1)*100; } String msg = \"\"; msg = \"task id: \"; msg += i; msg += \", interval \"; msg += tasks[i].intervalMs; Serial.println(msg); } Serial.println(\"Setup DONE\"); } // example of non-blocking asyncronous wait loop using function pointers void loop() { for(int i=0 ; i\u003carrSize; i++){ runInterval(\u0026tasks[i]); } } void runInterval(struct MyTask *t){ unsigned long tickMs = millis(); unsigned long diffMs = tickMs - t-\u003elastRunMs; // Handle first run if(0 == t-\u003elastRunMs){ t-\u003elastRunMs = tickMs; } bool shouldRun = (t-\u003eintervalMs \u003c diffMs); if(!shouldRun){ return; } // Store last run t-\u003elastRunMs = tickMs; // Perform the process by calling the handler function (t-\u003ehandler)(); } // Create some tasks to run in the example void task_main(){ static int runCount = 0; Serial.print(\".\"); if(0 == runCount % 30){ Serial.println(); Serial.print(runCount); Serial.print(\" : \"); } runCount++; } void task_A(){ Serial.print(\"A\"); } void task_B(){ Serial.print(\"B\"); } void task_C(){ Serial.print(\"C\"); }\rNår eksemplet køres på en arduino generes dette output på seriel porten.\nBemærk at baudrate er sat til 115200.\nTask count: 4 task id: 0, interval 100 task id: 1, interval 300 task id: 2, interval 500 task id: 3, interval 3000 Setup DONE . 0 : .A..B.A...A.B..A...BA...A..B.A...A.B..A...CBA.. 30 : .A..B.A...A.B..A...BA...A..B.A...A.B..A...CBA.. 60 : .A..B.A...A.B..A...BA...A..B.A...A.B..A...CBA.. 90 : .A..B.A...A.B..A...BA...A..B.A...A.B..A..C.BA.. 120 : .A.B..A...AB...A..B.A...A.B..A..A.B..A...CBA...\rMateriale How to use typedef struct tagName Designated initializers",
    "description": "Dette eksempel illustrerer, hvordan man kan bruge function pointers til at køre forskellige opgaver med hvert sit interval, uden at de blokerer for hinanden i længere tid end det tager at eksekvere en enkelt opgave.\ntypedef struct MyTask { void (*handler)(); int intervalMs; int taskId; unsigned long lastRunMs; } MyTask; // Forward declaration of the task runner functions void task_main(); void task_A(); void task_B(); void task_C(); MyTask tasks[] = { {.handler=task_main}, {task_A,300}, {task_B,500}, {task_C,3000} }; const int arrSize = sizeof(tasks)/sizeof(MyTask); void setup() { // initialize serial communication at 115200 bits per second: Serial.begin(115200); Serial.print(\"Task count: \"); Serial.println(arrSize); for(int i=0 ; i\u003carrSize; i++){ if(tasks[i].intervalMs \u003c= 0){ tasks[i].intervalMs = (i+1)*100; } String msg = \"\"; msg = \"task id: \"; msg += i; msg += \", interval \"; msg += tasks[i].intervalMs; Serial.println(msg); } Serial.println(\"Setup DONE\"); } // example of non-blocking asyncronous wait loop using function pointers void loop() { for(int i=0 ; i\u003carrSize; i++){ runInterval(\u0026tasks[i]); } } void runInterval(struct MyTask *t){ unsigned long tickMs = millis(); unsigned long diffMs = tickMs - t-\u003elastRunMs; // Handle first run if(0 == t-\u003elastRunMs){ t-\u003elastRunMs = tickMs; } bool shouldRun = (t-\u003eintervalMs \u003c diffMs); if(!shouldRun){ return; } // Store last run t-\u003elastRunMs = tickMs; // Perform the process by calling the handler function (t-\u003ehandler)(); } // Create some tasks to run in the example void task_main(){ static int runCount = 0; Serial.print(\".\"); if(0 == runCount % 30){ Serial.println(); Serial.print(runCount); Serial.print(\" : \"); } runCount++; } void task_A(){ Serial.print(\"A\"); } void task_B(){ Serial.print(\"B\"); } void task_C(){ Serial.print(\"C\"); }\rNår eksemplet køres på en arduino generes dette output på seriel porten.",
    "tags": [],
    "title": "Task Loop using Function Pointers",
    "uri": "/tech/arduino/task-loop-functions/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e React",
    "content": "Dette eksempel bygger videre på react eksemplet med firestore, og demonstrationen af hvordan man kan uploade data med node.js.\nStatisk data visning Først laves en fil med samme struktur som forventes at være i firestore databasen, når upload scriptet har kørt nogle gange. Data strukturen laves i filen src/lib/fake_weather.js, med dette indhold.\nimport firebase from \"../lib/Firebase\"; const Timestamp = firebase.firestore.Timestamp; // helper for generating firestore timestamps const t = timeString =\u003e Timestamp.fromDate(new Date(timeString)); // Fake data - could come from a database or similar const data = [ { lastUpdate: t('2020-03-13T11:30:42'), key: \"dataIdOne\", windMeasurements: [ { time: t('2020-03-13T10:20:42'), windSpeed: 12, windDir: 277 }, { time: t('2020-03-13T11:30:42'), windSpeed: 7, windDir: 270 }, ] }, { lastUpdate: t(\"2020-03-14T09:31:10\"), key: \"dataIdTwo\", windMeasurements: [ { time: t(\"2020-03-14T09:07:34\"), windSpeed: 17, windDir: 179 }, { time: t(\"2020-03-14T09:31:10\"), windSpeed: 25, windDir: 183 }, { time: t(\"2020-03-14T11:30:42\"), windSpeed: 12, windDir: 180 }, { time: t(\"2020-03-14T12:37:20\"), windSpeed: 23, windDir: 171 }, ] }, ]; export default data;\rDerefter laves en ny react komponent i src/components/Weather.js, som viser indholdet i browseren.\nimport React, { useEffect, useState } from \"react\"; import fakeWeatherData from '../lib/fake_weather'; function Weather() { return ( \u003cdiv\u003e \u003ch1\u003eFake Weather data (from file)\u003c/h1\u003e \u003cMeasurementList weatherData={fakeWeatherData} /\u003e \u003c/div\u003e ); } const MeasurementList = props =\u003e { return ( \u003cdiv\u003e { props.weatherData.map(it =\u003e ( \u003cMeasurementDay key={it.key} item={it} /\u003e )) } \u003c/div\u003e ) } const MeasurementDay = props =\u003e { return ( \u003cdiv\u003e \u003ch2\u003eFake wind data, Updated: {props.item.lastUpdate.toDate().toLocaleString()}\u003c/h2\u003e \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eTime\u003c/th\u003e \u003cth\u003eWind speed\u003c/th\u003e \u003cth\u003eWind direction\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e { props.item.windMeasurements.map((it, i) =\u003e ( \u003ctr key={i}\u003e \u003ctd\u003e{it.time.toDate().toISOString()}\u003c/td\u003e \u003ctd\u003e{it.windSpeed}\u003c/td\u003e \u003ctd\u003e{it.windDir}\u003c/td\u003e \u003c/tr\u003e )) } \u003c/tbody\u003e \u003c/table\u003e \u003c/div\u003e ); }; export default Weather;\rBemærk hvordan vi først importeret datastrukturen fra filen src/lib/fake_weather.js, sender den ind i MeasurementList komponenten og itererer over indholdet af data i MeasurementList og MeasurementBody komponenterner.\nWeather komponenten indsættes i src/App.js, således:\nimport React from 'react'; import './App.css'; import Clock from './components/Clock' import Highscore from './components/Highscore'; import Hotdog from './components/Hotdog'; import Weather from './components/Weather'; function App() { return ( \u003cdiv className=\"App\"\u003e \u003cClock /\u003e \u003cHotdog /\u003e \u003cWeather /\u003e \u003cHighscore /\u003e \u003c/div\u003e ); } export default App;\rFirestore itegration For at hente data ud fra firestore skal der tilføjes mere kode i Weather komponenten.\nimport React, { useEffect, useState } from \"react\"; import fakeWeatherData from '../lib/fake_weather'; // import the firebase configuration settings import firebase from \"../lib/Firebase\"; // initialize firestore const firestore = firebase.firestore(); function Weather() { const handleData = snapshot =\u003e { if (snapshot.empty) { console.log(\"No matching documents\"); return; } let weatherDataArray = []; snapshot.forEach(doc =\u003e { let myData = doc.data(); myData[\"key\"] = doc.id; weatherDataArray.push(myData); }) setWeatherData(weatherDataArray); }; const subscribeToRealtimeUpdates = () =\u003e { const query = firestore.collection(\"weather\") .orderBy('lastUpdate', 'desc') .limit(3); query.onSnapshot(handleData); }; useEffect( () =\u003e { subscribeToRealtimeUpdates(); }, // provide empty array to avoid infinite loop [] ); const [weatherData, setWeatherData] = useState([]); return ( \u003cdiv\u003e \u003ch1\u003eFake Weather data from firebase\u003c/h1\u003e \u003cMeasurementList weatherData={weatherData} /\u003e \u003ch1\u003eFake Weather data (from file)\u003c/h1\u003e \u003cMeasurementList weatherData={fakeWeatherData} /\u003e \u003c/div\u003e ); } const MeasurementList = props =\u003e { return ( \u003cdiv\u003e { props.weatherData.map(it =\u003e ( \u003cMeasurementDay key={it.key} item={it} /\u003e )) } \u003c/div\u003e ) } const MeasurementDay = props =\u003e { return ( \u003cdiv\u003e \u003ch2\u003eFake wind data, Updated: {props.item.lastUpdate.toDate().toLocaleString()}\u003c/h2\u003e \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eTime\u003c/th\u003e \u003cth\u003eWind speed\u003c/th\u003e \u003cth\u003eWind direction\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e { props.item.windMeasurements.map((it, i) =\u003e ( \u003ctr key={i}\u003e \u003ctd\u003e{it.time.toDate().toISOString()}\u003c/td\u003e \u003ctd\u003e{it.windSpeed}\u003c/td\u003e \u003ctd\u003e{it.windDir}\u003c/td\u003e \u003c/tr\u003e )) } \u003c/tbody\u003e \u003c/table\u003e \u003c/div\u003e ); }; export default Weather;\rFørst importeres firebase konfigurationen, og firebase initialiseres.\nDerefter bruges oprettes forbindelse til firebase og der abbonneres på databaseopdateringer.\nEndelig tilføjes en enstra MeasurementList komponent, så indholdet vises på skærmen.\nHvis appen startes, vi der nu automatisk opdateres med nye målinger i tabellerne, når de tilføjes til firestore databasen med upload scriptet.\nApp Demo Denne demo viser resultatet af anstrengelserne og skulle gerne minde om det du kan se på figuren herunder.\nNår du åbner siden burde du se noget i stil med det der er vist på figuren herunder.\nBemærk: For at kunne tilføje data til databasen, kræver det at du selv laver det på din egen maskine.\nScreenshot af den kørende react app. Materiale Firestore upload eksempel firebase.firestore.Timestamp firebase.firestore.Query.orderBy() javascript Date object - MDN Documentation",
    "description": "Dette eksempel bygger videre på react eksemplet med firestore, og demonstrationen af hvordan man kan uploade data med node.js.\nStatisk data visning Først laves en fil med samme struktur som forventes at være i firestore databasen, når upload scriptet har kørt nogle gange. Data strukturen laves i filen src/lib/fake_weather.js, med dette indhold.\nimport firebase from \"../lib/Firebase\"; const Timestamp = firebase.firestore.Timestamp; // helper for generating firestore timestamps const t = timeString =\u003e Timestamp.fromDate(new Date(timeString)); // Fake data - could come from a database or similar const data = [ { lastUpdate: t('2020-03-13T11:30:42'), key: \"dataIdOne\", windMeasurements: [ { time: t('2020-03-13T10:20:42'), windSpeed: 12, windDir: 277 }, { time: t('2020-03-13T11:30:42'), windSpeed: 7, windDir: 270 }, ] }, { lastUpdate: t(\"2020-03-14T09:31:10\"), key: \"dataIdTwo\", windMeasurements: [ { time: t(\"2020-03-14T09:07:34\"), windSpeed: 17, windDir: 179 }, { time: t(\"2020-03-14T09:31:10\"), windSpeed: 25, windDir: 183 }, { time: t(\"2020-03-14T11:30:42\"), windSpeed: 12, windDir: 180 }, { time: t(\"2020-03-14T12:37:20\"), windSpeed: 23, windDir: 171 }, ] }, ]; export default data;\rDerefter laves en ny react komponent i src/components/Weather.js, som viser indholdet i browseren.",
    "tags": [],
    "title": "React + Firestore Fake Weather",
    "uri": "/tech/react/react-fake-weather/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Node.js",
    "content": "Dette eksempel viser hvordan man kan læse fra en serielport vha. node.js. For at kunne køre eksemplet på en meningsfuld måde, kræver det at der er tilsluttet en enhed til serielporten på computeren. Ydermere skal denne enhed sende beskeder afsted i json format, og porten skal være sat op med passende instillinger.\nJeg har tidligere lavet et eksempel, der kan sende json beskeder som output på serielporten på en Arduino, og det er disse data der forventes at være input til dette eksempel.\nFørst skal der laves et projekt så node kan finde ud af at køre programmet, og har en package.json fil til at holde styr på projektet og afhængigheder af biblioteksmoduler.\nStart med at lave en mappe, som kan indeholde dit projekt. Kald den f.eks. serial-json. I denne mappe skal du køre følgende kommando, for at oprette projekt filen package.json.\nnpm init -y\rDernæst har du mulighed for at installere disse afhængigheder.\nnpm install serialport --save\r{ \"name\": \"serial-json-read\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\" }, \"author\": \"\", \"license\": \"ISC\", \"dependencies\": { \"serialport\": \"^8.0.7\" } }\rBemærk de to pakker der er listet under afhængigheder.\nDerefter skal du oprette filen serial-json-read.js med følgende indhold.\nconst SerialPort = require(\"serialport\"); const Readline = require(\"@serialport/parser-readline\"); // Change the serial port to fit your serup // on linux the device could look like this: \"/dev/tty-usbserial1\" const serialPortName = \"COM6\"; const portOptions = { baudRate: 115200 }; const port = new SerialPort(serialPortName, portOptions); // Open errors will be emitted as an error event port.on('error', function(err) { console.log('Error: ', err.message) }); const parser = port.pipe(new Readline({ delimiter: \"\\r\\n\" })); parser.on(\"data\", doSomethingWithData); // Callback function for processing the received data function doSomethingWithData(data) { console.log(\"--- Line received on serial port ------------\"); console.log('Raw data: ', data); // parse json data const obj = JSON.parse(data); // print object console.log(\"Parsed object:\"); console.log(obj); console.log(\"Contents of object property:\"); console.log(obj.tagId); console.log(\"--- data processing done -------------------\"); }\rNB! Du skal ændre navnet på serielporten, så det passer med den port din Arduino er tilsluttet til.\nNu kan du køre eksemplet med denne kommando:\nnode serial-json-read.js\rFor at få noget meningsfuldt ud af at køre eksemplet skal der, som nævnt ovenfor, være en Arduino tilkoblet til en serielporten på computeren, og denne Arduino skal sende beskeder i det forventede json format. Når dette ellers er opfyldt vil man se noget lignende dette output i terminalen.\n$ node .\\serial-json-read.js --- Line received on serial port ------------ Raw data: {\"waitTime\":2307,\"tagIdIndex\":4,\"tagId\":\"E2 00 00 1B 63 15 02 48 15 90 DB 2C\"} Parsed object: { waitTime: 2307, tagIdIndex: 4, tagId: 'E2 00 00 1B 63 15 02 48 15 90 DB 2C' } Contents of object property: E2 00 00 1B 63 15 02 48 15 90 DB 2C --- data processing done ------------------- --- Line received on serial port ------------ Raw data: {\"waitTime\":3073,\"tagIdIndex\":3,\"tagId\":\"E2 00 00 1B 63 15 02 48 17 20 DA F4\"} Parsed object: { waitTime: 3073, tagIdIndex: 3, tagId: 'E2 00 00 1B 63 15 02 48 17 20 DA F4' } Contents of object property: E2 00 00 1B 63 15 02 48 17 20 DA F4 --- data processing done ------------------- --- Line received on serial port ------------ Raw data: {\"waitTime\":6930,\"tagIdIndex\":2,\"tagId\":\"E2 00 00 1B 63 15 02 48 17 00 DA F8\"} Parsed object: { waitTime: 6930, tagIdIndex: 2, tagId: 'E2 00 00 1B 63 15 02 48 17 00 DA F8' } Contents of object property: E2 00 00 1B 63 15 02 48 17 00 DA F8 --- data processing done -------------------\rMateriale JSON Beacon eksemplet til Arduino Node Serialport Node Serialport Documentation JSON.parse()",
    "description": "Dette eksempel viser hvordan man kan læse fra en serielport vha. node.js. For at kunne køre eksemplet på en meningsfuld måde, kræver det at der er tilsluttet en enhed til serielporten på computeren. Ydermere skal denne enhed sende beskeder afsted i json format, og porten skal være sat op med passende instillinger.\nJeg har tidligere lavet et eksempel, der kan sende json beskeder som output på serielporten på en Arduino, og det er disse data der forventes at være input til dette eksempel.",
    "tags": [],
    "title": "Serial Json",
    "uri": "/tech/node/serial-json/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Arduino",
    "content": "Dette eksempel illustrerer hvordan man kan generere json output på seriel porten, og er tænkt som en en stub der kan bruges til at arbejde med seriel input på en en anden computer, f.eks. vha. node.js.\n#include \u003cArduinoJson.h\u003e const int WAIT_MS_MIN = 500; const int WAIT_MS_MAX = 8000; const unsigned char TAG_COUNT = 5; char* tagIds[TAG_COUNT] = { \"4B 61 73 70 65 72 36 37 38 39 3A 3B\", \"E2 00 00 1B 63 15 02 48 16 00 DB 24\", \"E2 00 00 1B 63 15 02 48 17 00 DA F8\", \"E2 00 00 1B 63 15 02 48 17 20 DA F4\", \"E2 00 00 1B 63 15 02 48 15 90 DB 2C\", }; int pinOne = 2; int pinTwo = 3; void setup() { Serial.begin(115200); pinMode(pinOne, INPUT_PULLUP); pinMode(pinTwo, INPUT_PULLUP); } void loop() { int waitTime = random(WAIT_MS_MIN, WAIT_MS_MAX); int tagIdIndex = random(0, TAG_COUNT); bool isRandom = true; if(!digitalRead(pinOne)){ tagIdIndex = 0; isRandom = false; waitTime = 300; } if(!digitalRead(pinTwo)){ tagIdIndex = 1; isRandom = false; waitTime = 150; } DynamicJsonDocument doc(1024); // Insert some debugging information doc[\"isRandom\"] = isRandom; doc[\"waitTime\"] = waitTime; doc[\"tagIdIndex\"] = tagIdIndex; // Insert the selected tag ID doc[\"tagId\"] = tagIds[tagIdIndex]; serializeJson(doc, Serial); Serial.println(); delay(waitTime); }\rDer vælges en tilfældig værdi i tagIds arrayet, som så serialiseres som json sammen med oplysning om index og delay tiden, og udskrives på serielporten med tilfældige tidsintervaller.\nDet er også mulighed for at vælge 2 bestemte tags ved at trække input pin 2 eller 3 lav, ved fysisk at forbinde til GND.\nNB! Serielporten er sat til at køre 115200 Baud.\nFor nemt at kunne arbejde med JSON i Arduino koden benyttes biblioteket Arduino JSON. Derfor er det nødvendigt at installere dette på udviklingsmaskinen, inden denne sketch kan kompileres, det klares via. Arduino Library Manager, se hvordan du installerer det her.\nEksempel på output Output på serielporten kommer til at se ca. sådan ud. Bemærk at det er kopieret fra Serial Monitor i Arduino IDE, og timestamps er slået til, derfor er der et tidsstempel på alle linier i output. Tidstempler, delay intervaller og rækkefølgen af tagId’er vil være forskellig for hver kørsel, da de bliver genereret tilfældigt.\n21:00:56.034 -\u003e {\"waitTime\":2492,\"tagIdIndex\":2,\"tagId\"B 63 15 02 48 17 00 DA F8\"} 21:00:56.034 -\u003e {\"waitTime\":2307,\"tagIdIndex\":4,\"tagId\":\"E2 00 00 1B 63 15 02 48 15 90 DB 2C\"} 21:00:58.350 -\u003e {\"waitTime\":3073,\"tagIdIndex\":3,\"tagId\":\"E2 00 00 1B 63 15 02 48 17 20 DA F4\"} 21:01:01.410 -\u003e {\"waitTime\":6930,\"tagIdIndex\":2,\"tagId\":\"E2 00 00 1B 63 15 02 48 17 00 DA F8\"} 21:01:08.346 -\u003e {\"waitTime\":3044,\"tagIdIndex\":3,\"tagId\":\"E2 00 00 1B 63 15 02 48 17 20 DA F4\"} 21:01:11.414 -\u003e {\"waitTime\":5923,\"tagIdIndex\":4,\"tagId\":\"E2 00 00 1B 63 15 02 48 15 90 DB 2C\"} 21:01:17.328 -\u003e {\"waitTime\":4940,\"tagIdIndex\":0,\"tagId\":\"4B 61 73 70 65 72 36 37 38 39 3A 3B\"} 21:01:22.256 -\u003e {\"waitTime\":2492,\"tagIdIndex\":2,\"tagId\":\"E2 00 00 1B 63 15 02 48 17 00 DA F8\"} 21:01:24.769 -\u003e {\"waitTime\":5987,\"tagIdIndex\":3,\"tagId\":\"E2 00 00 1B 63 15 02 48 17 20 DA F4\"}\rMateriale Arduino. Arduino JSON Arduino JSON installation Serial.begin() random() delay() pinMode() digitalRead()",
    "description": "Dette eksempel illustrerer hvordan man kan generere json output på seriel porten, og er tænkt som en en stub der kan bruges til at arbejde med seriel input på en en anden computer, f.eks. vha. node.js.\n#include \u003cArduinoJson.h\u003e const int WAIT_MS_MIN = 500; const int WAIT_MS_MAX = 8000; const unsigned char TAG_COUNT = 5; char* tagIds[TAG_COUNT] = { \"4B 61 73 70 65 72 36 37 38 39 3A 3B\", \"E2 00 00 1B 63 15 02 48 16 00 DB 24\", \"E2 00 00 1B 63 15 02 48 17 00 DA F8\", \"E2 00 00 1B 63 15 02 48 17 20 DA F4\", \"E2 00 00 1B 63 15 02 48 15 90 DB 2C\", }; int pinOne = 2; int pinTwo = 3; void setup() { Serial.begin(115200); pinMode(pinOne, INPUT_PULLUP); pinMode(pinTwo, INPUT_PULLUP); } void loop() { int waitTime = random(WAIT_MS_MIN, WAIT_MS_MAX); int tagIdIndex = random(0, TAG_COUNT); bool isRandom = true; if(!digitalRead(pinOne)){ tagIdIndex = 0; isRandom = false; waitTime = 300; } if(!digitalRead(pinTwo)){ tagIdIndex = 1; isRandom = false; waitTime = 150; } DynamicJsonDocument doc(1024); // Insert some debugging information doc[\"isRandom\"] = isRandom; doc[\"waitTime\"] = waitTime; doc[\"tagIdIndex\"] = tagIdIndex; // Insert the selected tag ID doc[\"tagId\"] = tagIds[tagIdIndex]; serializeJson(doc, Serial); Serial.println(); delay(waitTime); }\rDer vælges en tilfældig værdi i tagIds arrayet, som så serialiseres som json sammen med oplysning om index og delay tiden, og udskrives på serielporten med tilfældige tidsintervaller.",
    "tags": [],
    "title": "Json Beacon",
    "uri": "/tech/arduino/json-beacon/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech",
    "content": "Eksempler med Arduino.",
    "description": "Eksempler med Arduino.",
    "tags": [],
    "title": "Arduino",
    "uri": "/tech/arduino/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech",
    "content": "Noter og eksempler med C#.",
    "description": "Noter og eksempler med C#.",
    "tags": [],
    "title": "C#",
    "uri": "/tech/c-sharp/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e React \u003e React Intro",
    "content": "",
    "description": "",
    "tags": [],
    "title": "My App Npm",
    "uri": "/tech/react/react-intro/my-app-npm/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech",
    "content": "Eksempler med React.",
    "description": "Eksempler med React.",
    "tags": [],
    "title": "React",
    "uri": "/tech/react/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "I dette eksempel demonstreres hvordan man kan benytte forgreninger og boolske udtryk til at ændre bevægelsesretningen på en cirkel, så det minder om en bold, der hopper når den rammer siderne.\n// Lav en variabel og kald den x // giv x værdien 200 let x = 200; // opret flere variabler let xSpeed = 5; let y = 200; let ySpeed = 3; let c; let cFill; // Definer en funktion der kan ændre fyld og stregfarve function changeColor() { c = color(random(255), random(255), random(255)); cFill = color(random(255), random(255), random(255)); strokeWeight(10); stroke(c); fill(cFill); } function setup() { createCanvas(windowWidth, windowHeight); const speedScale = 128 xSpeed = windowWidth / speedScale ySpeed = windowHeight / speedScale changeColor(); } function draw() { background(c); rect(0, 0, width, height); // opret variabler til radius og diameter let r = 60; let d = r * 2; // tegn en cirkel med centrum i (x, y) og diameter d circle(x, y, d); // hvis x er større end bredden af lærredet // så sæt xSpeed til -xSpeed let isPastRightSide = width \u003c x + r if (isPastRightSide) { changeColor(); xSpeed = -xSpeed; } let isPastLeftSide = 0 \u003e x - r if (isPastLeftSide) { changeColor(); xSpeed = -xSpeed; } let isBelowBottom = height \u003c y + r let isAboveTop = 0 \u003e y - r if (isBelowBottom || isAboveTop) { changeColor(); ySpeed = -ySpeed; } x = x + xSpeed; // samme som // y = y + ySpeed; y += ySpeed; }\rDemo Prøv det kørende eksempel\nMateriale setup() draw() background() fill() stroke() strokeWeight() color() random() circle() function if-else Conditional operators: if, ‘?’ logical operators",
    "description": "I dette eksempel demonstreres hvordan man kan benytte forgreninger og boolske udtryk til at ændre bevægelsesretningen på en cirkel, så det minder om en bold, der hopper når den rammer siderne.\n// Lav en variabel og kald den x // giv x værdien 200 let x = 200; // opret flere variabler let xSpeed = 5; let y = 200; let ySpeed = 3; let c; let cFill; // Definer en funktion der kan ændre fyld og stregfarve function changeColor() { c = color(random(255), random(255), random(255)); cFill = color(random(255), random(255), random(255)); strokeWeight(10); stroke(c); fill(cFill); } function setup() { createCanvas(windowWidth, windowHeight); const speedScale = 128 xSpeed = windowWidth / speedScale ySpeed = windowHeight / speedScale changeColor(); } function draw() { background(c); rect(0, 0, width, height); // opret variabler til radius og diameter let r = 60; let d = r * 2; // tegn en cirkel med centrum i (x, y) og diameter d circle(x, y, d); // hvis x er større end bredden af lærredet // så sæt xSpeed til -xSpeed let isPastRightSide = width \u003c x + r if (isPastRightSide) { changeColor(); xSpeed = -xSpeed; } let isPastLeftSide = 0 \u003e x - r if (isPastLeftSide) { changeColor(); xSpeed = -xSpeed; } let isBelowBottom = height \u003c y + r let isAboveTop = 0 \u003e y - r if (isBelowBottom || isAboveTop) { changeColor(); ySpeed = -ySpeed; } x = x + xSpeed; // samme som // y = y + ySpeed; y += ySpeed; }\rDemo Prøv det kørende eksempel",
    "tags": [
      "Branching",
      "Conditions"
    ],
    "title": "Ball Bounce",
    "uri": "/tech/p5js/ball-bounce/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Ball Bounce",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Ball Bounce demo",
    "uri": "/tech/p5js/ball-bounce/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tags",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tag :: Branching",
    "uri": "/tags/branching/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tags",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tag :: Conditions",
    "uri": "/tags/conditions/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech",
    "content": "Hvis man gerne vil have tegnet en graf over noget data der er opsamlet, f.eks. fra en sensor, kan det være nyttigt at benytte et bibliotek af funktioner, som kan klare tegnearbejdet, så man ikke selv skal programmere det hele fra bunden.\nChart.js er et eksempel på sådan et bibliotek, der kan bruges til at få en graf frem på en hjemmeside.\nEksempel I dette eksempel vises hvordan man kan indsætte en graf med to datasæt.\n\u003ccanvas id=\"myChart\"\u003e\u003c/canvas\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/chart.js@2.8.0\"\u003e\u003c/script\u003e \u003cscript src=\"chart-demo.js\"\u003e\u003c/script\u003e\rFørst skal der laves et canvas element, som kan indeholde grafen. Dernæst skal chart.js bibilioteket loades, hvilket kan gøres på flere måder som beskrevet i denne guide.\nDerefter skal grafen laves hvilket gøres ved hjælp af javascript.\nI dette eksempel er opsætning af grafen lavet i filen chart-demo.js, som så er hentet ind i html siden som vist ovenfor.\nHerunder ses indholdet af filen chart-demo.js\nvar ctx = document.getElementById(\"myChart\").getContext(\"2d\"); const xValues = [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\" ]; // generate some random values to plot const yValues = []; for (let i = 0; i \u003c xValues.length; i++) { yValues.push(Math.random() * 50); } var chart = new Chart(ctx, { // The type of chart we want to create type: \"line\", // The data for our dataset data: { labels: xValues, datasets: [ { label: \"Random dataset\", borderColor: \"rgb(255, 99, 132)\", data: yValues, fill: false }, { label: \"Fixed dataset\", borderColor: \"rgb(132, 99, 255)\", data: [20, 5, 5, 2, 24, 13, 25], fill: false } ] }, });\rBemærk at den ene serie består af faste værdier, og den anden er en række tilfældigt generede tal.\nDemo Her ses resultatet af anstrengelserne. Hvis du geninlæser siden gennereres der ny tilfældige værdier for den ene serie.\nMateriale Chart.js Getting Started - Chart.js Line chart - Chart.js",
    "description": "Hvis man gerne vil have tegnet en graf over noget data der er opsamlet, f.eks. fra en sensor, kan det være nyttigt at benytte et bibliotek af funktioner, som kan klare tegnearbejdet, så man ikke selv skal programmere det hele fra bunden.\nChart.js er et eksempel på sådan et bibliotek, der kan bruges til at få en graf frem på en hjemmeside.\nEksempel I dette eksempel vises hvordan man kan indsætte en graf med to datasæt.",
    "tags": [],
    "title": "Chart.js",
    "uri": "/tech/chartjs/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Dette eksempel tegner cirkler med tilfældigt valgt fyldfarve. Når venstre museknap er trykket ned skiftes til fyldfarver i tilfældige gråtoner.\nI eksemplet viser hvordan man kan bruge en betingelse (museknappen er trykket ned), og en en forgrening (if-sætning) til at få programmet til at ændre opførsel.\nfunction setup() { createCanvas(windowWidth, windowHeight); } function draw() { if (mouseIsPressed) { fill(random(255)); } else { fill(random(255), random(255),random(255)); } circle(mouseX, mouseY, 80); }\rDemo Prøv det kørende eksempel\nMateriale setup() createCanvas() windowWidth windowHeight draw() mouseIsPressed random() fill() ellipse()",
    "description": "Dette eksempel tegner cirkler med tilfældigt valgt fyldfarve. Når venstre museknap er trykket ned skiftes til fyldfarver i tilfældige gråtoner.\nI eksemplet viser hvordan man kan bruge en betingelse (museknappen er trykket ned), og en en forgrening (if-sætning) til at få programmet til at ændre opførsel.\nfunction setup() { createCanvas(windowWidth, windowHeight); } function draw() { if (mouseIsPressed) { fill(random(255)); } else { fill(random(255), random(255),random(255)); } circle(mouseX, mouseY, 80); }\rDemo Prøv det kørende eksempel",
    "tags": [],
    "title": "Random Color",
    "uri": "/tech/p5js/random-color/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Random Color",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Random Color demo",
    "uri": "/tech/p5js/random-color/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Dette eksempel er baseret på ideer fra denne video.\nlet r; let factor = 0; let total = 0; function setup() { createCanvas(windowWidth, windowHeight); const maxSize = min(width, height); r = maxSize / 2 - 16; } function getVector(index, total) { const angle = map(index % total, 0, total, 0, TWO_PI); const v = p5.Vector.fromAngle(angle + PI); v.mult(r); return v; } let xoff = 0; function updateColor() { xoff = xoff + 0.01; let r = noise(xoff) * 255; let g = noise(xoff + 200) * 255; let b = noise(xoff + 400) * 255; stroke(r, g, b); } function draw() { background(0); let autoRun = true; if (autoRun) { total = 100; factor += 0.01; } else { total = map(mouseY, 0, height, 0, 200); factor = map(mouseX, 0, width, 0, 20); } translate(width / 2, height / 2); textSize(32); text(\"total \" + nf(total, 0, 2), -width / 2 + 10, height / 2 - 70); text(\"factor \" + nf(factor, 0, 3), -width / 2 + 10, height / 2 - 30); noFill(); strokeWeight(2); updateColor(); ellipse(0, 0, r * 2); strokeWeight(1); for (let i = 0; i \u003c total; i++) { const a = getVector(i, total); const b = getVector(i * factor, total); line(a.x, a.y, b.x, b.y); } }\rDemo Prøv det kørende eksempel\nMateriale translate() rotate() noFill() text() textSize() nfc() nf() mouseX mouseY map() noise() mult() fromAngle() Times Tables, Mandelbrot and the Heart of Mathematics",
    "description": "Dette eksempel er baseret på ideer fra denne video.\nlet r; let factor = 0; let total = 0; function setup() { createCanvas(windowWidth, windowHeight); const maxSize = min(width, height); r = maxSize / 2 - 16; } function getVector(index, total) { const angle = map(index % total, 0, total, 0, TWO_PI); const v = p5.Vector.fromAngle(angle + PI); v.mult(r); return v; } let xoff = 0; function updateColor() { xoff = xoff + 0.01; let r = noise(xoff) * 255; let g = noise(xoff + 200) * 255; let b = noise(xoff + 400) * 255; stroke(r, g, b); } function draw() { background(0); let autoRun = true; if (autoRun) { total = 100; factor += 0.01; } else { total = map(mouseY, 0, height, 0, 200); factor = map(mouseX, 0, width, 0, 20); } translate(width / 2, height / 2); textSize(32); text(\"total \" + nf(total, 0, 2), -width / 2 + 10, height / 2 - 70); text(\"factor \" + nf(factor, 0, 3), -width / 2 + 10, height / 2 - 30); noFill(); strokeWeight(2); updateColor(); ellipse(0, 0, r * 2); strokeWeight(1); for (let i = 0; i \u003c total; i++) { const a = getVector(i, total); const b = getVector(i * factor, total); line(a.x, a.y, b.x, b.y); } }\rDemo Prøv det kørende eksempel",
    "tags": [],
    "title": "Times Table",
    "uri": "/tech/p5js/times-table/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Times Table",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Times Table demo",
    "uri": "/tech/p5js/times-table/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Firebase",
    "content": "I dette eksempel forbindes der til Firestore fra en browser ved hjælp af javascript.\nVideoen viser en gennemgang af de fundamentale principper i Cloud Firestore.\nGetting Started With Cloud Firestore on the Web - Firecasts Demo Hvis du følger videoen burde du ende op med et kørendene eksempel, der ser nogenlunde sådan ud.\nHot dog status\rSave\rKoden du ender op kommer til at ligne dette.\r// Your web app's Firebase configuration var firebaseConfig = { apiKey: \"AIzaSyAof7A2wpEylAFHsKWvqeJU8VkYN7G1VMI\", authDomain: \"coldhawaiiweather.firebaseapp.com\", databaseURL: \"https://coldhawaiiweather.firebaseio.com\", projectId: \"coldhawaiiweather\", storageBucket: \"coldhawaiiweather.appspot.com\", messagingSenderId: \"645018619046\", appId: \"1:645018619046:web:2ae11bff4009e1e965f867\", measurementId: \"G-61E1DX0Z3Q\" }; // Initialize Firebase firebase.initializeApp(firebaseConfig); firebase.analytics(); const firestore = firebase.firestore(); const docRef = firestore.doc(\"samples/sandwichData\"); const outputHeader = document.querySelector(\"#hotdogOutPut\"); const inputTextField = document.querySelector(\"#latestHotdogStatus\"); const saveButton = document.querySelector(\"#saveButton\"); saveButton.addEventListener(\"click\", e =\u003e { const textToSave = inputTextField.value; console.log(\"save clicked \" + textToSave); docRef .set({ hotdogStatus: textToSave }) .then(() =\u003e { console.log(\"saved!\"); }) .catch(error =\u003e { console.log(\"got an error: \", error); }); }); thingToDoWhithDocumentData = doc =\u003e { if (doc \u0026\u0026 doc.exists) { const myData = doc.data(); console.log(\"Got snapshot doc: \", doc); outputHeader.innerText = \"Hot dog Status: \" + myData.hotdogStatus; } }; getRealtimeUpdates = () =\u003e { docRef.onSnapshot( { includeMetadataChanges: true }, thingToDoWhithDocumentData ); }; getRealtimeUpdates();\rDu kan også se demonstrationen på en separat side.\nMateriale Cloud Firestore dokumentation. Getting Started With Cloud Firestore on the Web - Firecasts Firecasts firebase intro",
    "description": "I dette eksempel forbindes der til Firestore fra en browser ved hjælp af javascript.\nVideoen viser en gennemgang af de fundamentale principper i Cloud Firestore.\nGetting Started With Cloud Firestore on the Web - Firecasts Demo Hvis du følger videoen burde du ende op med et kørendene eksempel, der ser nogenlunde sådan ud.",
    "tags": [],
    "title": "Firestore Client",
    "uri": "/tech/firebase/firestore-client/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Firebase \u003e Firestore Client",
    "content": "Hot dog status\rSave",
    "description": "Hot dog status\rSave",
    "tags": [],
    "title": "Firestore web client demo",
    "uri": "/tech/firebase/firestore-client/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech",
    "content": "Eksempler med Firebase.",
    "description": "Eksempler med Firebase.",
    "tags": [],
    "title": "Firebase",
    "uri": "/tech/firebase/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Firebase",
    "content": "I dette eksempel forbindes der til Firestore via Node.js. Dvs. koden der skal afvikles på serveren kan skrives i javascript, og vi kan derfor bruge viden om syntaks fra arbejdet med p5js.\nOpsætning af Node projekt For at kunne arbejde med firestore fra node.js, skal der laves en pakke / projekt at arbejde i. Dette kan gøres ved at oprette en mappe til projektet og køre denne kommando for at generere en package.json fil.\nnpm init\rMan bliver så bedt om at svare på en række spørgsmål, og ender med en struktur der ser nogenlunde sådan ud:\n{ \"name\": \"firestore-demo\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\" }, \"author\": \"\", \"license\": \"ISC\" }\rFor at kunne benytte Firebase SDK skal vi have dette installeret, hvilket kan klares med kommandoen.\nnpm install firebase-admin --save\rVi får også brug for at arbejde med formatering af dato og tidspunkter, så derfor vælger vi at bruge biblioteket Moment.js for at lette arbejdet med disse. Moment.js kan installeres med denne kommando.\nnpm install moment --save\rNu burde Firebase SDK og Moment.js være installeret og tilføjet som afhængigheder og package.json ser nu nogenlunde således ud.\n{ \"name\": \"firestore-demo\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\" }, \"author\": \"\", \"license\": \"ISC\", \"dependencies\": { \"@google-cloud/firestore\": \"^3.4.1\", \"firebase-admin\": \"^8.9.1\", \"moment\": \"^2.24.0\" } }\rSom det ses er der nu tilføjet afhængigheder til Firebase og moment pakkerne. De nærmere detaljer kan findes i denne guide.\nDette er et eksempel på en hvordan man kan lave et lille program, der indsætter en stump data i firestore.\nFirestore upload eksempel // Add the Firebase Admin SDK to Your Server const firebase = require(\"firebase-admin\"); // Get the helper classes FieldValue = firebase.firestore.FieldValue; Timestamp = firebase.firestore.Timestamp; const moment = require(\"moment\"); // Import crecential for the service account const serviceAccount = require(\"./serviceAccountKey.json\"); // Initialize the default app const app = firebase.initializeApp({ credential: firebase.credential.cert(serviceAccount), databaseURL: \"https://coldhawaiiweather.firebaseio.com\" }); const db = firebase.firestore(); // Helper - Generates random integer values function getRandomInt(max, min) { const diff = max - min; return Math.floor(Math.random() * Math.floor(diff) + min); } async function storeData() { // Set time of update const updateTime = Timestamp.now(); // Generate some fake weather data const windData = { time: updateTime, windSpeed: getRandomInt(15, 3), windDir: getRandomInt(0, 359), }; // Document ID should be todays date const today = moment(updateTime.toDate()); const docPath = `weather/${today.format(\"YYYY-MM-DD\")}`; const docRef = db.doc(docPath); const data = { lastUpdate: updateTime, windMeasurements: FieldValue.arrayUnion(windData), }; const options = { merge: true } await docRef.set(data, options); } storeData();\rDer skal bruges en såkaldt Service Account, for at kunne forbindes fra node til firebase. Guiden forklarer, hvad du skal gøre for at oprette en service account til dit firebase projekt. Disse oplysninger er private, så vær opmærksom på ikke at holde dem for dig selv. For eksemplet virker skal oplysningerne om din Service Account oprettes i file serviceAccountKey.json.\nHåndtering af private nøgler For at undgå at sprede disse oplysninger er det en god ide at tilføje denne fil til listen over filer der skal ignoreres af git. Dvs. at din .gitignore fil kunne se således ud.\n# ignore packages downloaded from npm node_modules/ # avoid storing firebase login credentials serviceAccountKey.json\rHvis javascript eksemplet gemmes i en fil med navnet firebase-upload-demo.js, kan programmet køres med kommandoen\nnode firebase-upload-demo.js\rMateriale Clouc Firestore dokumentation. Add the Firebase Admin SDK to Your Server guide til at komme i gang med firebase på en server. Cloud Firestore quickstart guide til at komme i gang med firestore. gitignore dokumentation. Moment.js firestore.TimeStamp firestore.FieldValue firestore.SetOptions",
    "description": "I dette eksempel forbindes der til Firestore via Node.js. Dvs. koden der skal afvikles på serveren kan skrives i javascript, og vi kan derfor bruge viden om syntaks fra arbejdet med p5js.\nOpsætning af Node projekt For at kunne arbejde med firestore fra node.js, skal der laves en pakke / projekt at arbejde i. Dette kan gøres ved at oprette en mappe til projektet og køre denne kommando for at generere en package.json fil.",
    "tags": [],
    "title": "Firestore Node Upload",
    "uri": "/tech/firebase/firestore-upload/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech",
    "content": "Her er en stump tekst som kunne være et eksempel på noget input, hvor vi gerne vil finde alle telefonnumre.\nHere is my number 123-456-7893. Should you not be able to reach me there you can contact me at work (223)456-4305, or call my wife at 234.343.4521.\rOpgaven med at finde telefonnumre kan i dette tilfælde løses ved at at bruge denne regular expression eller regex.\n[\\(]\\*\\d{3}[)-\\.]\\d{3}[\\.-]\\d{4}\rHer er eksempel på hvordan det kan benyttes i javascript.\nconst re = /\\(?\\d{3}[)-\\.]\\d{3}[\\.-]\\d{4}/g; const txt = `Here is my number 123-456-7893. Should you not be able to reach me there you can contact me at work (223)456-4305, or call my wife at 234.343.4521.`; const phoneNumbers = txt.match(re); console.log(phoneNumbers);\rMateriale Regular expressions chapter - The Modern JavaScript Tutorial MDN’s Regular Expressions Reference MDN’s String.replace() Coding train video series on Regular expressions 2.1: Introduction to Regular Expressions - Programming with Text 2.2: Regular Expressions: Meta-characters - Programming with Text 2.3: Regular Expressions: Character Classes - Programming with Text 2.4: Regular Expressions: Capturing Groups - Programming with Text 2.5: Regular Expressions: Back References - Programming with Text",
    "description": "Her er en stump tekst som kunne være et eksempel på noget input, hvor vi gerne vil finde alle telefonnumre.\nHere is my number 123-456-7893. Should you not be able to reach me there you can contact me at work (223)456-4305, or call my wife at 234.343.4521.\rOpgaven med at finde telefonnumre kan i dette tilfælde løses ved at at bruge denne regular expression eller regex.\n[\\(]\\*\\d{3}[)-\\.]\\d{3}[\\.-]\\d{4}\rHer er eksempel på hvordan det kan benyttes i javascript.",
    "tags": [],
    "title": "Regex",
    "uri": "/tech/regex/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Project",
    "content": "LED array hardware I dette projekt handler det om at styre lyset i en række multifarvede LED’er, som vist på billedet.\nTanken er at bygge videre på tre kode eksempler, så enkeltdelene kan bruges til at lave et system der kan styre lyset i LED arrayet fra en browser, f.eks. i en mobiltelefon.\nOpgaven Lav et system, der kan styre en række Neopixel LED’er fra et webinterface i en browser.\nSystemet tænkes at bestå af følgende komponenter:\nEn Arduino med tilsluttet array af NeoPixel LEDs. En server lavet i node.js, der håndterer kommandoer fra brugerens browser. Et simpelt node modul, der håndterer kommunikation med Arduino via serielporten. Brugerinterface baseret på HTML, CSS og Javascript, der via websockets sender beskeder til serveren om styring af LED lys. Kode eksempler Styring af neopixel LED array med arduino - Dette indeholder også beskrivelse af hardware. Klient / server kommunikation. Dette eksempel viser hvordan man kan kommunikere mellem klienter via Socket.io, ved at lave en server i node.js. Arduino JSON commands. Viser hvordan man kan håndtere udveksling af beskeder mellem computer og Arduino. Serial Port Kommunikation. Dette eksempel viser hvordan man kan sende og modtage json beskeder via seriel porten, ved hjælp af et script i node.js. Teknikken kan bruges til kommunikation mellem computer og Arduino ved hjælp af simple kommandoer. Materiale Arduino Arduino Arduino IDE Arduino programming reference Installing arduino libraries Eksempler fra Arduino biblioteker Styring af LED’er Adafruit NeoPixel Adafruit NeoPixel Überguide Command parsing (JSON) on the Arduino ArduinoJson Node.js Serial port kommunikation Node Serialport Serial port kommunikation vha. node.js",
    "description": "LED array hardware I dette projekt handler det om at styre lyset i en række multifarvede LED’er, som vist på billedet.\nTanken er at bygge videre på tre kode eksempler, så enkeltdelene kan bruges til at lave et system der kan styre lyset i LED arrayet fra en browser, f.eks. i en mobiltelefon.\nOpgaven Lav et system, der kan styre en række Neopixel LED’er fra et webinterface i en browser.",
    "tags": [],
    "title": "Styring af LED via web interface",
    "uri": "/project/server-controlled-leds/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Node.js",
    "content": "Dette eksempel viser hvordan man kan lave en webserver, der kan køre et eksempel hvor clienter på forskellige maskiner kan kommunikere via en web-socket.\nDet er baseret på en videotutorial af Daniel Shiffman fra The Coding Train.\nSocket io video tutorial 12.1: Introduction to Node - WebSockets and p5.js Tutorial Introduktion til web sockets. Installation af node “hello world” demo 12.2: Using Express with Node - WebSockets and p5.js Tutorial Hosting af statiske klient filer på node server med Express. 12.3: Connecting Client to Server with Socket.io - WebSockets and p5.js Tutorial Tilføjelse af Socket.io til klient og server Vis klientens ID når de forbinder sig 12.4: Shared Drawing Canvas - WebSockets and p5.js Tutorial Afsendelse af hændelser (events) fra klienter Broadcast af events fra server Tegning på skærmen i de modtagende klienter Materiale Node npm - Node Package Manager Socket.io Socket.io - Get started Express p5.js p5js getting started p5js reference Kode eksempel Det kan være nødvendigt med et par små justeringer ift. koden i videoerne.\nHer følger indholdet af mine filer\nIndholdet i package.json.\n{ \"name\": \"socket-io-demo\", \"version\": \"1.0.0\", \"description\": \"Socket io demo with p5js\", \"main\": \"server.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\" }, \"author\": \"Getsrevel\", \"license\": \"ISC\", \"dependencies\": { \"express\": \"^4.17.1\", \"socket.io\": \"^2.3.0\" } }\rBemærk at socket-io klienten hentes fra den lokale server i filen public/index.html, som beskrevet i socket.io - Get started.\n\u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e \u003ctitle\u003eSocket io demo\u003c/title\u003e \u003cscript src=\"/socket.io/socket.io.js\"\u003e\u003c/script\u003e \u003cscript type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/p5.min.js\"\u003e\u003c/script\u003e \u003cscript type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/addons/p5.dom.min.js\"\u003e\u003c/script\u003e \u003cscript type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/addons/p5.sound.min.js\"\u003e\u003c/script\u003e \u003cscript type=\"text/javascript\" src=\"sketch.js\"\u003e\u003c/script\u003e \u003cstyle\u003e body { padding: 20px; } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eSocket demo\u003c/h1\u003e \u003c/body\u003e \u003c/html\u003e\rserver.js\rconst express = require('express'); const app = express(); const port = process.env.PORT || 3000; // Set up the server // process.env.PORT is related to deploying on heroku const server = app.listen(port); app.use(express.static(__dirname +'/public')); console.log(`Server is running on http://localhost:${port}`); const socket = require('socket.io'); const io = socket(server); io.sockets.on('connection', newConnection); function newConnection(socket) { console.log(`New connection ${socket.id}`); socket.on('mouse', mouseMsg); function mouseMsg(data) { socket.broadcast.emit('mouse', data); // NB! send to all listeners (including source of incomming event) // io.emit('some event, theDataToSend) console.log(data); } }\rpublic/sketch.js\rconst socket = io(); function setup() { createCanvas(400, 400); background(0); // Set up listener for incomming socket events socket.on('mouse', newDrawing); } const lineWidth = 10; function newDrawing(data) { // Draw some white circles with different colors colorMode(RGB, 255); fill(255, 0, 100); noStroke(); ellipse(data.x, data.y, lineWidth, lineWidth); } function mouseDragged() { let currentNumX = mouseX; let lowerBound = 0; let upperBoundX = width; //100; let normalizedX = norm(currentNumX, lowerBound, upperBoundX); let currentNumY = mouseY; let upperBoundY = height; //100; let normalizedY = norm(currentNumY, lowerBound, upperBoundY); colorMode(HSB, 255); let c = color(normalizedX * 255, normalizedY * 255, 255); // Draw some white circles fill(255); noStroke(); ellipse(mouseX, mouseY, lineWidth, lineWidth); const data = { x: mouseX, y: mouseY, }; console.log(`Sending ${data.x} ${data.y} `); socket.emit(\"mouse\", data); }\rServeren kan startes op med denne kommando. npm run start",
    "description": "Dette eksempel viser hvordan man kan lave en webserver, der kan køre et eksempel hvor clienter på forskellige maskiner kan kommunikere via en web-socket.\nDet er baseret på en videotutorial af Daniel Shiffman fra The Coding Train.\nSocket io video tutorial 12.1: Introduction to Node - WebSockets and p5.js Tutorial Introduktion til web sockets. Installation af node “hello world” demo 12.2: Using Express with Node - WebSockets and p5.js Tutorial Hosting af statiske klient filer på node server med Express. 12.3: Connecting Client to Server with Socket.io - WebSockets and p5.js Tutorial Tilføjelse af Socket.io til klient og server Vis klientens ID når de forbinder sig 12.4: Shared Drawing Canvas - WebSockets and p5.js Tutorial Afsendelse af hændelser (events) fra klienter Broadcast af events fra server Tegning på skærmen i de modtagende klienter Materiale Node npm - Node Package Manager Socket.io Socket.io - Get started Express p5.js p5js getting started p5js reference Kode eksempel Det kan være nødvendigt med et par små justeringer ift. koden i videoerne.",
    "tags": [],
    "title": "Socket IO",
    "uri": "/tech/node/socket-io-demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e Node.js",
    "content": "Dette er et eksempel på en scraper, der finder alle links på en side, og skriver deres URL ud i konsollen. Den benytter to pakker fra npm, så hele systemet ikke skal programmeres op fra grunden. Pakken axios benyttes i eksemplet til at arbejde med http requests, og cheerio bruges til at parse html strukturen, der returneres fra serveren, og uddrage de data man er interesseret i at arbejde videre med i programmet. Disse pakker skal installeres fra npm for at eksemplet kan eksekveres på din maskine.\nFørst skal der laves et projekt så node kan finde ud af at køre programmet, og har en package.json fil til at holde styr på projektet og afhængigheder af biblioteksmoduler.\nStart med at lave en mappe, som kan indeholde dit projekt. Kald den f.eks. web-scraping. I denne mappe skal du køre følgende kommando, for at oprette projekt filen package.json.\nnpm init -y\rDernæst har du mulighed for at installere disse afhængigheder.\nnpm --save install axios npm --save install cheerio\rDu burde nu have en package.json fil, der ser nogenlunde sådan ud:\n{ \"name\": \"web-scraping\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\" }, \"author\": \"\", \"license\": \"ISC\", \"dependencies\": { \"axios\": \"^0.19.1\", \"cheerio\": \"^1.0.0-rc.3\" } }\rBemærk de to pakker der er listet under afhængigheder.\nDerefter skal du oprette filen simple-scraper.js med følgende indhold.\nconst cheerio = require(\"cheerio\"); const axios = require(\"axios\"); // Swap this for the url you want to scrape const url = \"https://en.wikipedia.org/wiki/List_of_Presidents_of_the_United_States\"; axios .get(url) .then(response =\u003e { let $ = cheerio.load(response.data); $(\"a\").each(function(i, e) { let links = $(e).attr(\"href\"); console.log(links); }); }) .catch(function(e) { console.log(e); });\rNu kan du køre eksemplet med denne kommando:\nnode simple-scraper.js\rAsync / await version Her er et eksempel med samme funktionalitet, men hvor der bruges async / await syntaks i stedet for promise.then().\n// import the library modules you installed from npm const cheerio = require(\"cheerio\"); const axios = require(\"axios\"); // Define the scraping algorithm async function runScraper(url) { try { const html = (await axios.get(url)).data; const $ = cheerio.load(html); $(\"a\").each(function(i, e) { const url = $(e).attr(\"href\"); console.log(url); }); } catch (error) { console.log(\"error: \" + error); } } // Swap this for the url you want to scrape const url = \"https://en.wikipedia.org/wiki/List_of_Presidents_of_the_United_States\"; // run the scraper by calling the function runScraper(url);\rMateriale NPM pakker Her er en række pakker, der kan bruges til at lave scraping af websider.\nAxios request-promise Cheerio Puppeteer Puppeteer source Javascript emner Promise basics Async/await The Pitfalls of Async/Await in Array Loops Why Axios Is Better Than Node-Fetch Tutorial Denne tutorial er et eksempel på hvordan man kan hente en side med links til amerikanske præsidenter fra wikipedia, og ved at følge disse links hente de enkelte præsidenters navne og fødselsdage.\nThe Ultimate Guide to Web Scraping with Node.js Websider der anvendes i eksemplet:\nList of presidents of the United States listen af præsidenter og deres links hentes fra denne side. George Washington er et eksempel på en side der beskriver en specifik præsident.",
    "description": "Dette er et eksempel på en scraper, der finder alle links på en side, og skriver deres URL ud i konsollen. Den benytter to pakker fra npm, så hele systemet ikke skal programmeres op fra grunden. Pakken axios benyttes i eksemplet til at arbejde med http requests, og cheerio bruges til at parse html strukturen, der returneres fra serveren, og uddrage de data man er interesseret i at arbejde videre med i programmet. Disse pakker skal installeres fra npm for at eksemplet kan eksekveres på din maskine.",
    "tags": [],
    "title": "Web Scraping",
    "uri": "/tech/node/web-scraping/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Project",
    "content": "Opgave: Mobil vejrstation Lav et it system der gør det muligt at se data fra en vejrstatation på en nem og overskuelig måde. Løsningen skal virke på mobil, tablet og computeren.\nOpgaven løses i grupper. Der skal laves en kravspecifikation. I skal bruge et projetstyrings værktøj til at styre jeres opgaver, f.eks. Trello eller Milanote. “Oversæt” krav fra kravspecifikationen til konkrete opgaver på jeres trello board. Løsningen skal designes så den ikke belaster vejrstationen unødigt når den bruges samtidig af mange brugere, f.eks. ved at sende unødigt mange forespørgsler. Design og implementation skal dokumenteres. Brug git og github til at samarbejde om koden. Som kilde til vejrdata kan f.eks. benyttes vejrobservationer fra Hanstholm havns vejrstation. Som datalager kan f.eks. benyttes Firebase.\nMateriale Kravspecifikation - informatik bog Hanstholm havns vejrstation vejrobservationer hvert 10. minut. Trello kanban board til projektstyring Milanote projektstyring og idegenerering Milanote plans \u0026 pricing cron er en node.js pakke der gør det nemt at schedulere opgaver til at køre på faste tidspunkter. Firebase Firebase introduction docs Hotdog status - Firebase firestore tutorial Firecasts firebase intro Uploading to firestore\nCloud Firestore: Node.js Client Client API til firestore. Add the Firebase Admin SDK to Your Server Hotdog status - Firebase tutorial Firecasts firebase intro",
    "description": "Opgave: Mobil vejrstation Lav et it system der gør det muligt at se data fra en vejrstatation på en nem og overskuelig måde. Løsningen skal virke på mobil, tablet og computeren.\nOpgaven løses i grupper. Der skal laves en kravspecifikation. I skal bruge et projetstyrings værktøj til at styre jeres opgaver, f.eks. Trello eller Milanote. “Oversæt” krav fra kravspecifikationen til konkrete opgaver på jeres trello board. Løsningen skal designes så den ikke belaster vejrstationen unødigt når den bruges samtidig af mange brugere, f.eks. ved at sende unødigt mange forespørgsler. Design og implementation skal dokumenteres. Brug git og github til at samarbejde om koden. Som kilde til vejrdata kan f.eks. benyttes vejrobservationer fra Hanstholm havns vejrstation. Som datalager kan f.eks. benyttes Firebase.",
    "tags": [],
    "title": "Weather Station",
    "uri": "/project/weather-station/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech",
    "content": "En nem måde at komme i gang med at programmere til lego mindstorms EV3, er ved at bruge værktøjet Makecode. For at kunne benytte dette, kræves at din EV3 klods er opdateret til firmware version 1.10E eller nyere.\nProgrammering Du kan lave dit program ved hjælp af blok programmering, som du måske kender hvis du har arbejdet med Scratch, eller Applab.\nMakecode udviklingsmiljøet i blokprogrammerings mode. Simulatoren ses i venstre side. Udviklingsmiljøet indeholder mulighed for at simulere dit program direkte i din browser uden at overføre det til en fysisk EV3 brik. Du kan se en grafisk visning af de enheder, der forventes at være tilsluttet til din EV3, på baggrund af indholdet af din kode. Du kan også køre dit program som en simulering, og se om det opfører sig som forventet, ved at manipulere de virtuelle input i browseren. Det kan dog være vanskeligt at simulere noget, hvor der er en fysisk kobling mellem input og output, som f.eks. en linjefølger, så du får også brug for at teste med en EV3 klods.\nSom det også er tilfældet med Applab, kan du vælge at skrive dit program i javascript. Her er et eksempel på et program der starter og stopper en motor, afhængigt af om en knap er trykket ind.\nforever(function () { if (sensors.touch2.isPressed()) { motors.mediumC.run(50) } else { motors.mediumC.stop() } })\rEn af fordelene ved at bruge tekstbaseret kode som f.eks. javascript er, at du nemt kan klippe/klistre stumper af kode fra forskellige programmer, og sætte dem sammen til et nyt program.\nMateriale Makecode editor til EV3. Fejlfinding af EV3 brikken. Reference dokumentation af blokke i Makecode. Javascript in Makecode",
    "description": "En nem måde at komme i gang med at programmere til lego mindstorms EV3, er ved at bruge værktøjet Makecode. For at kunne benytte dette, kræves at din EV3 klods er opdateret til firmware version 1.10E eller nyere.\nProgrammering Du kan lave dit program ved hjælp af blok programmering, som du måske kender hvis du har arbejdet med Scratch, eller Applab.\nMakecode udviklingsmiljøet i blokprogrammerings mode. Simulatoren ses i venstre side. Udviklingsmiljøet indeholder mulighed for at simulere dit program direkte i din browser uden at overføre det til en fysisk EV3 brik. Du kan se en grafisk visning af de enheder, der forventes at være tilsluttet til din EV3, på baggrund af indholdet af din kode. Du kan også køre dit program som en simulering, og se om det opfører sig som forventet, ved at manipulere de virtuelle input i browseren. Det kan dog være vanskeligt at simulere noget, hvor der er en fysisk kobling mellem input og output, som f.eks. en linjefølger, så du får også brug for at teste med en EV3 klods.",
    "tags": [],
    "title": "Mindstorms",
    "uri": "/tech/mindstorms/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Her er et eksempel der viser hvordan man kan håndtere input fra flere taster på en gang.\nlet cx; let cy; let state = { north: false, south: false, west: false, east: false, boost: false }; function setup() { createCanvas(windowWidth, windowHeight); cx = width / 2; cy = height / 2; } function draw() { background(220); fill(0); noStroke(); textSize(20); text(`Move using arrow keys and space`, 10, 30); // show if (state.boost) { fill(\"orange\"); stroke(\"red\"); } else { fill(\"gray\"); stroke(0); } strokeWeight(5); circle(cx, cy, 50); // update position const step = state.boost ? 5 : 1; if (state.west) { cx -= step; } if (state.east) { cx += step; } if (state.north) { cy -= step; } if (state.south) { cy += step; } } function keyPressed() { console.log(\"Pressed:\", key, keyCode) if (key === \" \") { state.boost = true; } if (keyCode === LEFT_ARROW) { state.west = true; } if (keyCode === RIGHT_ARROW) { state.east = true; } if (keyCode === UP_ARROW) { state.north = true; } if (keyCode === DOWN_ARROW) { state.south = true; } return true } function keyReleased() { console.log(\"Released:\", key, keyCode) if (key === \" \") { state.boost = false; } if (keyCode === LEFT_ARROW) { state.west = false; } if (keyCode === RIGHT_ARROW) { state.east = false; } if (keyCode === UP_ARROW) { state.north = false; } if (keyCode === DOWN_ARROW) { state.south = false; } return true }\rBemærk at både keyPressed() og keyReleased() hændelser håndteres for alle gyldige input.\nStatus for de enkelte input registreres i variablen state, som er et objekt med de nødvendige attributter.\nI eksemplet er håndteringen af venstre piletast fremhævet.\nDenne måde at håndtere input bevirker at figuren kan bevæges diagonalt, ved at trykke på to taster samtidigt. Desuden er bevægelsen uafhængig af repeat rate i keyboard indstillingerne.\nDemo Prøv det kørende eksempel\nMateriale keyPressed() keyReleased() keyCode Keycode.info er et et værktøj vise hvilken kode der udsendes når der trykkes på de forskellige taster på tastaturet. fill() stroke() circle() noStroke()",
    "description": "Her er et eksempel der viser hvordan man kan håndtere input fra flere taster på en gang.\nlet cx; let cy; let state = { north: false, south: false, west: false, east: false, boost: false }; function setup() { createCanvas(windowWidth, windowHeight); cx = width / 2; cy = height / 2; } function draw() { background(220); fill(0); noStroke(); textSize(20); text(`Move using arrow keys and space`, 10, 30); // show if (state.boost) { fill(\"orange\"); stroke(\"red\"); } else { fill(\"gray\"); stroke(0); } strokeWeight(5); circle(cx, cy, 50); // update position const step = state.boost ? 5 : 1; if (state.west) { cx -= step; } if (state.east) { cx += step; } if (state.north) { cy -= step; } if (state.south) { cy += step; } } function keyPressed() { console.log(\"Pressed:\", key, keyCode) if (key === \" \") { state.boost = true; } if (keyCode === LEFT_ARROW) { state.west = true; } if (keyCode === RIGHT_ARROW) { state.east = true; } if (keyCode === UP_ARROW) { state.north = true; } if (keyCode === DOWN_ARROW) { state.south = true; } return true } function keyReleased() { console.log(\"Released:\", key, keyCode) if (key === \" \") { state.boost = false; } if (keyCode === LEFT_ARROW) { state.west = false; } if (keyCode === RIGHT_ARROW) { state.east = false; } if (keyCode === UP_ARROW) { state.north = false; } if (keyCode === DOWN_ARROW) { state.south = false; } return true }\rBemærk at både keyPressed() og keyReleased() hændelser håndteres for alle gyldige input.",
    "tags": [],
    "title": "Key Press Multi",
    "uri": "/tech/p5js/key-pressed-multi/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Project",
    "content": "Opgave: Lav et “Asteroids” spil Opgaven skal laves i grupper. I skal lave en kravspecifikation I skal lave implementeringen i javascript ved hjælp af p5js. I skal bruge Github projects til at styre jeres opgaver. “Oversæt” krav til jeres spil fra kravspecifikationen til opgaver på jeres project board. Brug git og github til at samarbejde om koden. Materiale p5js p5 code editor browserbaseret editor der ikke kræver installation. p5 reference er dokumentation af de mange funktioner i p5. Git Asteroids beskrivelse af spillet. Spaceship example - The Nature of Code, Daniel Shiffman Javascript emner For at kunne lave spillet bliver det formentlig nyttigt at kende til disse koncepter\nBetingelser Logiske operatorer Løkker Funktioner Objekter Arrays Coding Challenge #46.1: Asteroids with p5.js - Part 1 Coding Challenge #46.2: Asteroids with p5.js - Part 2 3.2: Trigonometry and Polar Coordinates - The Nature of Code Lydeffekter Her er lidt inspiration til hvordan der kan lægges lydeffekter på spillet.\np5js Sound Tutorial 17.1: Loading and Playing - p5.js Sound Tutorial 17.5: Adding Sound Effects - p5.js Sound Tutorial Chiptone - generator til lydeffekter. Bosca Ceoil multitrack synthesizer app til at komponere retro game musik. 17.5: Adding Sound Effects - p5.js Sound Tutorial",
    "description": "Opgave: Lav et “Asteroids” spil Opgaven skal laves i grupper. I skal lave en kravspecifikation I skal lave implementeringen i javascript ved hjælp af p5js. I skal bruge Github projects til at styre jeres opgaver. “Oversæt” krav til jeres spil fra kravspecifikationen til opgaver på jeres project board. Brug git og github til at samarbejde om koden. Materiale p5js p5 code editor browserbaseret editor der ikke kræver installation. p5 reference er dokumentation af de mange funktioner i p5. Git Asteroids beskrivelse af spillet. Spaceship example - The Nature of Code, Daniel Shiffman Javascript emner For at kunne lave spillet bliver det formentlig nyttigt at kende til disse koncepter",
    "tags": [],
    "title": "Asteroids Game",
    "uri": "/project/asteroid/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "I dette eksempel bruges keyIsPressed til at ændre fyldfarven på figuren.\nfunction setup() { let canvas = createCanvas(400, 400); canvas.parent(\"sketch-holder\"); } function draw() { background(100, 0, 0); fill(\"red\"); circle(50, 150, 50); circle(width - 50, 50, 50); if (keyIsPressed === true) { fill(0); } else { fill(255); } rect(25, 25, 50, 50); }\rDemo Her kan du se en kørende version af programmet. Prøv at trykke på en vilkårlig tast på tastaturet.\nPrøv også det kørende eksempel på en selvstændig side.\nMateriale setup() createCanvas() parent() draw() keyIsPressed random() fill() circle()",
    "description": "I dette eksempel bruges keyIsPressed til at ændre fyldfarven på figuren.\nfunction setup() { let canvas = createCanvas(400, 400); canvas.parent(\"sketch-holder\"); } function draw() { background(100, 0, 0); fill(\"red\"); circle(50, 150, 50); circle(width - 50, 50, 50); if (keyIsPressed === true) { fill(0); } else { fill(255); } rect(25, 25, 50, 50); }\rDemo Her kan du se en kørende version af programmet. Prøv at trykke på en vilkårlig tast på tastaturet.\nPrøv også det kørende eksempel på en selvstændig side.",
    "tags": [],
    "title": "Keyboard",
    "uri": "/tech/p5js/key-is-pressed/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Dette eksempel viser hvordan man kan køre en sketch, der fylder hele skærmen.\nlet cnv; function setup() { cnv = createCanvas(windowWidth, windowHeight); centerCanvas(); background(255, 0, 200); } function draw() { background(220); const cSize = 50; fill(20); circle(width / 2, height / 2, cSize); fill(255); circle(100, 100, cSize); circle(width - 100, 100, cSize); circle(100, height - 100, cSize); circle(width - 100, height - 100, cSize); fill(0, 102, 153); textSize(20); textAlign(CENTER); text(\"Click me!\", width / 2, height / 2 - cSize); } function mousePressed() { if (mouseX \u003e 0 \u0026\u0026 mouseX \u003c width \u0026\u0026 mouseY \u003e 0 \u0026\u0026 mouseY \u003c height) { let fs = fullscreen(); fullscreen(!fs); } } function centerCanvas() { let x = (windowWidth - width) / 2; let y = (windowHeight - height) / 2; cnv.position(x, y); } function windowResized() { resizeCanvas(windowWidth, windowHeight); centerCanvas(); }\rDemo Prøv det kørende eksempel",
    "description": "Dette eksempel viser hvordan man kan køre en sketch, der fylder hele skærmen.\nlet cnv; function setup() { cnv = createCanvas(windowWidth, windowHeight); centerCanvas(); background(255, 0, 200); } function draw() { background(220); const cSize = 50; fill(20); circle(width / 2, height / 2, cSize); fill(255); circle(100, 100, cSize); circle(width - 100, 100, cSize); circle(100, height - 100, cSize); circle(width - 100, height - 100, cSize); fill(0, 102, 153); textSize(20); textAlign(CENTER); text(\"Click me!\", width / 2, height / 2 - cSize); } function mousePressed() { if (mouseX \u003e 0 \u0026\u0026 mouseX \u003c width \u0026\u0026 mouseY \u003e 0 \u0026\u0026 mouseY \u003c height) { let fs = fullscreen(); fullscreen(!fs); } } function centerCanvas() { let x = (windowWidth - width) / 2; let y = (windowHeight - height) / 2; cnv.position(x, y); } function windowResized() { resizeCanvas(windowWidth, windowHeight); centerCanvas(); }\rDemo Prøv det kørende eksempel",
    "tags": [],
    "title": "Fullscreen toggle",
    "uri": "/tech/p5js/fullscreen-toggle/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Eksempel på simpel håndtering af input-hændelser (events) fra tastaturet med keyPressed().\nlet cx; let cy; function setup() { createCanvas(windowWidth, windowHeight); cx = width / 2; cy = height / 2; } function draw() { background(20); fill(\"gray\"); textSize(20); text(`Move using arrow keys`, 10, 30); fill(\"red\"); noStroke(); circle(cx, cy, 50); } function keyPressed() { const step = 10; if (keyCode === LEFT_ARROW) { cx -= step; } if (keyCode === RIGHT_ARROW) { cx += step; } if (keyCode === UP_ARROW) { cy -= step; } if (keyCode === DOWN_ARROW) { cy += step; } }\rDemo Prøv det kørende eksempel\nMateriale keyPressed() keyCode Keycode.info er et et værktøj vise hvilken kode der udsendes når der trykkes på de forskellige taster på tastaturet. fill() background() stroke() circle() text() textSize()",
    "description": "Eksempel på simpel håndtering af input-hændelser (events) fra tastaturet med keyPressed().\nlet cx; let cy; function setup() { createCanvas(windowWidth, windowHeight); cx = width / 2; cy = height / 2; } function draw() { background(20); fill(\"gray\"); textSize(20); text(`Move using arrow keys`, 10, 30); fill(\"red\"); noStroke(); circle(cx, cy, 50); } function keyPressed() { const step = 10; if (keyCode === LEFT_ARROW) { cx -= step; } if (keyCode === RIGHT_ARROW) { cx += step; } if (keyCode === UP_ARROW) { cy -= step; } if (keyCode === DOWN_ARROW) { cy += step; } }\rDemo Prøv det kørende eksempel\nMateriale keyPressed() keyCode Keycode.info er et et værktøj vise hvilken kode der udsendes når der trykkes på de forskellige taster på tastaturet. fill() background() stroke() circle() text() textSize()",
    "tags": [],
    "title": "Key Pressed Simple",
    "uri": "/tech/p5js/key-pressed-simple/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Dette er et eksempel på hvordan man man håndtere flere samtidige berørings hændelser, f.eks. som knapper i et mobil spil, der kræver flere samtidige inputs.\nlet buttons = { left: false, right: false }; const bSize = 80; const margin = 20; let leftButton; let rightButton; function setup() { createCanvas(windowWidth, windowHeight); background(0); leftButton = createButton(\"left\"); leftButton.mousePressed(leftPressed); leftButton.mouseReleased(leftReleased); leftButton.touchStarted(leftPressed); leftButton.touchEnded(leftReleased); leftButton.style(\"background-color\", \"red\"); leftButton.class(\"noselect\"); leftButton.size(bSize, bSize); rightButton = createButton(\"right\"); rightButton.mousePressed(rightPressed); rightButton.mouseReleased(rightReleased); rightButton.touchStarted(rightPressed); rightButton.touchEnded(rightReleased); rightButton.style(\"background-color\", \"green\"); rightButton.class(\"noselect\"); rightButton.size(bSize, bSize); handleButtonPositions(); } function draw() { background(100); // left button fill(buttons.left ? \"red\" : \"pink\"); rect(margin, margin, bSize, bSize); // right button fill(buttons.right ? \"green\" : \"teal\"); rect(width - margin - bSize, margin, bSize, bSize); } const leftPressed = () =\u003e (buttons.left = true); const leftReleased = () =\u003e (buttons.left = false); const rightPressed = () =\u003e (buttons.right = true); const rightReleased = () =\u003e (buttons.right = false); const handleButtonPositions = () =\u003e { leftButton.position(margin, height - margin - bSize); rightButton.position(width - margin - bSize, height - margin - bSize); }; function windowResized() { resizeCanvas(windowWidth, windowHeight); handleButtonPositions(); }\rBemærk at det er nødvendigt med en smule styling via CSS for at få eksemplet til at virke. Derfor er der tilføjet en klasse til button elementerne, og denne regel er tilføjet til stylesheet for siden.\n.noselect { -webkit-touch-callout: none; /* iOS Safari */ -webkit-user-select: none; /* Safari */ -khtml-user-select: none; /* Konqueror HTML */ -moz-user-select: none; /* Old versions of Firefox */ -ms-user-select: none; /* Internet Explorer/Edge */ user-select: none; /* Non-prefixed version, currently supported by Chrome, Opera and Firefox */ }\rDemo Prøv det kørende eksempel",
    "description": "Dette er et eksempel på hvordan man man håndtere flere samtidige berørings hændelser, f.eks. som knapper i et mobil spil, der kræver flere samtidige inputs.\nlet buttons = { left: false, right: false }; const bSize = 80; const margin = 20; let leftButton; let rightButton; function setup() { createCanvas(windowWidth, windowHeight); background(0); leftButton = createButton(\"left\"); leftButton.mousePressed(leftPressed); leftButton.mouseReleased(leftReleased); leftButton.touchStarted(leftPressed); leftButton.touchEnded(leftReleased); leftButton.style(\"background-color\", \"red\"); leftButton.class(\"noselect\"); leftButton.size(bSize, bSize); rightButton = createButton(\"right\"); rightButton.mousePressed(rightPressed); rightButton.mouseReleased(rightReleased); rightButton.touchStarted(rightPressed); rightButton.touchEnded(rightReleased); rightButton.style(\"background-color\", \"green\"); rightButton.class(\"noselect\"); rightButton.size(bSize, bSize); handleButtonPositions(); } function draw() { background(100); // left button fill(buttons.left ? \"red\" : \"pink\"); rect(margin, margin, bSize, bSize); // right button fill(buttons.right ? \"green\" : \"teal\"); rect(width - margin - bSize, margin, bSize, bSize); } const leftPressed = () =\u003e (buttons.left = true); const leftReleased = () =\u003e (buttons.left = false); const rightPressed = () =\u003e (buttons.right = true); const rightReleased = () =\u003e (buttons.right = false); const handleButtonPositions = () =\u003e { leftButton.position(margin, height - margin - bSize); rightButton.position(width - margin - bSize, height - margin - bSize); }; function windowResized() { resizeCanvas(windowWidth, windowHeight); handleButtonPositions(); }\rBemærk at det er nødvendigt med en smule styling via CSS for at få eksemplet til at virke. Derfor er der tilføjet en klasse til button elementerne, og denne regel er tilføjet til stylesheet for siden.",
    "tags": [],
    "title": "Multitouch",
    "uri": "/tech/p5js/multitouch/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Canvas",
    "content": "",
    "description": "",
    "tags": [],
    "title": "p5 canvas demo",
    "uri": "/tech/p5js/canvas/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Fullscreen toggle",
    "content": "",
    "description": "",
    "tags": [],
    "title": "p5 demo live",
    "uri": "/tech/p5js/fullscreen-toggle/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Keyboard",
    "content": "",
    "description": "",
    "tags": [],
    "title": "p5 demo live",
    "uri": "/tech/p5js/key-is-pressed/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Key Pressed Simple",
    "content": "",
    "description": "",
    "tags": [],
    "title": "p5 demo live",
    "uri": "/tech/p5js/key-pressed-simple/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Polar Loop",
    "content": "",
    "description": "",
    "tags": [],
    "title": "p5 demo live",
    "uri": "/tech/p5js/polar-loop/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Polar Spinner",
    "content": "",
    "description": "",
    "tags": [],
    "title": "p5 demo live",
    "uri": "/tech/p5js/polar-spinner/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Tacospin",
    "content": "",
    "description": "",
    "tags": [],
    "title": "p5 demo live",
    "uri": "/tech/p5js/tacospin/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Key Press Multi",
    "content": "",
    "description": "",
    "tags": [],
    "title": "p5 key press multi demo",
    "uri": "/tech/p5js/key-pressed-multi/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Multitouch",
    "content": "",
    "description": "",
    "tags": [],
    "title": "p5 multitouch demo",
    "uri": "/tech/p5js/multitouch/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Sound",
    "content": "",
    "description": "",
    "tags": [],
    "title": "p5 sound demo",
    "uri": "/tech/p5js/sound/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Eksempel på brug af polære koordinater.\nfunction setup() { createCanvas(windowWidth, windowHeight); } function draw() { background(220); noFill(); const scale = map(mouseX, 50, width - 50, 0, 30, true); const tick = map(mouseY, 100, height - 100, PI / 12, (2 * PI) / 3, true); translate(width / 2, height / 2); const diameter = 20; circle(0, 0, diameter); const magnitude = 10 * scale; circle(0, 0, magnitude * 2); fill(\"blue\"); for (let theta = 0; theta \u003c 2 * PI; theta += tick) { const cx = magnitude * cos(theta); const cy = magnitude * sin(theta); circle(cx, cy, diameter); } }\rDemo Prøv det kørende eksempel\nMateriale setup() draw() createCanvas() background() noFill() map() translate() fill() circle()",
    "description": "Eksempel på brug af polære koordinater.\nfunction setup() { createCanvas(windowWidth, windowHeight); } function draw() { background(220); noFill(); const scale = map(mouseX, 50, width - 50, 0, 30, true); const tick = map(mouseY, 100, height - 100, PI / 12, (2 * PI) / 3, true); translate(width / 2, height / 2); const diameter = 20; circle(0, 0, diameter); const magnitude = 10 * scale; circle(0, 0, magnitude * 2); fill(\"blue\"); for (let theta = 0; theta \u003c 2 * PI; theta += tick) { const cx = magnitude * cos(theta); const cy = magnitude * sin(theta); circle(cx, cy, diameter); } }\rDemo Prøv det kørende eksempel\nMateriale setup() draw() createCanvas() background() noFill() map() translate() fill() circle()",
    "tags": [],
    "title": "Polar Loop",
    "uri": "/tech/p5js/polar-loop/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Eksempel med omregning mellem polære og kartesiske koordinater.\nlet angle = 0; function setup() { createCanvas(windowWidth, windowHeight); } function draw() { background(0); let diameter = 50; translate(width / 2, height / 2); rotate(angle); const speed = map(mouseX, 0, width, -1, 1, true); angle += 0.1 * speed; const showDots = mouseY \u003c height/2; fill(0); textSize(40); text(\"Tak for kaffe :-)\", 30, 10); noFill(); strokeWeight(5); stroke('greenyellow') beginShape(); magnitude = 0; const magStep = map(mouseY, 0, height, 0, 2, true); for (let theta = 0; theta \u003c 100 * PI; theta += 0.2) { let cx = magnitude * cos(theta); let cy = magnitude * sin(theta); if(showDots){ point(cx, cy); } else { vertex(cx, cy); } magnitude += magStep; } endShape(); }\rDemo Prøv det kørende eksempel\nMateriale setup() draw() createCanvas() background() translate() rotate() fill() noFill() beginShape() text() textSize() stroke() strokeWeight() point() vertex() endShape()",
    "description": "Eksempel med omregning mellem polære og kartesiske koordinater.\nlet angle = 0; function setup() { createCanvas(windowWidth, windowHeight); } function draw() { background(0); let diameter = 50; translate(width / 2, height / 2); rotate(angle); const speed = map(mouseX, 0, width, -1, 1, true); angle += 0.1 * speed; const showDots = mouseY \u003c height/2; fill(0); textSize(40); text(\"Tak for kaffe :-)\", 30, 10); noFill(); strokeWeight(5); stroke('greenyellow') beginShape(); magnitude = 0; const magStep = map(mouseY, 0, height, 0, 2, true); for (let theta = 0; theta \u003c 100 * PI; theta += 0.2) { let cx = magnitude * cos(theta); let cy = magnitude * sin(theta); if(showDots){ point(cx, cy); } else { vertex(cx, cy); } magnitude += magStep; } endShape(); }\rDemo Prøv det kørende eksempel\nMateriale setup() draw() createCanvas() background() translate() rotate() fill() noFill() beginShape() text() textSize() stroke() strokeWeight() point() vertex() endShape()",
    "tags": [],
    "title": "Polar Spinner",
    "uri": "/tech/p5js/polar-spinner/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Dette er et eksempel på hvordan man kan loade et billede ind i p5, og ændre på skalering og rotation.\nlet img; function preload() { img = loadImage(\"assets/taco.jpg\"); } function setup() { createCanvas(windowWidth, windowHeight); } let angle = 0; function draw() { background(220); const speed = map(mouseX, 0, width, -1, 1, true); // show angle value const tHeight = 40; const margin = 10; textSize(tHeight); let tposY = margin + tHeight; text(`Angle ${nfc(angle, 2)}`, margin, tposY); tposY += margin + tHeight; text(`Speed ${nfc(speed, 2)}`, margin, tposY); // draw at center of canvas const cx = width / 2; const cy = height / 2; translate(cx, cy); // compute image scale const scale = 0.3; const dw = img.width * scale; const dh = img.height * scale; // draw image rotate(angle); imageMode(CENTER); image(img, 0, 0, dw, dh); angle += 0.1 * speed; }\rDemo Prøv det kørende eksempel\nMateriale translate() rotate() image() imageMode() map() mouseX mouseY nfc()",
    "description": "Dette er et eksempel på hvordan man kan loade et billede ind i p5, og ændre på skalering og rotation.\nlet img; function preload() { img = loadImage(\"assets/taco.jpg\"); } function setup() { createCanvas(windowWidth, windowHeight); } let angle = 0; function draw() { background(220); const speed = map(mouseX, 0, width, -1, 1, true); // show angle value const tHeight = 40; const margin = 10; textSize(tHeight); let tposY = margin + tHeight; text(`Angle ${nfc(angle, 2)}`, margin, tposY); tposY += margin + tHeight; text(`Speed ${nfc(speed, 2)}`, margin, tposY); // draw at center of canvas const cx = width / 2; const cy = height / 2; translate(cx, cy); // compute image scale const scale = 0.3; const dw = img.width * scale; const dh = img.height * scale; // draw image rotate(angle); imageMode(CENTER); image(img, 0, 0, dw, dh); angle += 0.1 * speed; }\rDemo Prøv det kørende eksempel",
    "tags": [],
    "title": "Tacospin",
    "uri": "/tech/p5js/tacospin/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Project",
    "content": "Intro Undersøg hvad rekursion betyder. Søg på recursion på google.\nTowers of Hanoi Denne gennemgang viser hvordan man kan bruge rekursion til at løse “Towers of Hanoi” spillet.\nPython kode fra videoen.\rdef move(f,t): print(\"Flyt: {} ==\u003e {}!\".format(f,t)) def moveVia(f,v,t): move(f,v) move(v,t) def hanoi(n,f,h,t): if n == 0: pass else: hanoi(n-1, f, t, h) move(f,t) hanoi(n-1, h, f ,t)\rOpgave 1: Towers of hanoi i javascript Lav en implementation af løsningen på towers of hanoi i javascript ved hjælp af rekursion.\nOpgave 2: Towers of hanoi i C# Lav en implementation af løsningen på towers of hanoi i C# ved hjælp af rekursion.\nMateriale Recursion Recursion ‘Super Power’ (in Python) - Computerphile Recursion - javascript tutorial Recursion - wikipedia C# Intro Binary, Hanoi and Sierpinski, part 1 - 3Blue1Brown Binary, Hanoi and Sierpinski, part 2 - 3Blue1Brown GNU History Historien bag GNU og navnet.",
    "description": "Intro Undersøg hvad rekursion betyder. Søg på recursion på google.\nTowers of Hanoi Denne gennemgang viser hvordan man kan bruge rekursion til at løse “Towers of Hanoi” spillet.\nPython kode fra videoen.\rdef move(f,t): print(\"Flyt: {} ==\u003e {}!\".format(f,t)) def moveVia(f,v,t): move(f,v) move(v,t) def hanoi(n,f,h,t): if n == 0: pass else: hanoi(n-1, f, t, h) move(f,t) hanoi(n-1, h, f ,t)\rOpgave 1: Towers of hanoi i javascript Lav en implementation af løsningen på towers of hanoi i javascript ved hjælp af rekursion.",
    "tags": [],
    "title": "Rekursion",
    "uri": "/project/recursion/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech",
    "content": "Kom igang med Hugo Hugo Hugo Quickstart Tilføj indhold Indholdet skrives ved hjælp af markdown, som bliver oversat til html.\nMarkdown - John Gruber Markdown Markdown syntax explained Markdown usage with grav theme Hugo shortcodes Diagrammer med Mermaid.js Note\rLæs dokumentation af mermaid.js for mange flere detaljer.\nHer er et eksempel på hvordan man kan lave et flowchart.\n{{\u003c mermaid \u003e}}\rgraph TD;\rEDIT(\"opret/rediger/slet fil(er)\") --\u003e STAGE(\"udvælg ændringer\") STAGE --\u003e COMMIT(\"Commit i lokalt depot\")\rCOMMIT --\u003e DO_PUSH{Klar til offentliggørelse?}\rDO_PUSH --\u003e|Nej| EDIT\rDO_PUSH --\u003e|Ja| PUSH(\"Skub ændriger til 'remote'\")\rPUSH --\u003e EDIT\r{{\u003c / mermaid \u003e}}\rResultatet kommer til at se således ud.\ngraph LR;\rEDIT(\"opret/rediger/slet fil(er)\") --\u003e STAGE(\"udvælg ændringer\") STAGE --\u003e COMMIT(\"Commit i lokalt depot\")\rCOMMIT --\u003e DO_PUSH{Klar til offentliggørelse?}\rDO_PUSH --\u003e|Nej| EDIT\rDO_PUSH --\u003e|Ja| PUSH(\"Skub ændriger til 'remote'\")\rPUSH --\u003e EDIT",
    "description": "Kom igang med Hugo Hugo Hugo Quickstart Tilføj indhold Indholdet skrives ved hjælp af markdown, som bliver oversat til html.\nMarkdown - John Gruber Markdown Markdown syntax explained Markdown usage with grav theme Hugo shortcodes Diagrammer med Mermaid.js Note\rLæs dokumentation af mermaid.js for mange flere detaljer.\nHer er et eksempel på hvordan man kan lave et flowchart.\n{{\u003c mermaid \u003e}}\rgraph TD;\rEDIT(\"opret/rediger/slet fil(er)\") --\u003e STAGE(\"udvælg ændringer\") STAGE --\u003e COMMIT(\"Commit i lokalt depot\")\rCOMMIT --\u003e DO_PUSH{Klar til offentliggørelse?}\rDO_PUSH --\u003e|Nej| EDIT\rDO_PUSH --\u003e|Ja| PUSH(\"Skub ændriger til 'remote'\")\rPUSH --\u003e EDIT\r{{\u003c / mermaid \u003e}}\rResultatet kommer til at se således ud.",
    "tags": [],
    "title": "Hugo Static Site Generator",
    "uri": "/tech/hugo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tools",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Iterativ udvikling",
    "uri": "/tools/development-model/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tools",
    "content": "For at kunne arbejde med HTML, CSS, javascript og andre tekst filer har vi brug for en god editor.\nVisual Studio Code Visual studio code (kan bruges både på Windows og Mac) Husk at vælge alle tilvalg i additional tasks under installationen af VS Code, som vist på billedet. Det gør det nemmere at åbne hele mapper som projekter, i stedet for enkelte filer.\nHusk at alle krydser under installationen. Her finder du information om Visual Studio Code og en kort video intro.\nGetting started with Visual Studio Code Jetbrains produkter Der er mulighed for at bruge en lang række udviklingsmiljøer fra JetBrains i gratis “studenter versioner”.\nhttps://www.jetbrains.com/student/",
    "description": "For at kunne arbejde med HTML, CSS, javascript og andre tekst filer har vi brug for en god editor.\nVisual Studio Code Visual studio code (kan bruges både på Windows og Mac) Husk at vælge alle tilvalg i additional tasks under installationen af VS Code, som vist på billedet. Det gør det nemmere at åbne hele mapper som projekter, i stedet for enkelte filer.\nHusk at alle krydser under installationen. Her finder du information om Visual Studio Code og en kort video intro.",
    "tags": [],
    "title": "Code Editors and IDE's",
    "uri": "/tools/code-editor/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech",
    "content": "Eksempler med Node.js.",
    "description": "Eksempler med Node.js.",
    "tags": [],
    "title": "Node.js",
    "uri": "/tech/node/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech",
    "content": "Eksempler med p5.js.",
    "description": "Eksempler med p5.js.",
    "tags": [],
    "title": "p5.js",
    "uri": "/tech/p5js/index.html"
  },
  {
    "breadcrumb": "Getsrevel",
    "content": "Eksempler med teknologier vi arbejder med i programmering.",
    "description": "Eksempler med teknologier vi arbejder med i programmering.",
    "tags": [],
    "title": "Teknologi",
    "uri": "/tech/index.html"
  },
  {
    "breadcrumb": "Getsrevel",
    "content": "Her er en samling af software udviklingsværktøj.",
    "description": "Her er en samling af software udviklingsværktøj.",
    "tags": [],
    "title": "Værktøj",
    "uri": "/tools/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Project",
    "content": "Eksempel på skitse af tændstikmand. Bemærk at y-aksen regnes positivt fra toppen og ned. Opgave: Lav en tændstikmand Opgaven går ud på at eksperimentere med computergrafik. Ved hjælp af p5js skal du lave et program der benytter forskellige tegne funktioner, til at generere en “tændstikmand”.\nHan skal som minimum bestå af:\nhoved mund øjne krop arme ben Ekstra: til den “kvikke elev”; få din tændstikmand til at ændre udseende dynamisk f.eks. vha. museinput, knaptryk\nhovedets størrelse blinke med øjnene ændre farver Du kan med fordel tegne en skitse først, så du nemmere kan holde styr på koordinater.\nVær kreativ :-)\nMateriale P5js introduktion",
    "description": "Eksempel på skitse af tændstikmand. Bemærk at y-aksen regnes positivt fra toppen og ned. Opgave: Lav en tændstikmand Opgaven går ud på at eksperimentere med computergrafik. Ved hjælp af p5js skal du lave et program der benytter forskellige tegne funktioner, til at generere en “tændstikmand”.\nHan skal som minimum bestå af:\nhoved mund øjne krop arme ben Ekstra: til den “kvikke elev”; få din tændstikmand til at ændre udseende dynamisk f.eks. vha. museinput, knaptryk",
    "tags": [],
    "title": "Stickman",
    "uri": "/project/stickman/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tools",
    "content": "Git introduktion Git and GitHub for Poets Codingtrain tutorial. Git installation. Vælg den der passer til dit operativ system. På mac er git sikkert allerede installeret. Bruger du linux, ved du formentlig selv hvordan du installerer pakker, der passer til din distribution. How to use git in Visual Studio code Git book About Version Control What is Git? Ignoring Files chapter Git in Visual Studio Code GitHub guides - Hello World Hosting a p5.js sketch with GitHub Pages Basal Arbejdsgang Den følgende illustration viser hvordan forskellige kommandoer påvirker komponenterne i git systemet.\nDenne figur illustrer hvordan de enkelte filer skifter tilstand når man arbejder med git.\nSamarbejde via github For at kunne samarbejde om den samme kodebase er det nødvendigt med en smule setup for at komme igang.\nHvis vi tager udgangspunkt i et nyt projekt kræves denne opsætning.\nopret et repository i github lave en klon på den/de computere der skal deltage. Ejeren af “repository” skal tilføje de andre bruger som samarbejdspartnere (Collaborators) Samarbejdspartnere skal acceptere invitationen (typisk via et link i en email) Efter accept af samabejdsinvitation kan de inviterede brugere skubbe kode ind i projektet. Samarbejde via Git Her er en visualisering af opsætningen med to samarbejdende udviklere.\nBasale kommandoer Ønsker du at bruge git fra en kommandoprompt er her en liste med basale kommandoer\nGithub pages Her finder du en guide til at komme igang med Github pages.\nDenne videoguide forklarer hvordan man kommer igang med at bruge github pages til at hoste sin webside.\nKonfliktløsning Når man er flere der samarbejder om samme kode kompleks opstår der uungåeligt det at man på et tidspunkt kommer til at ændre i en fil , der allerede er blevet ændret af en anden person. Derfor er det nødvendigt at vide hvordan man løser disse konflikter i git, så man kan komme videre med arbejdet.\nKonfliktløsningsscenariet kan illustreres med et eksempel i et sekvensdiagram.\nKonfliktløsning i git er også beskrevet i denne video.\n1.9: Resolving Merge Conflicts - Git and GitHub for Poets",
    "description": "Git introduktion Git and GitHub for Poets Codingtrain tutorial. Git installation. Vælg den der passer til dit operativ system. På mac er git sikkert allerede installeret. Bruger du linux, ved du formentlig selv hvordan du installerer pakker, der passer til din distribution. How to use git in Visual Studio code Git book About Version Control What is Git? Ignoring Files chapter Git in Visual Studio Code GitHub guides - Hello World Hosting a p5.js sketch with GitHub Pages Basal Arbejdsgang Den følgende illustration viser hvordan forskellige kommandoer påvirker komponenterne i git systemet.",
    "tags": [],
    "title": "Git Intro",
    "uri": "/tools/git/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Et eksempel der viser hvordan HSL farver kan bruges i p5.\nfunction setup() { createCanvas(windowWidth, windowHeight); slider = createSlider(0, 255, 200, 1); slider.position(width/2-255, height/2-300); slider.style('width', `${255*2}px`); } function draw() { translate(width / 2, height / 2); const x1 = 0; const y1 = 0; const x2 = mouseX - width / 2; const y2 = mouseY - height / 2; const angle = atan2(y2, x2); // d is the length of the line // the distance from point 1 to point 2. const d = int(dist(x1, y1, x2, y2)); const saturation = constrain(d, 0, 255); const hueVal = map(angle, -PI, PI, 0, 255); const brightnessVal = slider.value(); const x3 = saturation * cos(angle); const y3 = saturation * sin(angle); // background(200); colorMode(HSB, 255); const c = color(hueVal, saturation, brightnessVal); noFill(); circle(x1, y1, 255*2); fill(c); // line(x1, y1, x3, y3); const circleDiameter = 30; stroke(0) strokeWeight(3) circle(x1, y1, circleDiameter * 2); noStroke() circle(x3, y3, circleDiameter); // Write values as text let msg = `abs: ${d}, angle: ${nfc(angle, 2)}`; let hsvMsg = `hue: ${nfc(hueVal, 0)}, saturation: ${nfc(saturation)}, brightness: ${nfc(brightnessVal)}`; push(); translate(x1 -200, y1 - 320); noStroke(); fill(255); rect(-10,-50,400,60) fill(0); textSize(20); text(msg, 0, -5); text(hsvMsg, 0, -30); pop(); }\rDemo Prøv det kørende eksempel\nMateriale atan2() constrain() dist() colorMode() map() translate() nfc() text() textSize() push() pop() push()",
    "description": "Et eksempel der viser hvordan HSL farver kan bruges i p5.\nfunction setup() { createCanvas(windowWidth, windowHeight); slider = createSlider(0, 255, 200, 1); slider.position(width/2-255, height/2-300); slider.style('width', `${255*2}px`); } function draw() { translate(width / 2, height / 2); const x1 = 0; const y1 = 0; const x2 = mouseX - width / 2; const y2 = mouseY - height / 2; const angle = atan2(y2, x2); // d is the length of the line // the distance from point 1 to point 2. const d = int(dist(x1, y1, x2, y2)); const saturation = constrain(d, 0, 255); const hueVal = map(angle, -PI, PI, 0, 255); const brightnessVal = slider.value(); const x3 = saturation * cos(angle); const y3 = saturation * sin(angle); // background(200); colorMode(HSB, 255); const c = color(hueVal, saturation, brightnessVal); noFill(); circle(x1, y1, 255*2); fill(c); // line(x1, y1, x3, y3); const circleDiameter = 30; stroke(0) strokeWeight(3) circle(x1, y1, circleDiameter * 2); noStroke() circle(x3, y3, circleDiameter); // Write values as text let msg = `abs: ${d}, angle: ${nfc(angle, 2)}`; let hsvMsg = `hue: ${nfc(hueVal, 0)}, saturation: ${nfc(saturation)}, brightness: ${nfc(brightnessVal)}`; push(); translate(x1 -200, y1 - 320); noStroke(); fill(255); rect(-10,-50,400,60) fill(0); textSize(20); text(msg, 0, -5); text(hsvMsg, 0, -30); pop(); }\rDemo Prøv det kørende eksempel",
    "tags": [],
    "title": "HSL Colors",
    "uri": "/tech/p5js/hsl-colors/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e HSL Colors",
    "content": "",
    "description": "",
    "tags": [],
    "title": "HSL Colors demo",
    "uri": "/tech/p5js/hsl-colors/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js \u003e Stickman Objects",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Stickman demo",
    "uri": "/tech/p5js/stickman-demo/demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Denne demonstration er et eksempel på hvordan man kan bruge klasser og objekter til at strukturere koden. I eksemplet tegnes nogle hoppende tændstikmænd med forskellige egenskaber.\nFilen sketch.js indeholder den sædvanlige struktur for et program skrevet i p5js.\nI setup() oprettes et lærred, og der oprettes tre objekter af klassen stickman. Bemærk at de bliver initialiseret med forskellige egenskaber via deres constructor.\nI draw() kaldes metoderne render() og update() på begge de to StickMan objekter.\nDerudover er metoden mouseClicked() implementeret, og denne sørger for at kalde metoden jump på de to stickman objekter, med den effekt at de begge hopper når der klikkes med musen.\nlet man; let child; function setup() { createCanvas(windowWidth, windowHeight); const halfWidth = width/2; man = new StickMan(halfWidth +150, 70, 25, \"blue\"); woman = new StickMan(halfWidth - 150, 60, 15, \"red\"); child = new StickMan(halfWidth, 30, 45, \"greenyellow\"); } function draw() { background(220); textSize(20) text(\"Klik med musen for at hoppe\", 30, 40) man.render(); man.update(); woman.render(); woman.update(); child.render(); child.update(); } function mouseClicked() { man.jump(); woman.jump(); child.jump(); }\rHerunder ses implementationen af stickman klassen, som er lavet separat i filen stickman.js for at gøre koden mere overskuelig.\nclass StickMan { constructor(x, minHeight, jumpSpeed, color) { this.x = x; this.jumpSpeed = jumpSpeed; this.minHeight = minHeight; this.height = minHeight; this.color = color; this.y = height / 2; this.vy = 0; this.gravity = 1.5; } jump() { if (this.y == height) { this.vy = - this.jumpSpeed; } } update() { // fall down this.y += this.vy; // increase fall speed due to gravity this.vy += this.gravity; // stop at floor this.y = constrain(this.y, -3000, height); // change the size this.height = map(mouseX, 0, width, this.minHeight, this.minHeight * 6); } render() { // compute the dimensions of the body parts const headDiameter = this.height * 0.2; const headRadius = headDiameter / 2; const bodyHeight = (this.height - headDiameter) * 0.4; const legHeight = this.height - headDiameter - bodyHeight; const legWidth = headDiameter * 0.5; const armWidth = headDiameter * 0.75; const armHeight = headDiameter * 1.8; const neckLength = headDiameter * 0.3; const headX = this.x; const headY = this.y - this.height + headRadius; // draw the stickman push(); fill(this.color); strokeWeight(3); // head circle(headX, headY, headDiameter); // body line(headX, headY + headRadius, headX, headY + headRadius + bodyHeight); // arms const shoulderY = headY + headRadius + neckLength; line(headX, shoulderY, headX - armWidth, shoulderY + armHeight); line(headX, shoulderY, headX + armWidth, shoulderY + armHeight); // legs const legY = headY + headRadius + bodyHeight; line(headX, legY, headX - legWidth, legY + legHeight); line(headX, legY, headX + legWidth, legY + legHeight); pop(); } }\rHusk at begge filer skal inkluderes i html strukturen. Hvis de ligger i samme mappe som html filen kan det gøres således:\n\u003cscript src=\"stickman.js\"\u003e\u003c/script\u003e \u003cscript src=\"sketch.js\"\u003e\u003c/script\u003e\rDemo Prøv det kørende eksempel\nMateriale Classes Mozilla Developer Network web documentation. The \u003cscript\u003e Tag W3schools javascript tutorial. setup() createCanvas() width height draw() background() constrain() push() pop() fill() strokeWeight() circle() ellipse() line() mouseClicked()",
    "description": "Denne demonstration er et eksempel på hvordan man kan bruge klasser og objekter til at strukturere koden. I eksemplet tegnes nogle hoppende tændstikmænd med forskellige egenskaber.\nFilen sketch.js indeholder den sædvanlige struktur for et program skrevet i p5js.\nI setup() oprettes et lærred, og der oprettes tre objekter af klassen stickman. Bemærk at de bliver initialiseret med forskellige egenskaber via deres constructor.\nI draw() kaldes metoderne render() og update() på begge de to StickMan objekter.",
    "tags": [],
    "title": "Stickman Objects",
    "uri": "/tech/p5js/stickman-demo/index.html"
  },
  {
    "breadcrumb": "Getsrevel \u003e Tech \u003e p5.js",
    "content": "Her er et eksempel på hvordan man kan arbejde med lyd i p5.\nlet flickSound; let whistleSound; let whistleShortSound function preload() { flickSound = loadSound('flick.mp3'); whistleSound = loadSound('whistle.mp3', doneLoadingWhistleSound); whistleShortSound = loadSound('whistle-short.mp3', () =\u003e { console.log('short ready'); }); } function setup() { createCanvas(windowWidth, windowHeight); } function doneLoadingWhistleSound(){ console.log(\"doneLoadingWhistleSound\"); } function draw() { background(220); fill(\"blue\"); circle(width / 2, height / 2, 50); textSize(20); text(\"Tryk på: SPACE, K, L, W\", 50,50); text(\"eller klik med musen\", 50,80); } function mouseClicked(){ console.log(\"flick started by mouse\"); flickSound.play(); } function keyPressed(){ if(' ' == key){ console.log(\"flick started by keyboad\"); flickSound.play(); } if('l' == key){ whistleSound.setLoop(true); whistleSound.play(); } if('k' == key){ whistleSound.setLoop(false); } if('w' == key) { console.log(\"short whistle\"); whistleShortSound.play(); } }\rDemo Prøv det kørende eksempel.\nMateriale p5.SoundFile dokumentation. p5js Sound Tutorial er en playliste der gennemgår en række anvendelser af lyd i p5. 17.1: Loading and Playing - p5.js Sound Tutorial 17.5: Adding Sound Effects - p5.js Sound Tutorial 17.5: Adding Sound Effects - p5.js Sound Tutorial",
    "description": "Her er et eksempel på hvordan man kan arbejde med lyd i p5.\nlet flickSound; let whistleSound; let whistleShortSound function preload() { flickSound = loadSound('flick.mp3'); whistleSound = loadSound('whistle.mp3', doneLoadingWhistleSound); whistleShortSound = loadSound('whistle-short.mp3', () =\u003e { console.log('short ready'); }); } function setup() { createCanvas(windowWidth, windowHeight); } function doneLoadingWhistleSound(){ console.log(\"doneLoadingWhistleSound\"); } function draw() { background(220); fill(\"blue\"); circle(width / 2, height / 2, 50); textSize(20); text(\"Tryk på: SPACE, K, L, W\", 50,50); text(\"eller klik med musen\", 50,80); } function mouseClicked(){ console.log(\"flick started by mouse\"); flickSound.play(); } function keyPressed(){ if(' ' == key){ console.log(\"flick started by keyboad\"); flickSound.play(); } if('l' == key){ whistleSound.setLoop(true); whistleSound.play(); } if('k' == key){ whistleSound.setLoop(false); } if('w' == key) { console.log(\"short whistle\"); whistleShortSound.play(); } }\rDemo Prøv det kørende eksempel.",
    "tags": [],
    "title": "Sound",
    "uri": "/tech/p5js/sound/index.html"
  },
  {
    "breadcrumb": "Getsrevel",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  }
]
