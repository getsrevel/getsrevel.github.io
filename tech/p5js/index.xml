<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>p5.js :: Getsrevel</title><link>https://getsrevel.github.io/tech/p5js/index.html</link><description>Eksempler med p5.js.</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 25 Nov 2021 10:53:45 +0100</lastBuildDate><atom:link href="https://getsrevel.github.io/tech/p5js/index.xml" rel="self" type="application/rss+xml"/><item><title>Intro til P5js</title><link>https://getsrevel.github.io/tech/p5js/intro/index.html</link><pubDate>Wed, 04 Dec 2019 12:44:31 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/intro/index.html</guid><description>Materiale p5js p5 code editor browserbaseret editor der ikke kræver installation. p5 reference er dokumentation af de mange funktioner i p5. Variabler i javascript bliver grundigt forklaret og bruger et metafor med en kasse, der måske kan hjælpe lidt på forståelsen. Variable scope forklaret ved et eksempel. P5 Cheat Sheet giver en oversigt over de basale elementer i p5.js. Tegn på skærmen Denne video forklarer de grundlæggende principper i computergrafik.</description></item><item><title>Canvas</title><link>https://getsrevel.github.io/tech/p5js/canvas/index.html</link><pubDate>Wed, 04 Dec 2019 12:46:20 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/canvas/index.html</guid><description>Dette eksempel viser hvordan man opretter et lærred og tegner figurer på skærmen. Der benyttes variabler og musemarkørens position til at styre hvor på skærmen der tegnes.
function setup() { createCanvas(windowWidth, windowHeight); } function draw() { background(220); fill(255); // variable declaration let x; // variable assignment x = mouseX; // declaration and assignment in one line let y = mouseY; circle(x, y, 150); // assign a new value to x x = 200; ellipse(x, y, 80, 40); fill(255, 0, 0); circle(width, height, 120); let cx = width / 2; let cy = height / 2; circle(cx, cy, 50); }Demo Prøv det kørende eksempel</description></item><item><title>Objects Simple</title><link>https://getsrevel.github.io/tech/p5js/objects-simple/index.html</link><pubDate>Thu, 25 Nov 2021 10:53:45 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/objects-simple/index.html</guid><description>Dette eksempel viser hvordan man kan bruge vektorer i en klasse til at tegne figurer på skærmen.
Når man klikker med musen genereres et tilfældigt antal rektangler, som tegnes på skærmen.
Det grundlæggende programflow håndteres i filen sketch.js.
let shapes = [] function setup() { createCanvas(windowWidth, windowHeight); createShapes() } function draw() { background('LightSkyBlue'); for (const shape of shapes) { shape.render() } } // === Helper functions function createShapes() { shapes = [] let p1 = new p5.Vector() let p2 = new p5.Vector() let shapeCount = random(10) for (let i = 0; i &lt; shapeCount; i++) { p1.x = random(0, width) p1.y = random(0, height) p2.x = random(0, width) p2.y = random(0, height) let s = new Shape(p1, p2) shapes.push(s) } } // === Event handling function mousePressed() { createShapes() }Klassen Shape er defineret i filen shape.js.</description></item><item><title>Circle Rain</title><link>https://getsrevel.github.io/tech/p5js/circle-rain/index.html</link><pubDate>Mon, 01 Nov 2021 13:10:24 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/circle-rain/index.html</guid><description>Eksemplet tegner en mængde cirkler på skærmen, der falder mod bunder af skærmen som en slags regn. Der defineres en funktion der kan ændre cirklernes egenskaber: position og hastighed. Der benyttes arrays til at kan holde styr de mange cirklers individuelle egenskaber.
const ballCount = 100 let diameters = new Array(ballCount); let xPositions = new Array(ballCount); let yPositions = new Array(ballCount); let ySpeeds = new Array(ballCount); function setup() { createCanvas(windowWidth, windowHeight); reset(50) } function draw() { background(220); for (let i = 0; i &lt; ballCount; i++) { circle(xPositions[i], yPositions[i], diameters[i]) yPositions[i] += ySpeeds[i]; } } function reset(maxSize) { for (let i = 0; i &lt; ballCount; i++) { diameters[i] = random(0, maxSize); ySpeeds[i] = random(0.01, 10); xPositions[i] = random(0, width); yPositions[i] = random(0, height) - height; } } function mouseClicked() { const maxSize = map(mouseY, 0, height,0,200) reset(maxSize) }Demo Prøv det kørende eksempel</description></item><item><title>Input Events</title><link>https://getsrevel.github.io/tech/p5js/input-events/index.html</link><pubDate>Wed, 27 Oct 2021 20:12:51 +0200</pubDate><guid>https://getsrevel.github.io/tech/p5js/input-events/index.html</guid><description>Eksemplet viser, hvordan man kan benytte input events fra keyboard og mus til at ændre på figurens udseende.
let fillColor = 'black' let sizeMultiplier = 1 function setup() { createCanvas(windowWidth, windowHeight) rectMode(CENTER) } function draw() { background(220); text("Press 'r', 'b' or click mouse to change color", 40, 40) textSize(20) let xPos = mouseX let yPos = mouseY let shapeSize = 80 * sizeMultiplier fill(fillColor) if (keyIsPressed) { rect(xPos, yPos, shapeSize) } else { circle(xPos, yPos, shapeSize) } } function keyPressed() { console.log("pressed", key) if ('b' == key) { fillColor = 'blue' } if ('r' == key) { fillColor = 'red' } } function keyReleased() { console.log("released", key) sizeMultiplier = 1 } function mousePressed() { console.log("mouse pressed") fillColor = 'yellow' sizeMultiplier = 3 } function mouseReleased() { console.log("mouse released") fillColor = 'black' sizeMultiplier = 3 }Demo Prøv det kørende eksempel</description></item><item><title>Circle Collision</title><link>https://getsrevel.github.io/tech/p5js/circle-collision/index.html</link><pubDate>Thu, 25 Feb 2021 21:26:19 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/circle-collision/index.html</guid><description>Dette er et eksempel på, hvordan man kan benytte p5.Vector klassen til at simulere kollision mellem 2 cirkler.
Den resulterende hastighedsvektor efter kollisionen beregnes ved at benytte reflektion om normalvektoren til de sammenstødende cirkelperiferier.
Reflektionen kan beregnes ved hjælp af formlen
$$\vec r = \vec d - 2 (\vec d \cdot \vec n) \vec n$$
hvor \( \vec d \) er den indkommende vektor, \( \vec n = \frac{\vec n}{|\vec n|}\) er en normaliseret normal-vektor til cirkelperiferien, og \( \vec r \) er reflektionen af \( \vec d \) omkring \( \vec n \).</description></item><item><title>Shape Drawing</title><link>https://getsrevel.github.io/tech/p5js/shape-drawing/index.html</link><pubDate>Wed, 03 Feb 2021 21:35:59 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/shape-drawing/index.html</guid><description>Dette eksempel viser hvordan man kan tegne figurer interaktivt ved at opbygge lister af punkter der forbindes.
Listen af punkter opbygges ved at klikke med musen, og den fremkomne figur kan føjes til listen og eller fjernes igen med keyboard kommandoer.
let currentShape = []; let shapes = []; function setup() { createCanvas(windowWidth, windowHeight); loadData(); } function draw() { background(0); renderHelp(); renderShapes(); renderCurrentShape(); } function renderHelp() { push(); fill(220) textSize(20); text("k : Add shape", 30, 30); text("j : Revert last added shape", 30, 55); text("u : Undo last point", 30, 80); text("r : Clear drawing", 30, 105); pop(); } function renderShapes() { push(); for (const shape of shapes) { noFill(); stroke('greenyellow'); strokeWeight(2); beginShape(); curveVertex(shape[0].x, shape[0].y); for (const p of shape) { curveVertex(p.x, p.y); } const lastPoint = shape[shape.length - 1]; curveVertex(lastPoint.x, lastPoint.y); endShape(); } pop(); } function renderCurrentShape() { push(); noFill(); stroke('red') strokeWeight(5) for (const p of currentShape) { point(p.x, p.y); } strokeWeight(2) beginShape(); for (const p of currentShape) { vertex(p.x, p.y); } endShape(); pop(); } function clearDrawing() { shapes = []; currentShape = []; } function addShape() { const aCopy = currentShape.slice(); shapes.push(aCopy); currentShape = []; } function mousePressed() { const p = createVector(mouseX, mouseY); currentShape.push(p); } function keyPressed() { if (key == 'r') { clearDrawing(); } if (key == 'j') { if (0 &lt; shapes.length) { currentShape = shapes.pop(); } } if (key == 'u') { currentShape.pop(); } if (key == 'k') { addShape(); } if (key == 'd') { loadData(); } } function loadData() { shapes = [ [ new p5.Vector(210, 165), new p5.Vector(119, 198), new p5.Vector(96, 266), new p5.Vector(122, 334), new p5.Vector(200, 388), new p5.Vector(311, 374), new p5.Vector(330, 273), new p5.Vector(309, 189), new p5.Vector(214, 141), new p5.Vector(175, 147), new p5.Vector(153, 124), ], [ new p5.Vector(184, 225), new p5.Vector(165, 231), new p5.Vector(166, 257), new p5.Vector(182, 259), new p5.Vector(200, 240), new p5.Vector(189, 226), ], [ new p5.Vector(240, 232), new p5.Vector(238, 250), new p5.Vector(253, 266), new p5.Vector(270, 250), new p5.Vector(264, 231), new p5.Vector(249, 225), new p5.Vector(241, 226), ], [ new p5.Vector(165, 300), new p5.Vector(190, 321), new p5.Vector(242, 333), new p5.Vector(271, 321), new p5.Vector(280, 302), ], ]; // Center the shape horizontally const xOffset = width / 2 - 220; for (const shape of shapes) { for (const p of shape) { p.x += xOffset; } } }Demo Prøv det kørende eksempel</description></item><item><title>Nested Loops</title><link>https://getsrevel.github.io/tech/p5js/nested-loops/index.html</link><pubDate>Sat, 05 Dec 2020 16:37:10 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/nested-loops/index.html</guid><description>Dette er et eksempel på hvordan man bruge indlejrede løkker (løkker inden i andre løkker).
function setup() { createCanvas(windowWidth, windowHeight); } function draw(){ background(0); const gridSize = 35; const focusX = mouseX const focusY = mouseY for (let x = gridSize; x &lt;= width - gridSize; x += gridSize) { for (let y = gridSize; y &lt;= height - gridSize; y += gridSize) { stroke(255, random(40, 100)); strokeWeight(3) point(x, y); stroke(255, 20); strokeWeight(1) line(x, y, focusX, focusY); } } }Demo Prøv det kørende eksempel
Materiale Loops: while and for - Javascript tutorial for - MDN docs setup() createCanvas() draw() background() map() stroke() strokeWeight() point() line() mouseX mouseY</description></item><item><title>Ball Objects</title><link>https://getsrevel.github.io/tech/p5js/ball-objects/index.html</link><pubDate>Thu, 12 Nov 2020 21:31:46 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/ball-objects/index.html</guid><description>Dette eksempel viser hvordan kan benytte klasser og nedarvning i til at lave en simulering af hoppende bolde.
Der benyttes 3 klasser som illustreret i dette klasse diagram.
classDiagram Ball &lt;|-- BouncingBall BouncingBall &lt;|-- RandomBouncingBall Ball : constructor(position) Ball : update() Ball : render() Ball : r Ball : pos Ball : speed BouncingBall : update() RandomBouncingBall : lineWidth RandomBouncingBall : strokeColor RandomBouncingBall : fillColor RandomBouncingBall : constructor(position) RandomBouncingBall : render() RandomBouncingBall : _generateColors() Det grundlæggende programflow håndteres i filen sketch.js.</description></item><item><title>Map Range</title><link>https://getsrevel.github.io/tech/p5js/map-range/index.html</link><pubDate>Thu, 05 Nov 2020 17:07:16 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/map-range/index.html</guid><description>Dette rutediagram viser hvordan en løkke fungerer.
flowchart TD start((S)) --> init[INITIALIZE] init --> cond{CONDITION?} cond -->|true| body[LOOP_BODY] body --> step[POST_STEP] step --> cond cond ---->|false| end_loop((E)) classDef termination fill:#fff,stroke:#000,color:#fff,stroke-width:4px; class start,end_loop termination %%classDef myClass fill:#ddd, stroke:#000; %%class init,cond,body,step myClass For løkke Her er for-løkken vist med pseudokode.
for(INITIALIZE;CONDITION;POST_STEP){ LOOP_BODY }Her er et konkret eksempel i javascript, der printer tal fra 0 til 9.
for(let i = 0; i &lt; 10; i++){ console.log(i); }While løkke En anden måde at lave en løkker er ved at bruge while.</description></item><item><title>Logical Operators</title><link>https://getsrevel.github.io/tech/p5js/logical-operators/index.html</link><pubDate>Sun, 25 Oct 2020 09:57:22 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/logical-operators/index.html</guid><description>Dette eksempel viser hvordan man kan benytte de forskellige logiske operatorer: OR, AND, NOT, XOR.
OR (||) let result = a || ba b result FALSE ❌ FALSE ❌ FALSE ❌ FALSE ❌ TRUE ✔️ TRUE ✔️ TRUE ✔️ FALSE ❌ TRUE ✔️ TRUE ✔️ TRUE ✔️ TRUE ✔️ AND (&amp;&amp;) let result = a &amp;&amp; ba b result FALSE ❌ FALSE ❌ FALSE ❌ FALSE ❌ TRUE ✔️ FALSE ❌ TRUE ✔️ FALSE ❌ FALSE ❌ TRUE ✔️ TRUE ✔️ TRUE ✔️ NOT (!) let result = !aa result FALSE ❌ TRUE ✔️ TRUE ✔️ FALSE ❌ XOR Der findes ikke en selvstændig operator, der laver XOR i javascript. Denne kan opbygges af de andre logiske operationer.</description></item><item><title>Ball Bounce</title><link>https://getsrevel.github.io/tech/p5js/ball-bounce/index.html</link><pubDate>Mon, 17 Feb 2020 14:48:30 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/ball-bounce/index.html</guid><description>I dette eksempel demonstreres hvordan man kan benytte forgreninger og boolske udtryk til at ændre bevægelsesretningen på en cirkel, så det minder om en bold, der hopper når den rammer siderne.
// Lav en variabel og kald den x // giv x værdien 200 let x = 200; // opret flere variabler let xSpeed = 5; let y = 200; let ySpeed = 3; let c; let cFill; // Definer en funktion der kan ændre fyld og stregfarve function changeColor() { c = color(random(255), random(255), random(255)); cFill = color(random(255), random(255), random(255)); strokeWeight(10); stroke(c); fill(cFill); } function setup() { createCanvas(windowWidth, windowHeight); const speedScale = 128 xSpeed = windowWidth / speedScale ySpeed = windowHeight / speedScale changeColor(); } function draw() { background(c); rect(0, 0, width, height); // opret variabler til radius og diameter let r = 60; let d = r * 2; // tegn en cirkel med centrum i (x, y) og diameter d circle(x, y, d); // hvis x er større end bredden af lærredet // så sæt xSpeed til -xSpeed let isPastRightSide = width &lt; x + r if (isPastRightSide) { changeColor(); xSpeed = -xSpeed; } let isPastLeftSide = 0 > x - r if (isPastLeftSide) { changeColor(); xSpeed = -xSpeed; } let isBelowBottom = height &lt; y + r let isAboveTop = 0 > y - r if (isBelowBottom || isAboveTop) { changeColor(); ySpeed = -ySpeed; } x = x + xSpeed; // samme som // y = y + ySpeed; y += ySpeed; }Demo Prøv det kørende eksempel</description></item><item><title>Random Color</title><link>https://getsrevel.github.io/tech/p5js/random-color/index.html</link><pubDate>Mon, 03 Feb 2020 13:19:04 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/random-color/index.html</guid><description>Dette eksempel tegner cirkler med tilfældigt valgt fyldfarve. Når venstre museknap er trykket ned skiftes til fyldfarver i tilfældige gråtoner.
I eksemplet viser hvordan man kan bruge en betingelse (museknappen er trykket ned), og en en forgrening (if-sætning) til at få programmet til at ændre opførsel.
function setup() { createCanvas(windowWidth, windowHeight); } function draw() { if (mouseIsPressed) { fill(random(255)); } else { fill(random(255), random(255),random(255)); } circle(mouseX, mouseY, 80); }Demo Prøv det kørende eksempel</description></item><item><title>Times Table</title><link>https://getsrevel.github.io/tech/p5js/times-table/index.html</link><pubDate>Mon, 03 Feb 2020 12:53:41 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/times-table/index.html</guid><description>Dette eksempel er baseret på ideer fra denne video.
let r; let factor = 0; let total = 0; function setup() { createCanvas(windowWidth, windowHeight); const maxSize = min(width, height); r = maxSize / 2 - 16; } function getVector(index, total) { const angle = map(index % total, 0, total, 0, TWO_PI); const v = p5.Vector.fromAngle(angle + PI); v.mult(r); return v; } let xoff = 0; function updateColor() { xoff = xoff + 0.01; let r = noise(xoff) * 255; let g = noise(xoff + 200) * 255; let b = noise(xoff + 400) * 255; stroke(r, g, b); } function draw() { background(0); let autoRun = true; if (autoRun) { total = 100; factor += 0.01; } else { total = map(mouseY, 0, height, 0, 200); factor = map(mouseX, 0, width, 0, 20); } translate(width / 2, height / 2); textSize(32); text("total " + nf(total, 0, 2), -width / 2 + 10, height / 2 - 70); text("factor " + nf(factor, 0, 3), -width / 2 + 10, height / 2 - 30); noFill(); strokeWeight(2); updateColor(); ellipse(0, 0, r * 2); strokeWeight(1); for (let i = 0; i &lt; total; i++) { const a = getVector(i, total); const b = getVector(i * factor, total); line(a.x, a.y, b.x, b.y); } }Demo Prøv det kørende eksempel</description></item><item><title>Key Press Multi</title><link>https://getsrevel.github.io/tech/p5js/key-pressed-multi/index.html</link><pubDate>Mon, 16 Dec 2019 22:30:39 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/key-pressed-multi/index.html</guid><description>Her er et eksempel der viser hvordan man kan håndtere input fra flere taster på en gang.
let cx; let cy; let state = { north: false, south: false, west: false, east: false, boost: false }; function setup() { createCanvas(windowWidth, windowHeight); cx = width / 2; cy = height / 2; } function draw() { background(220); fill(0); noStroke(); textSize(20); text(`Move using arrow keys and space`, 10, 30); // show if (state.boost) { fill("orange"); stroke("red"); } else { fill("gray"); stroke(0); } strokeWeight(5); circle(cx, cy, 50); // update position const step = state.boost ? 5 : 1; if (state.west) { cx -= step; } if (state.east) { cx += step; } if (state.north) { cy -= step; } if (state.south) { cy += step; } } function keyPressed() { console.log("Pressed:", key, keyCode) if (key === " ") { state.boost = true; } if (keyCode === LEFT_ARROW) { state.west = true; } if (keyCode === RIGHT_ARROW) { state.east = true; } if (keyCode === UP_ARROW) { state.north = true; } if (keyCode === DOWN_ARROW) { state.south = true; } return true } function keyReleased() { console.log("Released:", key, keyCode) if (key === " ") { state.boost = false; } if (keyCode === LEFT_ARROW) { state.west = false; } if (keyCode === RIGHT_ARROW) { state.east = false; } if (keyCode === UP_ARROW) { state.north = false; } if (keyCode === DOWN_ARROW) { state.south = false; } return true }Bemærk at både keyPressed() og keyReleased() hændelser håndteres for alle gyldige input.</description></item><item><title>Keyboard</title><link>https://getsrevel.github.io/tech/p5js/key-is-pressed/index.html</link><pubDate>Wed, 04 Dec 2019 13:22:34 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/key-is-pressed/index.html</guid><description>I dette eksempel bruges keyIsPressed til at ændre fyldfarven på figuren.
function setup() { let canvas = createCanvas(400, 400); canvas.parent("sketch-holder"); } function draw() { background(100, 0, 0); fill("red"); circle(50, 150, 50); circle(width - 50, 50, 50); if (keyIsPressed === true) { fill(0); } else { fill(255); } rect(25, 25, 50, 50); }Demo Her kan du se en kørende version af programmet. Prøv at trykke på en vilkårlig tast på tastaturet.
Prøv også det kørende eksempel på en selvstændig side.</description></item><item><title>Fullscreen toggle</title><link>https://getsrevel.github.io/tech/p5js/fullscreen-toggle/index.html</link><pubDate>Wed, 04 Dec 2019 12:46:20 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/fullscreen-toggle/index.html</guid><description>Dette eksempel viser hvordan man kan køre en sketch, der fylder hele skærmen.
let cnv; function setup() { cnv = createCanvas(windowWidth, windowHeight); centerCanvas(); background(255, 0, 200); } function draw() { background(220); const cSize = 50; fill(20); circle(width / 2, height / 2, cSize); fill(255); circle(100, 100, cSize); circle(width - 100, 100, cSize); circle(100, height - 100, cSize); circle(width - 100, height - 100, cSize); fill(0, 102, 153); textSize(20); textAlign(CENTER); text("Click me!", width / 2, height / 2 - cSize); } function mousePressed() { if (mouseX > 0 &amp;&amp; mouseX &lt; width &amp;&amp; mouseY > 0 &amp;&amp; mouseY &lt; height) { let fs = fullscreen(); fullscreen(!fs); } } function centerCanvas() { let x = (windowWidth - width) / 2; let y = (windowHeight - height) / 2; cnv.position(x, y); } function windowResized() { resizeCanvas(windowWidth, windowHeight); centerCanvas(); }Demo Prøv det kørende eksempel</description></item><item><title>Key Pressed Simple</title><link>https://getsrevel.github.io/tech/p5js/key-pressed-simple/index.html</link><pubDate>Wed, 04 Dec 2019 12:46:20 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/key-pressed-simple/index.html</guid><description>Eksempel på simpel håndtering af input-hændelser (events) fra tastaturet med keyPressed().
let cx; let cy; function setup() { createCanvas(windowWidth, windowHeight); cx = width / 2; cy = height / 2; } function draw() { background(20); fill("gray"); textSize(20); text(`Move using arrow keys`, 10, 30); fill("red"); noStroke(); circle(cx, cy, 50); } function keyPressed() { const step = 10; if (keyCode === LEFT_ARROW) { cx -= step; } if (keyCode === RIGHT_ARROW) { cx += step; } if (keyCode === UP_ARROW) { cy -= step; } if (keyCode === DOWN_ARROW) { cy += step; } }Demo Prøv det kørende eksempel
Materiale keyPressed() keyCode Keycode.info er et et værktøj vise hvilken kode der udsendes når der trykkes på de forskellige taster på tastaturet. fill() background() stroke() circle() text() textSize()</description></item><item><title>Multitouch</title><link>https://getsrevel.github.io/tech/p5js/multitouch/index.html</link><pubDate>Wed, 04 Dec 2019 12:46:20 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/multitouch/index.html</guid><description>Dette er et eksempel på hvordan man man håndtere flere samtidige berørings hændelser, f.eks. som knapper i et mobil spil, der kræver flere samtidige inputs.
let buttons = { left: false, right: false }; const bSize = 80; const margin = 20; let leftButton; let rightButton; function setup() { createCanvas(windowWidth, windowHeight); background(0); leftButton = createButton("left"); leftButton.mousePressed(leftPressed); leftButton.mouseReleased(leftReleased); leftButton.touchStarted(leftPressed); leftButton.touchEnded(leftReleased); leftButton.style("background-color", "red"); leftButton.class("noselect"); leftButton.size(bSize, bSize); rightButton = createButton("right"); rightButton.mousePressed(rightPressed); rightButton.mouseReleased(rightReleased); rightButton.touchStarted(rightPressed); rightButton.touchEnded(rightReleased); rightButton.style("background-color", "green"); rightButton.class("noselect"); rightButton.size(bSize, bSize); handleButtonPositions(); } function draw() { background(100); // left button fill(buttons.left ? "red" : "pink"); rect(margin, margin, bSize, bSize); // right button fill(buttons.right ? "green" : "teal"); rect(width - margin - bSize, margin, bSize, bSize); } const leftPressed = () => (buttons.left = true); const leftReleased = () => (buttons.left = false); const rightPressed = () => (buttons.right = true); const rightReleased = () => (buttons.right = false); const handleButtonPositions = () => { leftButton.position(margin, height - margin - bSize); rightButton.position(width - margin - bSize, height - margin - bSize); }; function windowResized() { resizeCanvas(windowWidth, windowHeight); handleButtonPositions(); }Bemærk at det er nødvendigt med en smule styling via CSS for at få eksemplet til at virke. Derfor er der tilføjet en klasse til button elementerne, og denne regel er tilføjet til stylesheet for siden.</description></item><item><title>Polar Loop</title><link>https://getsrevel.github.io/tech/p5js/polar-loop/index.html</link><pubDate>Wed, 04 Dec 2019 12:46:20 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/polar-loop/index.html</guid><description>Eksempel på brug af polære koordinater.
function setup() { createCanvas(windowWidth, windowHeight); } function draw() { background(220); noFill(); const scale = map(mouseX, 50, width - 50, 0, 30, true); const tick = map(mouseY, 100, height - 100, PI / 12, (2 * PI) / 3, true); translate(width / 2, height / 2); const diameter = 20; circle(0, 0, diameter); const magnitude = 10 * scale; circle(0, 0, magnitude * 2); fill("blue"); for (let theta = 0; theta &lt; 2 * PI; theta += tick) { const cx = magnitude * cos(theta); const cy = magnitude * sin(theta); circle(cx, cy, diameter); } }Demo Prøv det kørende eksempel
Materiale setup() draw() createCanvas() background() noFill() map() translate() fill() circle()</description></item><item><title>Polar Spinner</title><link>https://getsrevel.github.io/tech/p5js/polar-spinner/index.html</link><pubDate>Wed, 04 Dec 2019 12:46:20 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/polar-spinner/index.html</guid><description>Eksempel med omregning mellem polære og kartesiske koordinater.
let angle = 0; function setup() { createCanvas(windowWidth, windowHeight); } function draw() { background(0); let diameter = 50; translate(width / 2, height / 2); rotate(angle); const speed = map(mouseX, 0, width, -1, 1, true); angle += 0.1 * speed; const showDots = mouseY &lt; height/2; fill(0); textSize(40); text("Tak for kaffe :-)", 30, 10); noFill(); strokeWeight(5); stroke('greenyellow') beginShape(); magnitude = 0; const magStep = map(mouseY, 0, height, 0, 2, true); for (let theta = 0; theta &lt; 100 * PI; theta += 0.2) { let cx = magnitude * cos(theta); let cy = magnitude * sin(theta); if(showDots){ point(cx, cy); } else { vertex(cx, cy); } magnitude += magStep; } endShape(); }Demo Prøv det kørende eksempel
Materiale setup() draw() createCanvas() background() translate() rotate() fill() noFill() beginShape() text() textSize() stroke() strokeWeight() point() vertex() endShape()</description></item><item><title>Tacospin</title><link>https://getsrevel.github.io/tech/p5js/tacospin/index.html</link><pubDate>Wed, 04 Dec 2019 12:46:20 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/tacospin/index.html</guid><description>Dette er et eksempel på hvordan man kan loade et billede ind i p5, og ændre på skalering og rotation.
let img; function preload() { img = loadImage("assets/taco.jpg"); } function setup() { createCanvas(windowWidth, windowHeight); } let angle = 0; function draw() { background(220); const speed = map(mouseX, 0, width, -1, 1, true); // show angle value const tHeight = 40; const margin = 10; textSize(tHeight); let tposY = margin + tHeight; text(`Angle ${nfc(angle, 2)}`, margin, tposY); tposY += margin + tHeight; text(`Speed ${nfc(speed, 2)}`, margin, tposY); // draw at center of canvas const cx = width / 2; const cy = height / 2; translate(cx, cy); // compute image scale const scale = 0.3; const dw = img.width * scale; const dh = img.height * scale; // draw image rotate(angle); imageMode(CENTER); image(img, 0, 0, dw, dh); angle += 0.1 * speed; }Demo Prøv det kørende eksempel</description></item><item><title>HSL Colors</title><link>https://getsrevel.github.io/tech/p5js/hsl-colors/index.html</link><pubDate>Mon, 04 Feb 2019 17:48:21 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/hsl-colors/index.html</guid><description>Et eksempel der viser hvordan HSL farver kan bruges i p5.
function setup() { createCanvas(windowWidth, windowHeight); slider = createSlider(0, 255, 200, 1); slider.position(width/2-255, height/2-300); slider.style('width', `${255*2}px`); } function draw() { translate(width / 2, height / 2); const x1 = 0; const y1 = 0; const x2 = mouseX - width / 2; const y2 = mouseY - height / 2; const angle = atan2(y2, x2); // d is the length of the line // the distance from point 1 to point 2. const d = int(dist(x1, y1, x2, y2)); const saturation = constrain(d, 0, 255); const hueVal = map(angle, -PI, PI, 0, 255); const brightnessVal = slider.value(); const x3 = saturation * cos(angle); const y3 = saturation * sin(angle); // background(200); colorMode(HSB, 255); const c = color(hueVal, saturation, brightnessVal); noFill(); circle(x1, y1, 255*2); fill(c); // line(x1, y1, x3, y3); const circleDiameter = 30; stroke(0) strokeWeight(3) circle(x1, y1, circleDiameter * 2); noStroke() circle(x3, y3, circleDiameter); // Write values as text let msg = `abs: ${d}, angle: ${nfc(angle, 2)}`; let hsvMsg = `hue: ${nfc(hueVal, 0)}, saturation: ${nfc(saturation)}, brightness: ${nfc(brightnessVal)}`; push(); translate(x1 -200, y1 - 320); noStroke(); fill(255); rect(-10,-50,400,60) fill(0); textSize(20); text(msg, 0, -5); text(hsvMsg, 0, -30); pop(); }Demo Prøv det kørende eksempel</description></item><item><title>Stickman Objects</title><link>https://getsrevel.github.io/tech/p5js/stickman-demo/index.html</link><pubDate>Mon, 04 Feb 2019 08:29:07 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/stickman-demo/index.html</guid><description>Denne demonstration er et eksempel på hvordan man kan bruge klasser og objekter til at strukturere koden. I eksemplet tegnes nogle hoppende tændstikmænd med forskellige egenskaber.
Filen sketch.js indeholder den sædvanlige struktur for et program skrevet i p5js.
I setup() oprettes et lærred, og der oprettes tre objekter af klassen stickman. Bemærk at de bliver initialiseret med forskellige egenskaber via deres constructor.
I draw() kaldes metoderne render() og update() på begge de to StickMan objekter.</description></item><item><title>Sound</title><link>https://getsrevel.github.io/tech/p5js/sound/index.html</link><pubDate>Thu, 31 Jan 2019 12:35:50 +0100</pubDate><guid>https://getsrevel.github.io/tech/p5js/sound/index.html</guid><description>Her er et eksempel på hvordan man kan arbejde med lyd i p5.
let flickSound; let whistleSound; let whistleShortSound function preload() { flickSound = loadSound('flick.mp3'); whistleSound = loadSound('whistle.mp3', doneLoadingWhistleSound); whistleShortSound = loadSound('whistle-short.mp3', () => { console.log('short ready'); }); } function setup() { createCanvas(windowWidth, windowHeight); } function doneLoadingWhistleSound(){ console.log("doneLoadingWhistleSound"); } function draw() { background(220); fill("blue"); circle(width / 2, height / 2, 50); textSize(20); text("Tryk på: SPACE, K, L, W", 50,50); text("eller klik med musen", 50,80); } function mouseClicked(){ console.log("flick started by mouse"); flickSound.play(); } function keyPressed(){ if(' ' == key){ console.log("flick started by keyboad"); flickSound.play(); } if('l' == key){ whistleSound.setLoop(true); whistleSound.play(); } if('k' == key){ whistleSound.setLoop(false); } if('w' == key) { console.log("short whistle"); whistleShortSound.play(); } }Demo Prøv det kørende eksempel.</description></item></channel></rss>