<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Node.js :: Getsrevel</title><link>https://getsrevel.github.io/tech/node/index.html</link><description>Eksempler med Node.js.</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 16 Oct 2021 08:42:14 +0200</lastBuildDate><atom:link href="https://getsrevel.github.io/tech/node/index.xml" rel="self" type="application/rss+xml"/><item><title>Intro</title><link>https://getsrevel.github.io/tech/node/intro/index.html</link><pubDate>Tue, 21 Jan 2020 14:11:13 +0100</pubDate><guid>https://getsrevel.github.io/tech/node/intro/index.html</guid><description>Her er nogle links til at komme i gang med node.js.
Node.js Getting started guide Node guides npm - Node Package Manager Express web framework for node.js Node gør det muligt at lave programmer der kan køres fra kommandolinien. Her er et simpelt eksempel.
// this is a comment /* This is a multiline comment */ // Erklæring af variabel let name; // Tildering af variable name = "Allan"; // Erklæring og tildeling på samme linje let greeting = "Hej "; // Iteration med for-løkke for (let i = 0; i &lt; 5; i++) { let separator = ''; if (i &lt; 3) { separator = ', '; } else if (i &lt; 4) { separator = ' og '; } greeting += name + separator; } // Udskrift til konsol console.log(greeting); // Matematiske beregninger let a = 5; let b = 3; let number = a * b; console.log(a + " gange " + b + " giver " + number); // Betingelser og forgreninger if (number > 5) { console.log("Det var et stort tal"); } else { console.log("Ok tak"); } // Definition af egne funktioner function myAdd(a, b) { return a + b; } result = myAdd(number, 34); console.log(result); // Brug af biblioteks funktion let root = Math.sqrt(result); console.log(root); console.log("Program afslutter");Hvis du gemmer koden i filen node-demo.js, kan du eksekvere programmet med denne kommando.</description></item><item><title>Command Line Interface Arguments</title><link>https://getsrevel.github.io/tech/node/cli-args/index.html</link><pubDate>Sat, 16 Oct 2021 08:42:14 +0200</pubDate><guid>https://getsrevel.github.io/tech/node/cli-args/index.html</guid><description>Eksempler på forskellige måder at man kan bruge argumenter fra kommandolinjen til at påvirke afviklingen af et program.
Simpel brug af CLI argumenter Kommandolinje argumenter kan f.eks. benyttes således const args = process.argv.slice(2) console.log(args) if(1 == args.length){ const name = args[0] console.log(`Hello, ${name}!`) } else { console.log("Hello, world!") }Programmet giver dette output ved afvikling af med forskellig input argumenter.
$ node cli-args-demo.js [] Hello, world! $ node cli-args-demo.js Bjarne [ 'Bjarne' ] Hello, Bjarne! $ node cli-args-demo.js Finn, Find og Bjarne [ 'Finn', 'Find', 'og', 'Bjarne' ] Hello, world!Minimist pakken Det kan være fordelagtigt at benytte npm pakken minimist, hvis der er brug for mere end de aller simpleste argumenter. Det gør det langt nemmere at parse indholdet in i variabler, der kan benyttes i programmet.</description></item><item><title>Discord Bot</title><link>https://getsrevel.github.io/tech/node/discord-bot/index.html</link><pubDate>Wed, 27 Jan 2021 13:00:37 +0100</pubDate><guid>https://getsrevel.github.io/tech/node/discord-bot/index.html</guid><description>Dette eksempel viser hvordan man kan lave en Discord bot, som kan reagere på kommandoer i en tekstkanal.
Oprettelse af Discord Application og Bot Start med at oprette en application i Discord udvikler portalen.
Derefter skal der tilføjes en Bot til din application.
For at give din bot adgang til din discord server, kan du bruge denne URL:
https://discord.com/oauth2/authorize?client_id=YOUR_CLIENT_ID&amp;scope=botBemærk at YOUR_CLIENT_ID skal erstattes med det relevante id for din specifikke bot. Du kan også få en korrekt URL genereret ved at gå ind under OAuth2 i menuen, og vælge bot under scopes.</description></item><item><title>Web Server</title><link>https://getsrevel.github.io/tech/node/web-server/index.html</link><pubDate>Fri, 22 Jan 2021 12:38:24 +0100</pubDate><guid>https://getsrevel.github.io/tech/node/web-server/index.html</guid><description>Dette er et eksempel på en simpel web-server, lavet med node js og det ofte benyttede web framework express. Ved at benytte pakker fra npm, kan man ret nemt lave systemet uden at skulle programmere alt op fra grunden.
Opsætning af projekt Først skal der laves et projekt så node kan finde ud af at køre programmet, og har en package.json fil til at holde styr på projektet og afhængigheder af biblioteksmoduler.</description></item><item><title>Webrtc Server</title><link>https://getsrevel.github.io/tech/node/webrtc-server/index.html</link><pubDate>Wed, 20 Jan 2021 11:01:36 +0100</pubDate><guid>https://getsrevel.github.io/tech/node/webrtc-server/index.html</guid><description>Dette er eksempel viser hvordan man kan streame indholdet af et html canvas element (en p5js sketch) til en anden maskine. Streaming delen håndteres af WebRTC, og etablering af forbindelsen håndteres ved hjælp af Socket.io.
Opsætning af projekt Først skal der laves et projekt så node kan finde ud af at køre programmet, og har en package.json fil til at holde styr på projektet og afhængigheder af biblioteksmoduler.
Start med at lave en mappe, som kan indeholde dit projekt. Kald den f.eks. webrtc-server. I denne mappe skal du køre følgende kommando, for at oprette projekt filen package.json.</description></item><item><title>Readline on Stdin</title><link>https://getsrevel.github.io/tech/node/readline-stdin/index.html</link><pubDate>Thu, 07 May 2020 14:31:13 +0200</pubDate><guid>https://getsrevel.github.io/tech/node/readline-stdin/index.html</guid><description>Dette eksempel viser en måde at tage imod input fra kommandolinien.
Opret filen readline-demo.js med følgende indhold.
const readline = require('readline'); const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); const getLine = (function () { const getLineGen = (async function* () { for await (const line of rl) { yield line; } })(); return async () => ((await getLineGen.next()).value); })(); const main = async () => { console.log('Type value for a'); let a = Number(await getLine()); console.log(`Got a: ${a}`); console.log('Type value for b'); let b = Number(await getLine()); console.log(`Got b: ${b}`); console.log('Result of a+b'); console.log(a + b); process.exit(0); }; main();Nu kan du køre eksemplet med denne kommando:</description></item><item><title>Serial Json</title><link>https://getsrevel.github.io/tech/node/serial-json/index.html</link><pubDate>Tue, 31 Mar 2020 21:22:31 +0100</pubDate><guid>https://getsrevel.github.io/tech/node/serial-json/index.html</guid><description>Dette eksempel viser hvordan man kan læse fra en serielport vha. node.js. For at kunne køre eksemplet på en meningsfuld måde, kræver det at der er tilsluttet en enhed til serielporten på computeren. Ydermere skal denne enhed sende beskeder afsted i json format, og porten skal være sat op med passende instillinger.
Jeg har tidligere lavet et eksempel, der kan sende json beskeder som output på serielporten på en Arduino, og det er disse data der forventes at være input til dette eksempel.</description></item><item><title>Socket IO</title><link>https://getsrevel.github.io/tech/node/socket-io-demo/index.html</link><pubDate>Tue, 21 Jan 2020 14:15:10 +0100</pubDate><guid>https://getsrevel.github.io/tech/node/socket-io-demo/index.html</guid><description>Dette eksempel viser hvordan man kan lave en webserver, der kan køre et eksempel hvor clienter på forskellige maskiner kan kommunikere via en web-socket.
Det er baseret på en videotutorial af Daniel Shiffman fra The Coding Train.
Socket io video tutorial 12.1: Introduction to Node - WebSockets and p5.js Tutorial Introduktion til web sockets. Installation af node “hello world” demo 12.2: Using Express with Node - WebSockets and p5.js Tutorial Hosting af statiske klient filer på node server med Express. 12.3: Connecting Client to Server with Socket.io - WebSockets and p5.js Tutorial Tilføjelse af Socket.io til klient og server Vis klientens ID når de forbinder sig 12.4: Shared Drawing Canvas - WebSockets and p5.js Tutorial Afsendelse af hændelser (events) fra klienter Broadcast af events fra server Tegning på skærmen i de modtagende klienter Materiale Node npm - Node Package Manager Socket.io Socket.io - Get started Express p5.js p5js getting started p5js reference Kode eksempel Det kan være nødvendigt med et par små justeringer ift. koden i videoerne.</description></item><item><title>Web Scraping</title><link>https://getsrevel.github.io/tech/node/web-scraping/index.html</link><pubDate>Wed, 15 Jan 2020 22:34:12 +0100</pubDate><guid>https://getsrevel.github.io/tech/node/web-scraping/index.html</guid><description>Dette er et eksempel på en scraper, der finder alle links på en side, og skriver deres URL ud i konsollen. Den benytter to pakker fra npm, så hele systemet ikke skal programmeres op fra grunden. Pakken axios benyttes i eksemplet til at arbejde med http requests, og cheerio bruges til at parse html strukturen, der returneres fra serveren, og uddrage de data man er interesseret i at arbejde videre med i programmet. Disse pakker skal installeres fra npm for at eksemplet kan eksekveres på din maskine.</description></item></channel></rss>