{"version":3,"sources":["components/Clock.js","lib/fake_highscores.js","components/Highscore.js","lib/Firebase.js","components/Hotdog.js","App.js","serviceWorker.js","index.js"],"names":["Clock","useState","Date","toLocaleTimeString","time","setTime","updateTime","useEffect","setInterval","data","userIdOne","username","firstName","lastName","scores","date","score","userIdTwo","userIdThree","User","props","user","map","item","i","Highscore","Object","values","key","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","docRef","firestore","doc","Hotdog","thingToDoWhithDocumentData","exists","myData","setHotdogStatus","hotdogStatus","onSnapshot","className","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAgBeA,MAdf,WAAkB,IAAD,EACSC,oBAAS,IAAIC,MAAOC,sBAD7B,mBACRC,EADQ,KACFC,EADE,KAGTC,EAAa,WACjBD,GAAQ,IAAIH,MAAOC,uBAOrB,OAJAI,qBAAU,WACRC,YAAYF,EAAY,QAGnB,4CAAkBF,ICuBZK,EAnCF,CACXC,UAAW,CACTC,SAAU,OACVC,UAAW,OACXC,SAAU,SACVC,OAAQ,CACN,CAAEC,KAAM,sBAAuBC,MAAO,GACtC,CAAED,KAAM,sBAAuBC,MAAO,IACtC,CAAED,KAAM,sBAAuBC,MAAO,MAG1CC,UAAW,CACTN,SAAU,KACVC,UAAW,YACXC,SAAU,OACVC,OAAQ,CACN,CAAEC,KAAM,sBAAuBC,MAAO,KACtC,CAAED,KAAM,sBAAuBC,MAAO,IACtC,CAAED,KAAM,sBAAuBC,MAAO,IACtC,CAAED,KAAM,sBAAuBC,MAAO,IACtC,CAAED,KAAM,sBAAuBC,MAAO,MAG1CE,YAAa,CACXP,SAAU,OACVC,UAAW,OACXC,SAAU,MACVC,OAAQ,CACN,CAAEC,KAAM,sBAAuBC,MAAO,IACtC,CAAED,KAAM,sBAAuBC,MAAO,GACtC,CAAED,KAAM,sBAAuBC,MAAO,OCd5C,IAAMG,EAAO,SAAAC,GACX,OACE,6BACE,4BACGA,EAAMC,KAAKT,UADd,IAC0BQ,EAAMC,KAAKR,UAErC,wCAAcO,EAAMC,KAAKV,UACzB,+BACE,+BACE,4BACE,oCACA,uCAIJ,+BACGS,EAAMC,KAAKP,OAAOQ,KAAI,SAACC,EAAMC,GAAP,OACrB,4BACE,4BAAKD,EAAKR,MACV,4BAAKQ,EAAKP,eASTS,EAzCf,WACE,OACE,6BACE,0CAEEC,OAAOC,OAAOlB,GAAMa,KAAI,SAAAC,GAAI,OAC1B,kBAAC,EAAD,CAAMK,IAAKL,EAAKZ,SAAUU,KAAME,S,gBCK1CM,IAASC,cAZc,CACrBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMFT,ICTTU,EDSSV,EAAf,ECX2BW,YAEFC,IAAI,wBA8BdC,MA5Bf,WAEE,IAAMC,EAA6B,SAAAF,GACjC,GAAIA,GAAOA,EAAIG,OAAQ,CACrB,IAAMC,EAASJ,EAAIhC,OACnBqC,EAAgBD,EAAOE,gBALX,EAawB9C,mBAAS,IAbjC,mBAaT8C,EAbS,KAaKD,EAbL,KAoBhB,OALAvC,qBAAU,WALRgC,EAAOS,WAAWL,MAWlB,yBAAKM,UAAU,iBACb,4CACA,8CAAmB,8BAAOF,MChBjBG,MAVf,WACE,OACE,yBAAKD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5fe0694a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction Clock() {\n  const [time, setTime] = useState(new Date().toLocaleTimeString());\n\n  const updateTime = () => {\n    setTime(new Date().toLocaleTimeString());\n  };\n\n  useEffect(() => {\n    setInterval(updateTime, 1000);\n  });\n\n  return <div>Klokken er: {time}</div>;\n}\n\nexport default Clock;\n","// Fake data - could come from a database or similar\r\nconst data = {\r\n  userIdOne: {\r\n    username: \"jens\",\r\n    firstName: \"Jens\",\r\n    lastName: \"Hansen\",\r\n    scores: [\r\n      { date: \"2020-03-16T10:30:45\", score: 7 },\r\n      { date: \"2020-03-16T12:30:45\", score: 15 },\r\n      { date: \"2020-03-16T12:32:45\", score: 10 },\r\n    ]\r\n  },\r\n  userIdTwo: {\r\n    username: \"jj\",\r\n    firstName: \"JÃ¸rgen\",\r\n    lastName: \"Jyde\",\r\n    scores: [\r\n      { date: \"2020-03-16T11:30:42\", score: 120 },\r\n      { date: \"2020-03-16T12:35:31\", score: 12 },\r\n      { date: \"2020-03-16T12:37:20\", score: 23 },\r\n      { date: \"2020-03-17T09:07:34\", score: 17 },\r\n      { date: \"2020-03-17T09:31:10\", score: 25 },\r\n    ]\r\n  },\r\n  userIdThree: {\r\n    username: \"john\",\r\n    firstName: \"John\",\r\n    lastName: \"Doe\",\r\n    scores: [\r\n      { date: \"2020-03-16T10:57:45\", score: 11 },\r\n      { date: \"2020-03-16T11:05:45\", score: 8 },\r\n      { date: \"2020-03-16T11:21:12\", score: 13 },\r\n    ]\r\n  }\r\n};\r\n\r\nexport default data;","import React from \"react\";\n\nimport data from '../lib/fake_highscores';\n\nfunction Highscore() {\n  return (\n    <div>\n      <h1>Highscores</h1>\n      {\n        Object.values(data).map(item => (\n          <User key={item.username} user={item} />\n        ))\n      }\n    </div>\n  );\n}\n\nconst User = props => {\n  return (\n    <div>\n      <h2>\n        {props.user.firstName} {props.user.lastName}\n      </h2>\n      <p>Username: {props.user.username}</p>\n      <table>\n        <thead>\n          <tr>\n            <th>Time</th>\n            <th>Score</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {props.user.scores.map((item, i) => (\n            <tr>\n              <td>{item.date}</td>\n              <td>{item.score}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Highscore;\n","import firebase from \"firebase\";\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAof7A2wpEylAFHsKWvqeJU8VkYN7G1VMI\",\r\n  authDomain: \"coldhawaiiweather.firebaseapp.com\",\r\n  databaseURL: \"https://coldhawaiiweather.firebaseio.com\",\r\n  projectId: \"coldhawaiiweather\",\r\n  storageBucket: \"coldhawaiiweather.appspot.com\",\r\n  messagingSenderId: \"645018619046\",\r\n  appId: \"1:645018619046:web:2ae11bff4009e1e965f867\",\r\n  measurementId: \"G-61E1DX0Z3Q\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\n// import the firebase configuration settings\r\nimport firebase from \"../lib/Firebase\";\r\n\r\n// initialize firestore\r\nconst firestore = firebase.firestore();\r\n\r\nconst docRef = firestore.doc(\"samples/sandwichData\");\r\n\r\nfunction Hotdog() {\r\n\r\n  const thingToDoWhithDocumentData = doc => {\r\n    if (doc && doc.exists) {\r\n      const myData = doc.data();\r\n      setHotdogStatus(myData.hotdogStatus);\r\n    }\r\n  };\r\n\r\n  const getRealtimeUpdates = () => {\r\n    docRef.onSnapshot(thingToDoWhithDocumentData);\r\n  };\r\n\r\n  const [hotdogStatus, setHotdogStatus] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // subscribe to realtime updates when component loads or updates\r\n    getRealtimeUpdates();\r\n  });\r\n\r\n  return (\r\n    <div className=\"hotdog-status\">\r\n      <b>Breaking News</b>\r\n      <h1>Hotdog status: <span>{hotdogStatus}</span></h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Hotdog;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Clock from './components/Clock'\r\nimport Highscore from './components/Highscore';\r\nimport Hotdog from './components/Hotdog';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Clock />\r\n      <Hotdog />\r\n      <Highscore />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}