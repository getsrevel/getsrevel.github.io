<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React on Getsrevel</title><link>https://getsrevel.github.io/tech/react/</link><description>Recent content in React on Getsrevel</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 17 Mar 2020 22:00:26 +0100</lastBuildDate><atom:link href="https://getsrevel.github.io/tech/react/index.xml" rel="self" type="application/rss+xml"/><item><title>Components + Data</title><link>https://getsrevel.github.io/tech/react/component-props/</link><pubDate>Tue, 17 Mar 2020 23:30:32 +0100</pubDate><guid>https://getsrevel.github.io/tech/react/component-props/</guid><description>Her er et eksempel på hvordan man kan bruge properties på react komponenter til at vise udvalgte informationer, f.eks. fra en database eller et API.
Eksemplet bygger videre på den app der blev oprettet i React intro.
Input data For at have noget data at vise, oprettes følgende datastruktur oprettet i filen src/lib/fake_highscores.js.
// Fake data - could come from a database or similar const data = { userIdOne: { username: &amp;#34;jens&amp;#34;, firstName: &amp;#34;Jens&amp;#34;, lastName: &amp;#34;Hansen&amp;#34;, scores: [ { date: &amp;#34;2020-03-16T10:30:45&amp;#34;, score: 7 }, { date: &amp;#34;2020-03-16T12:30:45&amp;#34;, score: 15 }, { date: &amp;#34;2020-03-16T12:32:45&amp;#34;, score: 10 }, ] }, userIdTwo: { username: &amp;#34;jj&amp;#34;, firstName: &amp;#34;Jørgen&amp;#34;, lastName: &amp;#34;Jyde&amp;#34;, scores: [ { date: &amp;#34;2020-03-16T11:30:42&amp;#34;, score: 120 }, { date: &amp;#34;2020-03-16T12:35:31&amp;#34;, score: 12 }, { date: &amp;#34;2020-03-16T12:37:20&amp;#34;, score: 23 }, { date: &amp;#34;2020-03-17T09:07:34&amp;#34;, score: 17 }, { date: &amp;#34;2020-03-17T09:31:10&amp;#34;, score: 25 }, ] }, userIdThree: { username: &amp;#34;john&amp;#34;, firstName: &amp;#34;John&amp;#34;, lastName: &amp;#34;Doe&amp;#34;, scores: [ { date: &amp;#34;2020-03-16T10:57:45&amp;#34;, score: 11 }, { date: &amp;#34;2020-03-16T11:05:45&amp;#34;, score: 8 }, { date: &amp;#34;2020-03-16T11:21:12&amp;#34;, score: 13 }, ] } }; export default data; I en rigtig app kan vi forestille os at data er gemt i en database, i og ikke blot gemt i en statisk fil.</description></item><item><title>React + Firebase</title><link>https://getsrevel.github.io/tech/react/react-with-firebase/</link><pubDate>Wed, 18 Mar 2020 08:37:19 +0100</pubDate><guid>https://getsrevel.github.io/tech/react/react-with-firebase/</guid><description>Dette eksempel viser hvordan man kan integrere Firebase Firestore i en react app. Det tager udgangspunkt i samme simple eksempel, som blev brugt i hotdog demoen. Dog vil vi her nøjes med at læse data fra Firestore.
Eksemplet bygger videre på den app der blev oprettet i React intro, og udvidet i Components + Data.
Installation af Firebase For at kunne benytte funktionaliteter fra firebase i vores react app, er det nødvendigt at installere firebase SDK.</description></item><item><title>React + Firestore Fake Weather</title><link>https://getsrevel.github.io/tech/react/react-fake-weather/</link><pubDate>Wed, 15 Apr 2020 08:32:39 +0200</pubDate><guid>https://getsrevel.github.io/tech/react/react-fake-weather/</guid><description>Dette eksempel bygger videre på react eksemplet med firestore, og demonstrationen af hvordan man kan uploade data med node.js.
Statisk data visning Først laves en fil med samme struktur som forventes at være i firestore databasen, når upload scriptet har kørt nogle gange. Data strukturen laves i filen src/lib/fake_weather.js, med dette indhold.
import firebase from &amp;#34;../lib/Firebase&amp;#34;; const Timestamp = firebase.firestore.Timestamp; // helper for generating firestore timestamps const t = timeString =&amp;gt; Timestamp.</description></item></channel></rss>